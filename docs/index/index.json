{"includedArchiveIdentifiers":["LichessClient"],"interfaceLanguages":{"swift":[{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lichessclient\/asyncsemaphore\/init(value:)","title":"init(value: Int)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lichessclient\/asyncsemaphore\/acquire()","title":"func acquire() async","type":"method"},{"path":"\/documentation\/lichessclient\/asyncsemaphore\/release()","title":"func release()","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lichessclient\/asyncsemaphore\/assertisolated(_:file:line:)","title":"func assertIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"},{"path":"\/documentation\/lichessclient\/asyncsemaphore\/assumeisolated(_:file:line:)","title":"func assumeIsolated<T>((isolated Self) throws -> T, file: StaticString, line: UInt) rethrows -> T","type":"method"},{"path":"\/documentation\/lichessclient\/asyncsemaphore\/preconditionisolated(_:file:line:)","title":"func preconditionIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"}],"path":"\/documentation\/lichessclient\/asyncsemaphore\/actor-implementations","title":"Actor Implementations","type":"symbol"}],"path":"\/documentation\/lichessclient\/asyncsemaphore","title":"AsyncSemaphore","type":"class"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lichessclient\/concurrencylimitmiddleware\/init(maxconcurrentrequests:)","title":"init(maxConcurrentRequests: Int)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lichessclient\/concurrencylimitmiddleware\/intercept(_:body:baseurl:operationid:next:)","title":"func intercept(HTTPRequest, body: HTTPBody?, baseURL: URL, operationID: String, next: (HTTPRequest, HTTPBody?, URL) async throws -> (HTTPResponse, HTTPBody?)) async throws -> (HTTPResponse, HTTPBody?)","type":"method"}],"path":"\/documentation\/lichessclient\/concurrencylimitmiddleware","title":"ConcurrencyLimitMiddleware","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lichessclient\/loggingconfiguration\/init(enabled:level:logbodies:redactheaders:sink:)","title":"init(enabled: Bool, level: LoggingConfiguration.Level, logBodies: Bool, redactHeaders: [HTTPField.Name], sink: (String) -> Void)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lichessclient\/loggingconfiguration\/enabled","title":"var enabled: Bool","type":"property"},{"path":"\/documentation\/lichessclient\/loggingconfiguration\/level-swift.property","title":"var level: LoggingConfiguration.Level","type":"property"},{"path":"\/documentation\/lichessclient\/loggingconfiguration\/logbodies","title":"var logBodies: Bool","type":"property"},{"path":"\/documentation\/lichessclient\/loggingconfiguration\/redactheaders","title":"var redactHeaders: [HTTPField.Name]","type":"property"},{"path":"\/documentation\/lichessclient\/loggingconfiguration\/sink","title":"var sink: (String) -> Void","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/lichessclient\/loggingconfiguration\/level-swift.enum\/debug","title":"case debug","type":"case"},{"path":"\/documentation\/lichessclient\/loggingconfiguration\/level-swift.enum\/info","title":"case info","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lichessclient\/loggingconfiguration\/level-swift.enum\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lichessclient\/loggingconfiguration\/level-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/lichessclient\/loggingconfiguration\/level-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lichessclient\/loggingconfiguration\/level-swift.enum\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lichessclient\/loggingconfiguration\/level-swift.enum\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/lichessclient\/loggingconfiguration\/level-swift.enum\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/lichessclient\/loggingconfiguration\/level-swift.enum","title":"LoggingConfiguration.Level","type":"enum"}],"path":"\/documentation\/lichessclient\/loggingconfiguration","title":"LoggingConfiguration","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lichessclient\/loggingmiddleware\/init(configuration:)","title":"init(configuration: LoggingConfiguration)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lichessclient\/loggingmiddleware\/intercept(_:body:baseurl:operationid:next:)","title":"func intercept(HTTPRequest, body: HTTPBody?, baseURL: URL, operationID: String, next: (HTTPRequest, HTTPBody?, URL) async throws -> (HTTPResponse, HTTPBody?)) async throws -> (HTTPResponse, HTTPBody?)","type":"method"}],"path":"\/documentation\/lichessclient\/loggingmiddleware","title":"LoggingMiddleware","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lichessclient\/ratelimitmiddleware\/init(policy:)","title":"init(policy: RateLimitPolicy)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lichessclient\/ratelimitmiddleware\/intercept(_:body:baseurl:operationid:next:)","title":"func intercept(HTTPRequest, body: HTTPBody?, baseURL: URL, operationID: String, next: (HTTPRequest, HTTPBody?, URL) async throws -> (HTTPResponse, HTTPBody?)) async throws -> (HTTPResponse, HTTPBody?)","type":"method"}],"path":"\/documentation\/lichessclient\/ratelimitmiddleware","title":"RateLimitMiddleware","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lichessclient\/ratelimitpolicy\/init(maxretries:defaultdelayseconds:respectretryafterheader:)","title":"init(maxRetries: Int, defaultDelaySeconds: TimeInterval, respectRetryAfterHeader: Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lichessclient\/ratelimitpolicy\/defaultdelayseconds","title":"var defaultDelaySeconds: TimeInterval","type":"property"},{"path":"\/documentation\/lichessclient\/ratelimitpolicy\/maxretries","title":"var maxRetries: Int","type":"property"},{"path":"\/documentation\/lichessclient\/ratelimitpolicy\/respectretryafterheader","title":"var respectRetryAfterHeader: Bool","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lichessclient\/ratelimitpolicy\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/lichessclient\/ratelimitpolicy\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/lichessclient\/ratelimitpolicy","title":"RateLimitPolicy","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lichessclient\/retrymiddleware\/init(policy:)","title":"init(policy: RetryPolicy)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lichessclient\/retrymiddleware\/policy","title":"let policy: RetryPolicy","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lichessclient\/retrymiddleware\/intercept(_:body:baseurl:operationid:next:)","title":"func intercept(HTTPRequest, body: HTTPBody?, baseURL: URL, operationID: String, next: (HTTPRequest, HTTPBody?, URL) async throws -> (HTTPResponse, HTTPBody?)) async throws -> (HTTPResponse, HTTPBody?)","type":"method"}],"path":"\/documentation\/lichessclient\/retrymiddleware","title":"RetryMiddleware","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lichessclient\/retrypolicy\/init(maxattempts:basedelay:jitter:retryonstatuscodes:)","title":"init(maxAttempts: Int, baseDelay: TimeInterval, jitter: TimeInterval, retryOnStatusCodes: Set<Int>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lichessclient\/retrypolicy\/basedelay","title":"var baseDelay: TimeInterval","type":"property"},{"path":"\/documentation\/lichessclient\/retrypolicy\/jitter","title":"var jitter: TimeInterval","type":"property"},{"path":"\/documentation\/lichessclient\/retrypolicy\/maxattempts","title":"var maxAttempts: Int","type":"property"},{"path":"\/documentation\/lichessclient\/retrypolicy\/retryonstatuscodes","title":"var retryOnStatusCodes: Set<Int>","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/lichessclient\/retrypolicy\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/lichessclient\/retrypolicy\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/lichessclient\/retrypolicy","title":"RetryPolicy","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lichessclient\/tokenauthmiddleware\/init(token:)","title":"init(token: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lichessclient\/tokenauthmiddleware\/token","title":"let token: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lichessclient\/tokenauthmiddleware\/intercept(_:body:baseurl:operationid:next:)","title":"func intercept(HTTPRequest, body: HTTPBody?, baseURL: URL, operationID: String, next: (HTTPRequest, HTTPBody?, URL) async throws -> (HTTPResponse, HTTPBody?)) async throws -> (HTTPResponse, HTTPBody?)","type":"method"}],"path":"\/documentation\/lichessclient\/tokenauthmiddleware","title":"TokenAuthMiddleware","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/lichessclient\/useragentmiddleware\/init(useragent:)","title":"init(userAgent: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/lichessclient\/useragentmiddleware\/useragent","title":"let userAgent: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/lichessclient\/useragentmiddleware\/intercept(_:body:baseurl:operationid:next:)","title":"func intercept(HTTPRequest, body: HTTPBody?, baseURL: URL, operationID: String, next: (HTTPRequest, HTTPBody?, URL) async throws -> (HTTPResponse, HTTPBody?)) async throws -> (HTTPResponse, HTTPBody?)","type":"method"}],"path":"\/documentation\/lichessclient\/useragentmiddleware","title":"UserAgentMiddleware","type":"struct"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/lichessclient\/pgnutilities\/joingames(_:)","title":"static func joinGames([String]) -> String","type":"method"},{"path":"\/documentation\/lichessclient\/pgnutilities\/parsetags(from:)","title":"static func parseTags(from: String) -> [String : String]","type":"method"},{"path":"\/documentation\/lichessclient\/pgnutilities\/sanitizeforimport(_:)","title":"static func sanitizeForImport(String) -> String","type":"method"},{"path":"\/documentation\/lichessclient\/pgnutilities\/splitgames(_:)","title":"static func splitGames(String) -> [String]","type":"method"},{"path":"\/documentation\/lichessclient\/pgnutilities\/stripcommentsvariationsandnags(_:)","title":"static func stripCommentsVariationsAndNAGs(String) -> String","type":"method"}],"path":"\/documentation\/lichessclient\/pgnutilities","title":"PGNUtilities","type":"enum"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/lichessclient\/streaming\/ndjsonstream(from:as:decoder:)","title":"static func ndjsonStream<T>(from: HTTPBody, as: T.Type, decoder: JSONDecoder) -> AsyncThrowingStream<T, any Error>","type":"method"}],"path":"\/documentation\/lichessclient\/streaming","title":"Streaming","type":"enum"}],"path":"\/documentation\/lichessclient","title":"LichessClient","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":2}}