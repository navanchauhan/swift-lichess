// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
internal protocol APIProtocol: Sendable {
    /// Get real-time users status
    ///
    /// Read the `online`, `playing` and `streaming` flags of several users.
    /// This API is very fast and cheap on lichess side.
    /// So you can call it quite often (like once every 5 seconds).
    /// Use it to track players and know when they're connected on lichess and playing games.
    ///
    ///
    /// - Remark: HTTP `GET /api/users/status`.
    /// - Remark: Generated from `#/paths//api/users/status/get(apiUsersStatus)`.
    func apiUsersStatus(_ input: Operations.apiUsersStatus.Input) async throws -> Operations.apiUsersStatus.Output
    /// Get all top 10
    ///
    /// Get the top 10 players for each speed and variant.
    /// See <https://lichess.org/player>.
    ///
    ///
    /// - Remark: HTTP `GET /api/player`.
    /// - Remark: Generated from `#/paths//api/player/get(player)`.
    func player(_ input: Operations.player.Input) async throws -> Operations.player.Output
    /// Get one leaderboard
    ///
    /// Get the leaderboard for a single speed or variant (a.k.a. `perfType`).
    /// There is no leaderboard for correspondence or puzzles.
    /// See <https://lichess.org/player/top/200/bullet>.
    ///
    ///
    /// - Remark: HTTP `GET /api/player/top/{nb}/{perfType}`.
    /// - Remark: Generated from `#/paths//api/player/top/{nb}/{perfType}/get(playerTopNbPerfType)`.
    func playerTopNbPerfType(_ input: Operations.playerTopNbPerfType.Input) async throws -> Operations.playerTopNbPerfType.Output
    /// Get user public data
    ///
    /// Read public data of a user.
    ///
    ///
    /// - Remark: HTTP `GET /api/user/{username}`.
    /// - Remark: Generated from `#/paths//api/user/{username}/get(apiUser)`.
    func apiUser(_ input: Operations.apiUser.Input) async throws -> Operations.apiUser.Output
    /// Get rating history of a user
    ///
    /// Read rating history of a user, for all perf types.
    /// There is at most one entry per day.
    /// Format of an entry is `[year, month, day, rating]`.
    /// `month` starts at zero (January).
    ///
    ///
    /// - Remark: HTTP `GET /api/user/{username}/rating-history`.
    /// - Remark: Generated from `#/paths//api/user/{username}/rating-history/get(apiUserRatingHistory)`.
    func apiUserRatingHistory(_ input: Operations.apiUserRatingHistory.Input) async throws -> Operations.apiUserRatingHistory.Output
    /// Get performance statistics of a user
    ///
    /// Read performance statistics of a user, for a single performance.
    /// Similar to the [performance pages on the website](https://lichess.org/@/thibault/perf/bullet).
    ///
    ///
    /// - Remark: HTTP `GET /api/user/{username}/perf/{perf}`.
    /// - Remark: Generated from `#/paths//api/user/{username}/perf/{perf}/get(apiUserPerf)`.
    func apiUserPerf(_ input: Operations.apiUserPerf.Input) async throws -> Operations.apiUserPerf.Output
    /// Get user activity
    ///
    /// Read data to generate the activity feed of a user.
    ///
    ///
    /// - Remark: HTTP `GET /api/user/{username}/activity`.
    /// - Remark: Generated from `#/paths//api/user/{username}/activity/get(apiUserActivity)`.
    func apiUserActivity(_ input: Operations.apiUserActivity.Input) async throws -> Operations.apiUserActivity.Output
    /// Get the daily puzzle
    ///
    /// Get the daily Lichess puzzle in JSON format.
    /// Alternatively, you can [post it in your slack workspace](https://lichess.org/daily-puzzle-slack).
    ///
    ///
    /// - Remark: HTTP `GET /api/puzzle/daily`.
    /// - Remark: Generated from `#/paths//api/puzzle/daily/get(apiPuzzleDaily)`.
    func apiPuzzleDaily(_ input: Operations.apiPuzzleDaily.Input) async throws -> Operations.apiPuzzleDaily.Output
    /// Get a puzzle by its ID
    ///
    /// Get a single Lichess puzzle in JSON format.
    ///
    /// - Remark: HTTP `GET /api/puzzle/{id}`.
    /// - Remark: Generated from `#/paths//api/puzzle/{id}/get(apiPuzzleId)`.
    func apiPuzzleId(_ input: Operations.apiPuzzleId.Input) async throws -> Operations.apiPuzzleId.Output
    /// Get a new puzzle
    ///
    /// Get a random Lichess puzzle in JSON format.
    ///
    /// If authenticated, only returns puzzles that the user has never seen before.
    ///
    /// **DO NOT** use this endpoint to enumerate puzzles for mass download. Instead, download the [full public puzzle database](https://database.lichess.org/#puzzles).
    ///
    ///
    /// - Remark: HTTP `GET /api/puzzle/next`.
    /// - Remark: Generated from `#/paths//api/puzzle/next/get(apiPuzzleNext)`.
    func apiPuzzleNext(_ input: Operations.apiPuzzleNext.Input) async throws -> Operations.apiPuzzleNext.Output
    /// Get your puzzle activity
    ///
    /// Download your puzzle activity in [ndjson](#section/Introduction/Streaming-with-ND-JSON) format.
    /// Puzzle activity is sorted by reverse chronological order (most recent first)
    /// We recommend streaming the response, for it can be very long.
    ///
    ///
    /// - Remark: HTTP `GET /api/puzzle/activity`.
    /// - Remark: Generated from `#/paths//api/puzzle/activity/get(apiPuzzleActivity)`.
    func apiPuzzleActivity(_ input: Operations.apiPuzzleActivity.Input) async throws -> Operations.apiPuzzleActivity.Output
    /// Get puzzles to replay
    ///
    /// Gets the puzzle IDs of remaining puzzles to re-attempt in JSON format.
    ///
    /// - Remark: HTTP `GET /api/puzzle/replay/{days}/{theme}`.
    /// - Remark: Generated from `#/paths//api/puzzle/replay/{days}/{theme}/get(apiPuzzleReplay)`.
    func apiPuzzleReplay(_ input: Operations.apiPuzzleReplay.Input) async throws -> Operations.apiPuzzleReplay.Output
    /// Get your puzzle dashboard
    ///
    /// Download your [puzzle dashboard](https://lichess.org/training/dashboard/30/dashboard) as JSON.
    /// Also includes all puzzle themes played, with aggregated results.
    /// Allows re-creating the [improvement/strengths](https://lichess.org/training/dashboard/30/improvementAreas) interfaces.
    ///
    ///
    /// - Remark: HTTP `GET /api/puzzle/dashboard/{days}`.
    /// - Remark: Generated from `#/paths//api/puzzle/dashboard/{days}/get(apiPuzzleDashboard)`.
    func apiPuzzleDashboard(_ input: Operations.apiPuzzleDashboard.Input) async throws -> Operations.apiPuzzleDashboard.Output
    /// Get the storm dashboard of a player
    ///
    /// Download the [storm dashboard](https://lichess.org/storm/dashboard/mrbasso) of any player as JSON.
    /// Contains the aggregated highscores, and the history of storm runs aggregated by days.
    /// Use `?days=0` if you only care about the highscores.
    ///
    ///
    /// - Remark: HTTP `GET /api/storm/dashboard/{username}`.
    /// - Remark: Generated from `#/paths//api/storm/dashboard/{username}/get(apiStormDashboard)`.
    func apiStormDashboard(_ input: Operations.apiStormDashboard.Input) async throws -> Operations.apiStormDashboard.Output
    /// Create and join a puzzle race
    ///
    /// Create a new private [puzzle race](https://lichess.org/racer).
    /// The Lichess user who creates the race must join the race page,
    /// and manually start the race when enough players have joined.
    /// - <https://lichess.org/racer>
    ///
    ///
    /// - Remark: HTTP `POST /api/racer`.
    /// - Remark: Generated from `#/paths//api/racer/post(racerPost)`.
    func racerPost(_ input: Operations.racerPost.Input) async throws -> Operations.racerPost.Output
    /// Get puzzle race results
    ///
    /// Get the results of a [puzzle race](https://lichess.org/racer).
    /// Returns information about players, puzzles, and the current status of the race.
    /// - <https://lichess.org/racer>
    ///
    /// Note that Lichess puzzle races are not persisted, and are only available
    /// for 30 minutes. After that delay, they are permanently deleted.
    ///
    ///
    /// - Remark: HTTP `GET /api/racer/{id}`.
    /// - Remark: Generated from `#/paths//api/racer/{id}/get(racerGet)`.
    func racerGet(_ input: Operations.racerGet.Input) async throws -> Operations.racerGet.Output
    /// Get users by ID
    ///
    /// Get up to 300 users by their IDs. Users are returned in the same order as the IDs.
    /// The method is `POST` to allow a longer list of IDs to be sent in the request body.
    /// Please do not try to download all the Lichess users with this endpoint, or any other endpoint.
    /// An API is not a way to fully export a website. We do not provide a full download of the Lichess users.
    /// This endpoint is limited to 8,000 users every 10 minutes, and 120,000 every day.
    ///
    ///
    /// - Remark: HTTP `POST /api/users`.
    /// - Remark: Generated from `#/paths//api/users/post(apiUsers)`.
    func apiUsers(_ input: Operations.apiUsers.Input) async throws -> Operations.apiUsers.Output
    /// Get my profile
    ///
    /// Public information about the logged in user.
    ///
    ///
    /// - Remark: HTTP `GET /api/account`.
    /// - Remark: Generated from `#/paths//api/account/get(accountMe)`.
    func accountMe(_ input: Operations.accountMe.Input) async throws -> Operations.accountMe.Output
    /// Get my email address
    ///
    /// Read the email address of the logged in user.
    ///
    ///
    /// - Remark: HTTP `GET /api/account/email`.
    /// - Remark: Generated from `#/paths//api/account/email/get(accountEmail)`.
    func accountEmail(_ input: Operations.accountEmail.Input) async throws -> Operations.accountEmail.Output
    /// Get my preferences
    ///
    /// Read the preferences of the logged in user.
    /// - <https://lichess.org/account/preferences/game-display>
    /// - <https://github.com/ornicar/lila/blob/master/modules/pref/src/main/Pref.scala>
    ///
    ///
    /// - Remark: HTTP `GET /api/account/preferences`.
    /// - Remark: Generated from `#/paths//api/account/preferences/get(account)`.
    func account(_ input: Operations.account.Input) async throws -> Operations.account.Output
    /// Get my kid mode status
    ///
    /// Read the kid mode status of the logged in user.
    /// - <https://lichess.org/account/kid>
    ///
    ///
    /// - Remark: HTTP `GET /api/account/kid`.
    /// - Remark: Generated from `#/paths//api/account/kid/get(accountKid)`.
    func accountKid(_ input: Operations.accountKid.Input) async throws -> Operations.accountKid.Output
    /// Set my kid mode status
    ///
    /// Set the kid mode status of the logged in user.
    /// - <https://lichess.org/account/kid>
    ///
    ///
    /// - Remark: HTTP `POST /api/account/kid`.
    /// - Remark: Generated from `#/paths//api/account/kid/post(accountKidPost)`.
    func accountKidPost(_ input: Operations.accountKidPost.Input) async throws -> Operations.accountKidPost.Output
    /// Get my timeline
    ///
    /// Get the timeline events of the logged in user.
    ///
    ///
    /// - Remark: HTTP `GET /api/timeline`.
    /// - Remark: Generated from `#/paths//api/timeline/get(timeline)`.
    func timeline(_ input: Operations.timeline.Input) async throws -> Operations.timeline.Output
    /// Export one game
    ///
    /// Download one game in either PGN or JSON format.
    /// Ongoing games are delayed by a few seconds ranging from 3 to 60 depending on the time control, as to prevent cheat bots from using this API.
    ///
    ///
    /// - Remark: HTTP `GET /game/export/{gameId}`.
    /// - Remark: Generated from `#/paths//game/export/{gameId}/get(gamePgn)`.
    func gamePgn(_ input: Operations.gamePgn.Input) async throws -> Operations.gamePgn.Output
    /// Export ongoing game of a user
    ///
    /// Download the ongoing game, or the last game played, of a user.
    /// Available in either PGN or JSON format.
    /// Ongoing games are delayed by a few seconds ranging from 3 to 60 depending on the time control, as to prevent cheat bots from using this API.
    ///
    ///
    /// - Remark: HTTP `GET /api/user/{username}/current-game`.
    /// - Remark: Generated from `#/paths//api/user/{username}/current-game/get(apiUserCurrentGame)`.
    func apiUserCurrentGame(_ input: Operations.apiUserCurrentGame.Input) async throws -> Operations.apiUserCurrentGame.Output
    /// Export games of a user
    ///
    /// Download all games of any user in PGN or [ndjson](#section/Introduction/Streaming-with-ND-JSON) format.
    /// Games are sorted by reverse chronological order (most recent first).
    /// We recommend streaming the response, for it can be very long.
    /// <https://lichess.org/@/german11> for instance has more than 500,000 games.
    /// The game stream is throttled, depending on who is making the request:
    ///   - Anonymous request: 20 games per second
    ///   - [OAuth2 authenticated](#section/Introduction/Authentication) request: 30 games per second
    ///   - Authenticated, downloading your own games: 60 games per second
    ///
    ///
    /// - Remark: HTTP `GET /api/games/user/{username}`.
    /// - Remark: Generated from `#/paths//api/games/user/{username}/get(apiGamesUser)`.
    func apiGamesUser(_ input: Operations.apiGamesUser.Input) async throws -> Operations.apiGamesUser.Output
    /// Export games by IDs
    ///
    /// Download games by IDs in PGN or [ndjson](#section/Introduction/Streaming-with-ND-JSON) format, depending on the request `Accept` header.
    /// Games are sorted by reverse chronological order (most recent first)
    /// The method is `POST` so a longer list of IDs can be sent in the request body.
    /// 300 IDs can be submitted.
    /// Ongoing games are delayed by a few seconds ranging from 3 to 60 depending on the time control, as to prevent cheat bots from using this API.
    ///
    ///
    /// - Remark: HTTP `POST /api/games/export/_ids`.
    /// - Remark: Generated from `#/paths//api/games/export/_ids/post(gamesExportIds)`.
    func gamesExportIds(_ input: Operations.gamesExportIds.Input) async throws -> Operations.gamesExportIds.Output
    /// Stream games of users
    ///
    /// Stream the games played between a list of users, in real time.
    /// Only games where **both players** are part of the list are included.
    /// The stream emits an event each time a game is started or finished.
    /// To also get all current ongoing games at the beginning of the stream, use the `withCurrentGames` flag.
    /// Games are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    /// Maximum number of users: 300.
    /// The method is `POST` so a longer list of IDs can be sent in the request body.
    ///
    ///
    /// - Remark: HTTP `POST /api/stream/games-by-users`.
    /// - Remark: Generated from `#/paths//api/stream/games-by-users/post(gamesByUsers)`.
    func gamesByUsers(_ input: Operations.gamesByUsers.Input) async throws -> Operations.gamesByUsers.Output
    /// Stream games by IDs
    ///
    /// Creates a stream of games from an arbitrary streamId, and a list of game IDs.
    /// The stream first outputs the games that already exists, then emits an event each time a game is started or finished.
    /// Games are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    /// Maximum number of games: 500 for anonymous requests, or 1000 for [OAuth2 authenticated](#section/Introduction/Authentication) requests.
    /// While the stream is open, it is possible to [add new game IDs to watch](#operation/gamesByIdsAdd).
    ///
    ///
    /// - Remark: HTTP `POST /api/stream/games/{streamId}`.
    /// - Remark: Generated from `#/paths//api/stream/games/{streamId}/post(gamesByIds)`.
    func gamesByIds(_ input: Operations.gamesByIds.Input) async throws -> Operations.gamesByIds.Output
    /// Add game IDs to stream
    ///
    /// Add new game IDs for [an existing stream](#operation/gamesByIds) to watch.
    /// The stream will immediately outputs the games that already exists, then emit an event each time a game is started or finished.
    ///
    ///
    /// - Remark: HTTP `POST /api/stream/games/{streamId}/add`.
    /// - Remark: Generated from `#/paths//api/stream/games/{streamId}/add/post(gamesByIdsAdd)`.
    func gamesByIdsAdd(_ input: Operations.gamesByIdsAdd.Input) async throws -> Operations.gamesByIdsAdd.Output
    /// Get my ongoing games
    ///
    /// Get the ongoing games of the current user.
    /// Real-time and correspondence games are included.
    /// The most urgent games are listed first.
    ///
    ///
    /// - Remark: HTTP `GET /api/account/playing`.
    /// - Remark: Generated from `#/paths//api/account/playing/get(apiAccountPlaying)`.
    func apiAccountPlaying(_ input: Operations.apiAccountPlaying.Input) async throws -> Operations.apiAccountPlaying.Output
    /// Stream moves of a game
    ///
    /// Stream positions and moves of any ongoing game, in [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    /// A description of the game is sent as a first message.
    /// Then a message is sent each time a move is played.
    /// Finally, a description of the game is sent when it finishes, and the stream is closed.
    /// Ongoing games are delayed by a few seconds ranging from 3 to 60 depending on the time control, as to prevent cheat bots from using this API.
    /// No more than 8 game streams can be opened at the same time from the same IP address.
    ///
    ///
    /// - Remark: HTTP `GET /api/stream/game/{id}`.
    /// - Remark: Generated from `#/paths//api/stream/game/{id}/get(streamGame)`.
    func streamGame(_ input: Operations.streamGame.Input) async throws -> Operations.streamGame.Output
    /// Import one game
    ///
    /// Import a game from PGN. See <https://lichess.org/paste>.
    /// Rate limiting: 200 games per hour for OAuth requests, 100 games per hour for anonymous requests.
    /// To broadcast ongoing games, consider [pushing to a broadcast instead](#operation/broadcastPush).
    /// To analyse a position or a line, just construct an analysis board URL (most standard tags supported if URL-encoded):
    /// [https://lichess.org/analysis/pgn/e4_e5_Nf3_Nc6_Bc4_Bc5_Bxf7+](https://lichess.org/analysis/pgn/e4_e5_Nf3_Nc6_Bc4_Bc5_Bxf7+)
    ///
    ///
    /// - Remark: HTTP `POST /api/import`.
    /// - Remark: Generated from `#/paths//api/import/post(gameImport)`.
    func gameImport(_ input: Operations.gameImport.Input) async throws -> Operations.gameImport.Output
    /// Export your imported games
    ///
    /// Download all games imported by you. Games are exported in PGN format.
    ///
    /// - Remark: HTTP `GET /api/games/export/imports`.
    /// - Remark: Generated from `#/paths//api/games/export/imports/get(apiImportedGamesUser)`.
    func apiImportedGamesUser(_ input: Operations.apiImportedGamesUser.Input) async throws -> Operations.apiImportedGamesUser.Output
    /// Export your bookmarked games
    ///
    /// Download all games bookmarked by you, in PGN or [ndjson](#section/Introduction/Streaming-with-ND-JSON) format.
    /// Games are sorted by reverse chronological order (most recent first).
    /// We recommend streaming the response, for it can be very long.
    ///
    ///
    /// - Remark: HTTP `GET /api/games/export/bookmarks`.
    /// - Remark: Generated from `#/paths//api/games/export/bookmarks/get(apiExportBookmarks)`.
    func apiExportBookmarks(_ input: Operations.apiExportBookmarks.Input) async throws -> Operations.apiExportBookmarks.Output
    /// Get current TV games
    ///
    /// Get basic info about the best games being played for each speed and variant,
    /// but also computer games and bot games.
    /// See [lichess.org/tv](https://lichess.org/tv).
    ///
    ///
    /// - Remark: HTTP `GET /api/tv/channels`.
    /// - Remark: Generated from `#/paths//api/tv/channels/get(tvChannels)`.
    func tvChannels(_ input: Operations.tvChannels.Input) async throws -> Operations.tvChannels.Output
    /// Stream current TV game
    ///
    /// Stream positions and moves of the current [TV game](https://lichess.org/tv) in [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    /// Try it with `curl https://lichess.org/api/tv/feed`.
    ///
    ///
    /// - Remark: HTTP `GET /api/tv/feed`.
    /// - Remark: Generated from `#/paths//api/tv/feed/get(tvFeed)`.
    func tvFeed(_ input: Operations.tvFeed.Input) async throws -> Operations.tvFeed.Output
    /// Stream current TV game of a TV channel
    ///
    /// Stream positions and moves of a current [TV channel's game](https://lichess.org/tv/rapid) in [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    /// Try it with `curl https://lichess.org/api/tv/rapid/feed`.
    ///
    ///
    /// - Remark: HTTP `GET /api/tv/{channel}/feed`.
    /// - Remark: Generated from `#/paths//api/tv/{channel}/feed/get(tvChannelFeed)`.
    func tvChannelFeed(_ input: Operations.tvChannelFeed.Input) async throws -> Operations.tvChannelFeed.Output
    /// Get best ongoing games of a TV channel
    ///
    /// Get a list of ongoing games for a given TV channel. Similar to [lichess.org/games](https://lichess.org/games).
    /// Available in PGN or [ndjson](#section/Introduction/Streaming-with-ND-JSON) format, depending on the request `Accept` header.
    ///
    ///
    /// - Remark: HTTP `GET /api/tv/{channel}`.
    /// - Remark: Generated from `#/paths//api/tv/{channel}/get(tvChannelGames)`.
    func tvChannelGames(_ input: Operations.tvChannelGames.Input) async throws -> Operations.tvChannelGames.Output
    /// Get current tournaments
    ///
    /// Get recently active and finished tournaments.
    /// This API is used to display the [Lichess tournament schedule](https://lichess.org/tournament).
    ///
    ///
    /// - Remark: HTTP `GET /api/tournament`.
    /// - Remark: Generated from `#/paths//api/tournament/get(apiTournament)`.
    func apiTournament(_ input: Operations.apiTournament.Input) async throws -> Operations.apiTournament.Output
    /// Create a new Arena tournament
    ///
    /// Create a public or private Arena tournament.
    /// This endpoint mirrors the form on <https://lichess.org/tournament/new>.
    /// You can create up to 12 public tournaments per day, or 24 private tournaments.
    /// A team battle can be created by specifying the `teamBattleByTeam` argument.
    /// Additional restrictions:
    ///   - clockTime + clockIncrement > 0
    ///   - 15s and 0+1 variant tournaments cannot be rated
    ///   - Clock time in comparison to tournament length must be reasonable: 3 <= (minutes * 60) / (96 * clockTime + 48 * clockIncrement + 15) <= 150
    ///
    ///
    /// - Remark: HTTP `POST /api/tournament`.
    /// - Remark: Generated from `#/paths//api/tournament/post(apiTournamentPost)`.
    func apiTournamentPost(_ input: Operations.apiTournamentPost.Input) async throws -> Operations.apiTournamentPost.Output
    /// Get info about an Arena tournament
    ///
    /// Get detailed info about recently finished, current, or upcoming tournament's duels, player standings, and other info.
    ///
    ///
    /// - Remark: HTTP `GET /api/tournament/{id}`.
    /// - Remark: Generated from `#/paths//api/tournament/{id}/get(tournament)`.
    func tournament(_ input: Operations.tournament.Input) async throws -> Operations.tournament.Output
    /// Update an Arena tournament
    ///
    /// Update an Arena tournament.
    /// Be mindful not to make important changes to ongoing tournaments.
    /// Can be used to update a team battle.
    /// Additional restrictions:
    ///   - clockTime + clockIncrement > 0
    ///   - 15s and 0+1 variant tournaments cannot be rated
    ///   - Clock time in comparison to tournament length must be reasonable: 3 <= (minutes * 60) / (96 * clockTime + 48 * clockIncrement + 15) <= 150
    ///
    ///
    /// - Remark: HTTP `POST /api/tournament/{id}`.
    /// - Remark: Generated from `#/paths//api/tournament/{id}/post(apiTournamentUpdate)`.
    func apiTournamentUpdate(_ input: Operations.apiTournamentUpdate.Input) async throws -> Operations.apiTournamentUpdate.Output
    /// Join an Arena tournament
    ///
    /// Join an Arena tournament, possibly with a password and/or a team.
    /// Also unpauses if you had previously [paused](#operation/apiTournamentWithdraw) the tournament.
    ///
    ///
    /// - Remark: HTTP `POST /api/tournament/{id}/join`.
    /// - Remark: Generated from `#/paths//api/tournament/{id}/join/post(apiTournamentJoin)`.
    func apiTournamentJoin(_ input: Operations.apiTournamentJoin.Input) async throws -> Operations.apiTournamentJoin.Output
    /// Pause or leave an Arena tournament
    ///
    /// Leave a future Arena tournament, or take a break on an ongoing Arena tournament.
    /// It's possible to join again later. Points and streaks are preserved.
    ///
    ///
    /// - Remark: HTTP `POST /api/tournament/{id}/withdraw`.
    /// - Remark: Generated from `#/paths//api/tournament/{id}/withdraw/post(apiTournamentWithdraw)`.
    func apiTournamentWithdraw(_ input: Operations.apiTournamentWithdraw.Input) async throws -> Operations.apiTournamentWithdraw.Output
    /// Terminate an Arena tournament
    ///
    /// Terminate an Arena tournament
    ///
    ///
    /// - Remark: HTTP `POST /api/tournament/{id}/terminate`.
    /// - Remark: Generated from `#/paths//api/tournament/{id}/terminate/post(apiTournamentTerminate)`.
    func apiTournamentTerminate(_ input: Operations.apiTournamentTerminate.Input) async throws -> Operations.apiTournamentTerminate.Output
    /// Update a team battle
    ///
    /// Set the teams and number of leaders of a team battle.
    /// To update the other attributes of a team battle, use the [tournament update endpoint](#operation/apiTournamentUpdate).
    ///
    ///
    /// - Remark: HTTP `POST /api/tournament/team-battle/{id}`.
    /// - Remark: Generated from `#/paths//api/tournament/team-battle/{id}/post(apiTournamentTeamBattlePost)`.
    func apiTournamentTeamBattlePost(_ input: Operations.apiTournamentTeamBattlePost.Input) async throws -> Operations.apiTournamentTeamBattlePost.Output
    /// Export games of an Arena tournament
    ///
    /// Download games of a tournament in PGN or [ndjson](#section/Introduction/Streaming-with-ND-JSON) format.
    /// Games are sorted by reverse chronological order (most recent first).
    /// The game stream is throttled, depending on who is making the request:
    ///   - Anonymous request: 20 games per second
    ///   - [OAuth2 authenticated](#section/Introduction/Authentication) request: 30 games per second
    ///
    ///
    /// - Remark: HTTP `GET /api/tournament/{id}/games`.
    /// - Remark: Generated from `#/paths//api/tournament/{id}/games/get(gamesByTournament)`.
    func gamesByTournament(_ input: Operations.gamesByTournament.Input) async throws -> Operations.gamesByTournament.Output
    /// Get results of an Arena tournament
    ///
    /// Players of an Arena tournament, with their score and performance, sorted by rank (best first).
    /// **Players are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON)**, i.e. one JSON object per line.
    /// If called on an ongoing tournament, results can be inconsistent
    /// due to ranking changes while the players are being streamed.
    /// Use on finished tournaments for guaranteed consistency.
    ///
    ///
    /// - Remark: HTTP `GET /api/tournament/{id}/results`.
    /// - Remark: Generated from `#/paths//api/tournament/{id}/results/get(resultsByTournament)`.
    func resultsByTournament(_ input: Operations.resultsByTournament.Input) async throws -> Operations.resultsByTournament.Output
    /// Get team standing of a team battle
    ///
    /// Teams of a team battle tournament, with top players, sorted by rank (best first).
    ///
    ///
    /// - Remark: HTTP `GET /api/tournament/{id}/teams`.
    /// - Remark: Generated from `#/paths//api/tournament/{id}/teams/get(teamsByTournament)`.
    func teamsByTournament(_ input: Operations.teamsByTournament.Input) async throws -> Operations.teamsByTournament.Output
    /// Get tournaments created by a user
    ///
    /// Get all tournaments created by a given user.
    /// Tournaments are sorted by reverse chronological order of start date (last starting first).
    /// Tournaments are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    /// The stream is throttled, depending on who is making the request:
    ///   - Anonymous request: 20 tournaments per second
    ///   - [OAuth2 authenticated](#section/Introduction/Authentication) request: 30 tournaments per second
    ///   - Authenticated, downloading your own tournaments: 50 tournaments per second
    ///
    ///
    /// - Remark: HTTP `GET /api/user/{username}/tournament/created`.
    /// - Remark: Generated from `#/paths//api/user/{username}/tournament/created/get(apiUserNameTournamentCreated)`.
    func apiUserNameTournamentCreated(_ input: Operations.apiUserNameTournamentCreated.Input) async throws -> Operations.apiUserNameTournamentCreated.Output
    /// Get tournaments played by a user
    ///
    /// Get all tournaments played by a given user.
    /// Tournaments are sorted by reverse chronological order of start date (last played first).
    /// Tournaments are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    /// The stream is throttled, depending on who is making the request:
    ///   - Anonymous request: 20 tournaments per second
    ///   - [OAuth2 authenticated](#section/Introduction/Authentication) request: 30 tournaments per second
    ///   - Authenticated, downloading your own tournaments: 50 tournaments per second
    ///
    ///
    /// - Remark: HTTP `GET /api/user/{username}/tournament/played`.
    /// - Remark: Generated from `#/paths//api/user/{username}/tournament/played/get(apiUserNameTournamentPlayed)`.
    func apiUserNameTournamentPlayed(_ input: Operations.apiUserNameTournamentPlayed.Input) async throws -> Operations.apiUserNameTournamentPlayed.Output
    /// Create a new Swiss tournament
    ///
    /// Create a Swiss tournament for your team.
    /// This endpoint mirrors the Swiss tournament form from your team pagee.
    /// You can create up to 12 tournaments per day.
    /// Additional restrictions:
    ///   - clock.limit + clock.increment > 0
    ///   - 15s and 0+1 variant tournaments cannot be rated
    ///
    ///
    /// - Remark: HTTP `POST /api/swiss/new/{teamId}`.
    /// - Remark: Generated from `#/paths//api/swiss/new/{teamId}/post(apiSwissNew)`.
    func apiSwissNew(_ input: Operations.apiSwissNew.Input) async throws -> Operations.apiSwissNew.Output
    /// Get info about a Swiss tournament
    ///
    /// Get detailed info about a Swiss tournament.
    ///
    ///
    /// - Remark: HTTP `GET /api/swiss/{id}`.
    /// - Remark: Generated from `#/paths//api/swiss/{id}/get(swiss)`.
    func swiss(_ input: Operations.swiss.Input) async throws -> Operations.swiss.Output
    /// Update a Swiss tournament
    ///
    /// Update a Swiss tournament.
    /// Be mindful not to make important changes to ongoing tournaments.
    /// Additional restrictions:
    ///   - clock.limit + clock.increment > 0
    ///   - 15s and 0+1 variant tournaments cannot be rated
    ///
    ///
    /// - Remark: HTTP `POST /api/swiss/{id}/edit`.
    /// - Remark: Generated from `#/paths//api/swiss/{id}/edit/post(apiSwissUpdate)`.
    func apiSwissUpdate(_ input: Operations.apiSwissUpdate.Input) async throws -> Operations.apiSwissUpdate.Output
    /// Manually schedule the next round
    ///
    /// Manually schedule the next round date and time of a Swiss tournament.
    /// This sets the `roundInterval` field to `99999999`, i.e. manual scheduling.
    /// All further rounds will need to be manually scheduled, unless the `roundInterval` field is changed back to automatic scheduling.
    ///
    ///
    /// - Remark: HTTP `POST /api/swiss/{id}/schedule-next-round`.
    /// - Remark: Generated from `#/paths//api/swiss/{id}/schedule-next-round/post(apiSwissScheduleNextRound)`.
    func apiSwissScheduleNextRound(_ input: Operations.apiSwissScheduleNextRound.Input) async throws -> Operations.apiSwissScheduleNextRound.Output
    /// Join a Swiss tournament
    ///
    /// Join a Swiss tournament, possibly with a password.
    ///
    ///
    /// - Remark: HTTP `POST /api/swiss/{id}/join`.
    /// - Remark: Generated from `#/paths//api/swiss/{id}/join/post(apiSwissJoin)`.
    func apiSwissJoin(_ input: Operations.apiSwissJoin.Input) async throws -> Operations.apiSwissJoin.Output
    /// Pause or leave a swiss tournament
    ///
    /// Leave a future Swiss tournament, or take a break on an ongoing Swiss tournament.
    /// It's possible to join again later. Points are preserved.
    ///
    ///
    /// - Remark: HTTP `POST /api/swiss/{id}/withdraw`.
    /// - Remark: Generated from `#/paths//api/swiss/{id}/withdraw/post(apiSwissWithdraw)`.
    func apiSwissWithdraw(_ input: Operations.apiSwissWithdraw.Input) async throws -> Operations.apiSwissWithdraw.Output
    /// Terminate a Swiss tournament
    ///
    /// Terminate a Swiss tournament
    ///
    ///
    /// - Remark: HTTP `POST /api/swiss/{id}/terminate`.
    /// - Remark: Generated from `#/paths//api/swiss/{id}/terminate/post(apiSwissTerminate)`.
    func apiSwissTerminate(_ input: Operations.apiSwissTerminate.Input) async throws -> Operations.apiSwissTerminate.Output
    /// Export TRF of a Swiss tournament
    ///
    /// Download a tournament in the Tournament Report File format, the FIDE standard.
    /// Documentation: <https://www.fide.com/FIDE/handbook/C04Annex2_TRF16.pdf>
    /// Example: <https://lichess.org/swiss/j8rtJ5GL.trf>
    ///
    ///
    /// - Remark: HTTP `GET /swiss/{id}.trf`.
    /// - Remark: Generated from `#/paths//swiss/{id}.trf/get(swissTrf)`.
    func swissTrf(_ input: Operations.swissTrf.Input) async throws -> Operations.swissTrf.Output
    /// Export games of a Swiss tournament
    ///
    /// Download games of a swiss tournament in PGN or [ndjson](#section/Introduction/Streaming-with-ND-JSON) format.
    /// Games are sorted by chronological order.
    /// The game stream is throttled, depending on who is making the request:
    ///   - Anonymous request: 20 games per second
    ///   - [OAuth2 authenticated](#section/Introduction/Authentication) request: 30 games per second
    ///
    ///
    /// - Remark: HTTP `GET /api/swiss/{id}/games`.
    /// - Remark: Generated from `#/paths//api/swiss/{id}/games/get(gamesBySwiss)`.
    func gamesBySwiss(_ input: Operations.gamesBySwiss.Input) async throws -> Operations.gamesBySwiss.Output
    /// Get results of a swiss tournament
    ///
    /// Players of a swiss tournament, with their score and performance, sorted by rank (best first).
    /// Players are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    /// If called on an ongoing tournament, results can be inconsistent
    /// due to ranking changes while the players are being streamed.
    /// Use on finished tournaments for guaranteed consistency.
    ///
    ///
    /// - Remark: HTTP `GET /api/swiss/{id}/results`.
    /// - Remark: Generated from `#/paths//api/swiss/{id}/results/get(resultsBySwiss)`.
    func resultsBySwiss(_ input: Operations.resultsBySwiss.Input) async throws -> Operations.resultsBySwiss.Output
    /// Get team swiss tournaments
    ///
    /// Get all swiss tournaments of a team.
    /// Tournaments are sorted by reverse chronological order of start date (last starting first).
    /// Tournaments are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    ///
    ///
    /// - Remark: HTTP `GET /api/team/{teamId}/swiss`.
    /// - Remark: Generated from `#/paths//api/team/{teamId}/swiss/get(apiTeamSwiss)`.
    func apiTeamSwiss(_ input: Operations.apiTeamSwiss.Input) async throws -> Operations.apiTeamSwiss.Output
    /// Export one study chapter
    ///
    /// Download one study chapter in PGN format.
    ///
    ///
    /// - Remark: HTTP `GET /api/study/{studyId}/{chapterId}.pgn`.
    /// - Remark: Generated from `#/paths//api/study/{studyId}/{chapterId}.pgn/get(studyChapterPgn)`.
    func studyChapterPgn(_ input: Operations.studyChapterPgn.Input) async throws -> Operations.studyChapterPgn.Output
    /// Export all chapters
    ///
    /// Download all chapters of a study in PGN format.
    ///
    ///
    /// - Remark: HTTP `GET /api/study/{studyId}.pgn`.
    /// - Remark: Generated from `#/paths//api/study/{studyId}.pgn/get(studyAllChaptersPgn)`.
    func studyAllChaptersPgn(_ input: Operations.studyAllChaptersPgn.Input) async throws -> Operations.studyAllChaptersPgn.Output
    /// Study metadata
    ///
    /// Only get the study headers, including `Last-Modified`.
    ///
    ///
    /// - Remark: HTTP `HEAD /api/study/{studyId}.pgn`.
    /// - Remark: Generated from `#/paths//api/study/{studyId}.pgn/head(studyAllChaptersHead)`.
    func studyAllChaptersHead(_ input: Operations.studyAllChaptersHead.Input) async throws -> Operations.studyAllChaptersHead.Output
    /// Import PGN into a study
    ///
    /// Imports arbitrary PGN into an existing [study](https://lichess.org/study). Creates a new chapter in the study.
    /// If the PGN contains multiple games (separated by 2 or more newlines)
    /// then multiple chapters will be created within the study.
    /// Note that a study can contain at most 64 chapters.
    ///
    ///
    /// - Remark: HTTP `POST /api/study/{studyId}/import-pgn`.
    /// - Remark: Generated from `#/paths//api/study/{studyId}/import-pgn/post(apiStudyImportPGN)`.
    func apiStudyImportPGN(_ input: Operations.apiStudyImportPGN.Input) async throws -> Operations.apiStudyImportPGN.Output
    /// Export all studies of a user
    ///
    /// Download all chapters of all studies of a user in PGN format.
    /// If authenticated, then all public, unlisted, and private studies are included.
    /// If not, only public (non-unlisted) studies are included.
    ///
    ///
    /// - Remark: HTTP `GET /study/by/{username}/export.pgn`.
    /// - Remark: Generated from `#/paths//study/by/{username}/export.pgn/get(studyExportAllPgn)`.
    func studyExportAllPgn(_ input: Operations.studyExportAllPgn.Input) async throws -> Operations.studyExportAllPgn.Output
    /// List studies of a user
    ///
    /// Get metadata (name and dates) of all studies of a user.
    /// If authenticated, then all public, unlisted, and private studies are included.
    /// If not, only public (non-unlisted) studies are included.
    /// Studies are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    ///
    ///
    /// - Remark: HTTP `GET /api/study/by/{username}`.
    /// - Remark: Generated from `#/paths//api/study/by/{username}/get(studyListMetadata)`.
    func studyListMetadata(_ input: Operations.studyListMetadata.Input) async throws -> Operations.studyListMetadata.Output
    /// Delete a study chapter
    ///
    /// Delete a chapter of a study you own. This is definitive.
    /// A study must have at least one chapter; so if you delete the last chapter,
    /// an empty one will be automatically created to replace it.
    ///
    ///
    /// - Remark: HTTP `DELETE /api/study/{studyId}/{chapterId}`.
    /// - Remark: Generated from `#/paths//api/study/{studyId}/{chapterId}/delete(apiStudyStudyIdChapterIdDelete)`.
    func apiStudyStudyIdChapterIdDelete(_ input: Operations.apiStudyStudyIdChapterIdDelete.Input) async throws -> Operations.apiStudyStudyIdChapterIdDelete.Output
    /// Get official broadcasts
    ///
    /// Returns ongoing official broadcasts sorted by tier. 
    /// After that, returns finished broadcasts sorted by most recent sync time.
    /// Broadcasts are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    ///
    ///
    /// - Remark: HTTP `GET /api/broadcast`.
    /// - Remark: Generated from `#/paths//api/broadcast/get(broadcastsOfficial)`.
    func broadcastsOfficial(_ input: Operations.broadcastsOfficial.Input) async throws -> Operations.broadcastsOfficial.Output
    /// Get paginated top broadcast previews
    ///
    /// The same data, in the same order, as can be seen on [https://lichess.org/broadcast](/broadcast).
    ///
    ///
    /// - Remark: HTTP `GET /api/broadcast/top`.
    /// - Remark: Generated from `#/paths//api/broadcast/top/get(broadcastsTop)`.
    func broadcastsTop(_ input: Operations.broadcastsTop.Input) async throws -> Operations.broadcastsTop.Output
    /// Get broadcasts created by a user
    ///
    /// Get all incoming, ongoing, and finished official broadcasts.
    /// The broadcasts are sorted by created date, most recent first.
    ///
    ///
    /// - Remark: HTTP `GET /api/broadcast/by/{username}`.
    /// - Remark: Generated from `#/paths//api/broadcast/by/{username}/get(broadcastsByUser)`.
    func broadcastsByUser(_ input: Operations.broadcastsByUser.Input) async throws -> Operations.broadcastsByUser.Output
    /// Search broadcasts
    ///
    /// Search across recent official broadcasts.
    ///
    ///
    /// - Remark: HTTP `GET /api/broadcast/search`.
    /// - Remark: Generated from `#/paths//api/broadcast/search/get(broadcastsSearch)`.
    func broadcastsSearch(_ input: Operations.broadcastsSearch.Input) async throws -> Operations.broadcastsSearch.Output
    /// Create a broadcast tournament
    ///
    /// Create a new broadcast tournament to relay external games.
    /// This endpoint accepts the same form data as the [web form](https://lichess.org/broadcast/new).
    ///
    ///
    /// - Remark: HTTP `POST /broadcast/new`.
    /// - Remark: Generated from `#/paths//broadcast/new/post(broadcastTourCreate)`.
    func broadcastTourCreate(_ input: Operations.broadcastTourCreate.Input) async throws -> Operations.broadcastTourCreate.Output
    /// Get a broadcast tournament
    ///
    /// Get information about a broadcast tournament.
    ///
    ///
    /// - Remark: HTTP `GET /api/broadcast/{broadcastTournamentId}`.
    /// - Remark: Generated from `#/paths//api/broadcast/{broadcastTournamentId}/get(broadcastTourGet)`.
    func broadcastTourGet(_ input: Operations.broadcastTourGet.Input) async throws -> Operations.broadcastTourGet.Output
    /// Get players of a broadcast
    ///
    /// Get the list of players of a broadcast tournament, if available.
    ///
    ///
    /// - Remark: HTTP `GET /broadcast/{broadcastTournamentId}/players`.
    /// - Remark: Generated from `#/paths//broadcast/{broadcastTournamentId}/players/get(broadcastPlayersGet)`.
    func broadcastPlayersGet(_ input: Operations.broadcastPlayersGet.Input) async throws -> Operations.broadcastPlayersGet.Output
    /// Update your broadcast tournament
    ///
    /// Update information about a broadcast tournament that you created.
    /// This endpoint accepts the same form data as the web form.
    /// All fields must be populated with data. Missing fields will override the broadcast with empty data.
    ///
    ///
    /// - Remark: HTTP `POST /broadcast/{broadcastTournamentId}/edit`.
    /// - Remark: Generated from `#/paths//broadcast/{broadcastTournamentId}/edit/post(broadcastTourUpdate)`.
    func broadcastTourUpdate(_ input: Operations.broadcastTourUpdate.Input) async throws -> Operations.broadcastTourUpdate.Output
    /// Create a broadcast round
    ///
    /// Create a new broadcast round to relay external games.
    /// This endpoint accepts the same form data as the web form.
    ///
    /// Choose one between `syncUrl`, `syncUrls`, `syncIds` and `syncUsers`, if it is missing, the broadcast needs to be fed by [pushing PGN to it](#operation/broadcastPush)
    ///
    ///
    /// - Remark: HTTP `POST /broadcast/{broadcastTournamentId}/new`.
    /// - Remark: Generated from `#/paths//broadcast/{broadcastTournamentId}/new/post(broadcastRoundCreate)`.
    func broadcastRoundCreate(_ input: Operations.broadcastRoundCreate.Input) async throws -> Operations.broadcastRoundCreate.Output
    /// Get a broadcast round
    ///
    /// Get information about a broadcast round.
    ///
    ///
    /// - Remark: HTTP `GET /api/broadcast/{broadcastTournamentSlug}/{broadcastRoundSlug}/{broadcastRoundId}`.
    /// - Remark: Generated from `#/paths//api/broadcast/{broadcastTournamentSlug}/{broadcastRoundSlug}/{broadcastRoundId}/get(broadcastRoundGet)`.
    func broadcastRoundGet(_ input: Operations.broadcastRoundGet.Input) async throws -> Operations.broadcastRoundGet.Output
    /// Update a broadcast round
    ///
    /// Update information about a broadcast round.
    /// This endpoint accepts the same form data as the web form.
    /// All fields must be populated with data. Missing fields will override the broadcast with empty data.
    /// For instance, if you omit `startDate`, then any pre-existing start date will be removed.
    ///
    ///
    /// - Remark: HTTP `POST /broadcast/round/{broadcastRoundId}/edit`.
    /// - Remark: Generated from `#/paths//broadcast/round/{broadcastRoundId}/edit/post(broadcastRoundUpdate)`.
    func broadcastRoundUpdate(_ input: Operations.broadcastRoundUpdate.Input) async throws -> Operations.broadcastRoundUpdate.Output
    /// Reset a broadcast round
    ///
    /// Remove any games from the broadcast round and reset it to its initial state.
    ///
    ///
    /// - Remark: HTTP `POST /api/broadcast/round/{broadcastRoundId}/reset`.
    /// - Remark: Generated from `#/paths//api/broadcast/round/{broadcastRoundId}/reset/post(broadcastRoundReset)`.
    func broadcastRoundReset(_ input: Operations.broadcastRoundReset.Input) async throws -> Operations.broadcastRoundReset.Output
    /// Push PGN to a broadcast round
    ///
    /// Update a broadcast with new PGN.
    /// Only for broadcasts without a source URL.
    ///
    ///
    /// - Remark: HTTP `POST /api/broadcast/round/{broadcastRoundId}/push`.
    /// - Remark: Generated from `#/paths//api/broadcast/round/{broadcastRoundId}/push/post(broadcastPush)`.
    func broadcastPush(_ input: Operations.broadcastPush.Input) async throws -> Operations.broadcastPush.Output
    /// Stream an ongoing broadcast round as PGN
    ///
    /// This streaming endpoint first sends all games of a broadcast round in PGN format.
    /// Then, it waits for new moves to be played. As soon as it happens, the entire PGN of the game is sent to the stream.
    /// The stream will also send PGNs when games are added to the round.
    /// This is the best way to get updates about an ongoing round. Streaming means no polling,
    /// and no pollings means no latency, and minimum impact on the server.
    ///
    ///
    /// - Remark: HTTP `GET /api/stream/broadcast/round/{broadcastRoundId}.pgn`.
    /// - Remark: Generated from `#/paths//api/stream/broadcast/round/{broadcastRoundId}.pgn/get(broadcastStreamRoundPgn)`.
    func broadcastStreamRoundPgn(_ input: Operations.broadcastStreamRoundPgn.Input) async throws -> Operations.broadcastStreamRoundPgn.Output
    /// Export one round as PGN
    ///
    /// Download all games of a single round of a broadcast tournament in PGN format.
    /// You *could* poll this endpoint to get updates about a tournament, but it would be slow,
    /// and very inefficient.
    /// Instead, consider [streaming the tournament](#operation/broadcastStreamRoundPgn) to get
    /// a new PGN every time a game is updated, in real-time.
    ///
    ///
    /// - Remark: HTTP `GET /api/broadcast/round/{broadcastRoundId}.pgn`.
    /// - Remark: Generated from `#/paths//api/broadcast/round/{broadcastRoundId}.pgn/get(broadcastRoundPgn)`.
    func broadcastRoundPgn(_ input: Operations.broadcastRoundPgn.Input) async throws -> Operations.broadcastRoundPgn.Output
    /// Export all rounds as PGN
    ///
    /// Download all games of all rounds of a broadcast in PGN format.
    /// If a `study:read` [OAuth token](#tag/OAuth) is provided,
    /// the private rounds where the user is a contributor will be available.
    /// You may want to [download only the games of a single round](#operation/broadcastRoundPgn) instead.
    ///
    ///
    /// - Remark: HTTP `GET /api/broadcast/{broadcastTournamentId}.pgn`.
    /// - Remark: Generated from `#/paths//api/broadcast/{broadcastTournamentId}.pgn/get(broadcastAllRoundsPgn)`.
    func broadcastAllRoundsPgn(_ input: Operations.broadcastAllRoundsPgn.Input) async throws -> Operations.broadcastAllRoundsPgn.Output
    /// Get your broadcast rounds
    ///
    /// Stream all broadcast rounds you are a member of.
    /// Also includes broadcasts rounds you did not create, but were invited to.
    /// Also includes broadcasts rounds where you're a non-writing member. See the `writeable` flag in the response.
    /// Rounds are ordered by rank, which is roughly chronological, most recent first, slightly pondered with popularity.
    ///
    ///
    /// - Remark: HTTP `GET /api/broadcast/my-rounds`.
    /// - Remark: Generated from `#/paths//api/broadcast/my-rounds/get(broadcastMyRoundsGet)`.
    func broadcastMyRoundsGet(_ input: Operations.broadcastMyRoundsGet.Input) async throws -> Operations.broadcastMyRoundsGet.Output
    /// Get a FIDE player
    ///
    /// Get information about a FIDE player.
    ///
    ///
    /// - Remark: HTTP `GET /api/fide/player/{playerId}`.
    /// - Remark: Generated from `#/paths//api/fide/player/{playerId}/get(fidePlayerGet)`.
    func fidePlayerGet(_ input: Operations.fidePlayerGet.Input) async throws -> Operations.fidePlayerGet.Output
    /// Search FIDE players
    ///
    /// List of FIDE players search results for a query.
    ///
    ///
    /// - Remark: HTTP `GET /api/fide/player`.
    /// - Remark: Generated from `#/paths//api/fide/player/get(fidePlayerSearch)`.
    func fidePlayerSearch(_ input: Operations.fidePlayerSearch.Input) async throws -> Operations.fidePlayerSearch.Output
    /// Get current simuls
    ///
    /// Get recently created, started, finished, simuls.
    /// Created and finished simul lists are not exhaustives, only those with
    /// strong enough host will be listed, the same filter is used to display simuls on https://lichess.org/simul.
    /// When [authenticated with OAuth2](#section/Introduction/Authentication), the pending list will be populated with your created, but unstarted simuls.
    ///
    ///
    /// - Remark: HTTP `GET /api/simul`.
    /// - Remark: Generated from `#/paths//api/simul/get(apiSimul)`.
    func apiSimul(_ input: Operations.apiSimul.Input) async throws -> Operations.apiSimul.Output
    /// Get a single team
    ///
    /// Public info about a team. Includes the list of publicly visible leaders.
    ///
    /// - Remark: HTTP `GET /api/team/{teamId}`.
    /// - Remark: Generated from `#/paths//api/team/{teamId}/get(teamShow)`.
    func teamShow(_ input: Operations.teamShow.Input) async throws -> Operations.teamShow.Output
    /// Get popular teams
    ///
    /// Paginator of the most popular teams.
    ///
    ///
    /// - Remark: HTTP `GET /api/team/all`.
    /// - Remark: Generated from `#/paths//api/team/all/get(teamAll)`.
    func teamAll(_ input: Operations.teamAll.Input) async throws -> Operations.teamAll.Output
    /// Teams of a player
    ///
    /// All the teams a player is a member of.
    ///
    ///
    /// - Remark: HTTP `GET /api/team/of/{username}`.
    /// - Remark: Generated from `#/paths//api/team/of/{username}/get(teamOfUsername)`.
    func teamOfUsername(_ input: Operations.teamOfUsername.Input) async throws -> Operations.teamOfUsername.Output
    /// Search teams
    ///
    /// Paginator of team search results for a keyword.
    ///
    ///
    /// - Remark: HTTP `GET /api/team/search`.
    /// - Remark: Generated from `#/paths//api/team/search/get(teamSearch)`.
    func teamSearch(_ input: Operations.teamSearch.Input) async throws -> Operations.teamSearch.Output
    /// Get members of a team
    ///
    /// Members are sorted by reverse chronological order of joining the team (most recent first).
    /// OAuth is only required if the list of members is private.
    /// Up to 5,000 users are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    ///
    ///
    /// - Remark: HTTP `GET /api/team/{teamId}/users`.
    /// - Remark: Generated from `#/paths//api/team/{teamId}/users/get(teamIdUsers)`.
    func teamIdUsers(_ input: Operations.teamIdUsers.Input) async throws -> Operations.teamIdUsers.Output
    /// Get team Arena tournaments
    ///
    /// Get all Arena tournaments relevant to a team.
    /// Tournaments are sorted by reverse chronological order of start date (last starting first).
    /// Tournaments are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    ///
    ///
    /// - Remark: HTTP `GET /api/team/{teamId}/arena`.
    /// - Remark: Generated from `#/paths//api/team/{teamId}/arena/get(apiTeamArena)`.
    func apiTeamArena(_ input: Operations.apiTeamArena.Input) async throws -> Operations.apiTeamArena.Output
    /// Join a team
    ///
    /// Join a team.
    /// If the team requires a password but the `password` field is incorrect,
    /// then the call fails with `403 Forbidden`.
    /// Similarly, if the team join policy requires a confirmation but the
    /// `message` parameter is not given, then the call fails with
    /// `403 Forbidden`.
    ///
    ///
    /// - Remark: HTTP `POST /team/{teamId}/join`.
    /// - Remark: Generated from `#/paths//team/{teamId}/join/post(teamIdJoin)`.
    func teamIdJoin(_ input: Operations.teamIdJoin.Input) async throws -> Operations.teamIdJoin.Output
    /// Leave a team
    ///
    /// Leave a team.
    /// - <https://lichess.org/team>
    ///
    ///
    /// - Remark: HTTP `POST /team/{teamId}/quit`.
    /// - Remark: Generated from `#/paths//team/{teamId}/quit/post(teamIdQuit)`.
    func teamIdQuit(_ input: Operations.teamIdQuit.Input) async throws -> Operations.teamIdQuit.Output
    /// Get join requests
    ///
    /// Get pending join requests of your team
    ///
    /// - Remark: HTTP `GET /api/team/{teamId}/requests`.
    /// - Remark: Generated from `#/paths//api/team/{teamId}/requests/get(teamRequests)`.
    func teamRequests(_ input: Operations.teamRequests.Input) async throws -> Operations.teamRequests.Output
    /// Accept join request
    ///
    /// Accept someone's request to join your team
    ///
    /// - Remark: HTTP `POST /api/team/{teamId}/request/{userId}/accept`.
    /// - Remark: Generated from `#/paths//api/team/{teamId}/request/{userId}/accept/post(teamRequestAccept)`.
    func teamRequestAccept(_ input: Operations.teamRequestAccept.Input) async throws -> Operations.teamRequestAccept.Output
    /// Decline join request
    ///
    /// Decline someone's request to join your team
    ///
    /// - Remark: HTTP `POST /api/team/{teamId}/request/{userId}/decline`.
    /// - Remark: Generated from `#/paths//api/team/{teamId}/request/{userId}/decline/post(teamRequestDecline)`.
    func teamRequestDecline(_ input: Operations.teamRequestDecline.Input) async throws -> Operations.teamRequestDecline.Output
    /// Kick a user from your team
    ///
    /// Kick a member out of one of your teams.
    /// - <https://lichess.org/team>
    ///
    ///
    /// - Remark: HTTP `POST /api/team/{teamId}/kick/{userId}`.
    /// - Remark: Generated from `#/paths//api/team/{teamId}/kick/{userId}/post(teamIdKickUserId)`.
    func teamIdKickUserId(_ input: Operations.teamIdKickUserId.Input) async throws -> Operations.teamIdKickUserId.Output
    /// Message all members
    ///
    /// Send a private message to all members of a team.
    /// You must be a team leader with the "Messages" permission.
    ///
    ///
    /// - Remark: HTTP `POST /team/{teamId}/pm-all`.
    /// - Remark: Generated from `#/paths//team/{teamId}/pm-all/post(teamIdPmAll)`.
    func teamIdPmAll(_ input: Operations.teamIdPmAll.Input) async throws -> Operations.teamIdPmAll.Output
    /// Get live streamers
    ///
    /// Get basic info about currently streaming users.
    /// This API is very fast and cheap on lichess side.
    /// So you can call it quite often (like once every 5 seconds).
    ///
    ///
    /// - Remark: HTTP `GET /api/streamer/live`.
    /// - Remark: Generated from `#/paths//api/streamer/live/get(streamerLive)`.
    func streamerLive(_ input: Operations.streamerLive.Input) async throws -> Operations.streamerLive.Output
    /// Get crosstable
    ///
    /// Get total number of games, and current score, of any two users.
    /// If the `matchup` flag is provided, and the users are currently playing, also gets the current match game number and scores.
    ///
    ///
    /// - Remark: HTTP `GET /api/crosstable/{user1}/{user2}`.
    /// - Remark: Generated from `#/paths//api/crosstable/{user1}/{user2}/get(apiCrosstable)`.
    func apiCrosstable(_ input: Operations.apiCrosstable.Input) async throws -> Operations.apiCrosstable.Output
    /// Autocomplete usernames
    ///
    /// Provides autocompletion options for an incomplete username.
    ///
    ///
    /// - Remark: HTTP `GET /api/player/autocomplete`.
    /// - Remark: Generated from `#/paths//api/player/autocomplete/get(apiPlayerAutocomplete)`.
    func apiPlayerAutocomplete(_ input: Operations.apiPlayerAutocomplete.Input) async throws -> Operations.apiPlayerAutocomplete.Output
    /// Get notes for a user
    ///
    /// Get the private notes that you have added for a user.
    ///
    ///
    /// - Remark: HTTP `GET /api/user/{username}/note`.
    /// - Remark: Generated from `#/paths//api/user/{username}/note/get(readNote)`.
    func readNote(_ input: Operations.readNote.Input) async throws -> Operations.readNote.Output
    /// Add a note for a user
    ///
    /// Add a private note available only to you about this account.
    ///
    ///
    /// - Remark: HTTP `POST /api/user/{username}/note`.
    /// - Remark: Generated from `#/paths//api/user/{username}/note/post(writeNote)`.
    func writeNote(_ input: Operations.writeNote.Input) async throws -> Operations.writeNote.Output
    /// Get users followed by the logged in user
    ///
    /// Users are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    ///
    ///
    /// - Remark: HTTP `GET /api/rel/following`.
    /// - Remark: Generated from `#/paths//api/rel/following/get(apiUserFollowing)`.
    func apiUserFollowing(_ input: Operations.apiUserFollowing.Input) async throws -> Operations.apiUserFollowing.Output
    /// Follow a player
    ///
    /// Follow a player, adding them to your list of Lichess friends.
    ///
    ///
    /// - Remark: HTTP `POST /api/rel/follow/{username}`.
    /// - Remark: Generated from `#/paths//api/rel/follow/{username}/post(followUser)`.
    func followUser(_ input: Operations.followUser.Input) async throws -> Operations.followUser.Output
    /// Unfollow a player
    ///
    /// Unfollow a player, removing them from your list of Lichess friends.
    ///
    ///
    /// - Remark: HTTP `POST /api/rel/unfollow/{username}`.
    /// - Remark: Generated from `#/paths//api/rel/unfollow/{username}/post(unfollowUser)`.
    func unfollowUser(_ input: Operations.unfollowUser.Input) async throws -> Operations.unfollowUser.Output
    /// Block a player
    ///
    /// Block a player, adding them to your list of blocked Lichess users.
    ///
    ///
    /// - Remark: HTTP `POST /api/rel/block/{username}`.
    /// - Remark: Generated from `#/paths//api/rel/block/{username}/post(blockUser)`.
    func blockUser(_ input: Operations.blockUser.Input) async throws -> Operations.blockUser.Output
    /// Unblock a player
    ///
    /// Unblock a player, removing them from your list of blocked Lichess users.
    ///
    ///
    /// - Remark: HTTP `POST /api/rel/unblock/{username}`.
    /// - Remark: Generated from `#/paths//api/rel/unblock/{username}/post(unblockUser)`.
    func unblockUser(_ input: Operations.unblockUser.Input) async throws -> Operations.unblockUser.Output
    /// Stream incoming events
    ///
    /// Stream the events reaching a lichess user in real time as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    ///
    /// An empty line is sent every 7 seconds for keep alive purposes.
    ///
    /// Each non-empty line is a JSON object containing a `type` field. Possible values are:
    /// - `gameStart` Start of a game
    /// - `gameFinish` Completion of a game
    /// - `challenge` A player sends you a challenge or you challenge someone
    /// - `challengeCanceled` A player cancels their challenge to you
    /// - `challengeDeclined` The opponent declines your challenge
    ///
    /// When the stream opens, all current challenges and games are sent.
    ///
    /// Only one global event stream can be active at a time. When the stream opens, the previous one with the same access token is closed.
    ///
    ///
    /// - Remark: HTTP `GET /api/stream/event`.
    /// - Remark: Generated from `#/paths//api/stream/event/get(apiStreamEvent)`.
    func apiStreamEvent(_ input: Operations.apiStreamEvent.Input) async throws -> Operations.apiStreamEvent.Output
    /// Create a seek
    ///
    /// Create a public seek, to start a game with a random player.
    ///
    /// ### Real-time seek
    ///
    /// Specify the `time` and `increment` clock values.
    /// The response is streamed but doesn't contain any information.
    ///
    /// **Keep the connection open to keep the seek active**.
    ///
    /// If the client closes the connection, the seek is canceled. This way, if the client terminates, the user won't be paired in a game they wouldn't play.
    /// When the seek is accepted, or expires, the server closes the connection.
    ///
    /// **Make sure to also have an [Event stream](#operation/apiStreamEvent) open**, to be notified when a game starts.
    /// We recommend opening the [Event stream](#operation/apiStreamEvent) first, then the seek stream. This way,
    /// you won't miss the game event if the seek is accepted immediately.
    ///
    /// ### Correspondence seek
    ///
    /// Specify the `days` per turn value.
    /// The response is not streamed, it immediately completes with the seek ID. The seek remains active on the server until it is joined by someone.
    ///
    ///
    /// - Remark: HTTP `POST /api/board/seek`.
    /// - Remark: Generated from `#/paths//api/board/seek/post(apiBoardSeek)`.
    func apiBoardSeek(_ input: Operations.apiBoardSeek.Input) async throws -> Operations.apiBoardSeek.Output
    /// Stream Board game state
    ///
    /// Stream the state of a game being played with the Board API, as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    ///
    /// Use this endpoint to get updates about the game in real-time, with a single request.
    ///
    /// Each line is a JSON object containing a `type` field. Possible values are:
    ///   - `gameFull` Full game data. All values are immutable, except for the `state` field.
    ///   - `gameState` Current state of the game. Immutable values not included. Sent when a move is played, a draw is offered, or when the game ends.
    ///   - `chatLine` Chat message sent by a user in the `room` "player" or "spectator".
    ///   - `opponentGone` Whether the opponent has left the game, and how long before you can claim a win or draw.
    ///
    /// The first line is always of type `gameFull`.
    ///
    /// The server closes the stream when the game ends, or if the game has already ended.
    ///
    ///
    /// - Remark: HTTP `GET /api/board/game/stream/{gameId}`.
    /// - Remark: Generated from `#/paths//api/board/game/stream/{gameId}/get(boardGameStream)`.
    func boardGameStream(_ input: Operations.boardGameStream.Input) async throws -> Operations.boardGameStream.Output
    /// Make a Board move
    ///
    /// Make a move in a game being played with the Board API.
    /// The move can also contain a draw offer/agreement.
    ///
    ///
    /// - Remark: HTTP `POST /api/board/game/{gameId}/move/{move}`.
    /// - Remark: Generated from `#/paths//api/board/game/{gameId}/move/{move}/post(boardGameMove)`.
    func boardGameMove(_ input: Operations.boardGameMove.Input) async throws -> Operations.boardGameMove.Output
    /// Fetch the game chat
    ///
    /// Get the messages posted in the game chat
    ///
    ///
    /// - Remark: HTTP `GET /api/board/game/{gameId}/chat`.
    /// - Remark: Generated from `#/paths//api/board/game/{gameId}/chat/get(boardGameChatGet)`.
    func boardGameChatGet(_ input: Operations.boardGameChatGet.Input) async throws -> Operations.boardGameChatGet.Output
    /// Write in the chat
    ///
    /// Post a message to the player or spectator chat, in a game being played with the Board API.
    ///
    ///
    /// - Remark: HTTP `POST /api/board/game/{gameId}/chat`.
    /// - Remark: Generated from `#/paths//api/board/game/{gameId}/chat/post(boardGameChatPost)`.
    func boardGameChatPost(_ input: Operations.boardGameChatPost.Input) async throws -> Operations.boardGameChatPost.Output
    /// Abort a game
    ///
    /// Abort a game being played with the Board API.
    ///
    ///
    /// - Remark: HTTP `POST /api/board/game/{gameId}/abort`.
    /// - Remark: Generated from `#/paths//api/board/game/{gameId}/abort/post(boardGameAbort)`.
    func boardGameAbort(_ input: Operations.boardGameAbort.Input) async throws -> Operations.boardGameAbort.Output
    /// Resign a game
    ///
    /// Resign a game being played with the Board API.
    ///
    ///
    /// - Remark: HTTP `POST /api/board/game/{gameId}/resign`.
    /// - Remark: Generated from `#/paths//api/board/game/{gameId}/resign/post(boardGameResign)`.
    func boardGameResign(_ input: Operations.boardGameResign.Input) async throws -> Operations.boardGameResign.Output
    /// Handle draw offers
    ///
    /// Create/accept/decline draw offers.
    /// - `yes`: Offer a draw, or accept the opponent's draw offer.
    /// - `no`: Decline a draw offer from the opponent.
    ///
    ///
    /// - Remark: HTTP `POST /api/board/game/{gameId}/draw/{accept}`.
    /// - Remark: Generated from `#/paths//api/board/game/{gameId}/draw/{accept}/post(boardGameDraw)`.
    func boardGameDraw(_ input: Operations.boardGameDraw.Input) async throws -> Operations.boardGameDraw.Output
    /// Handle takeback offers
    ///
    /// Create/accept/decline takebacks.
    /// - `yes`: Propose a takeback, or accept the opponent's takeback offer.
    /// - `no`: Decline a takeback offer from the opponent.
    ///
    ///
    /// - Remark: HTTP `POST /api/board/game/{gameId}/takeback/{accept}`.
    /// - Remark: Generated from `#/paths//api/board/game/{gameId}/takeback/{accept}/post(boardGameTakeback)`.
    func boardGameTakeback(_ input: Operations.boardGameTakeback.Input) async throws -> Operations.boardGameTakeback.Output
    /// Claim victory of a game
    ///
    /// Claim victory when the opponent has left the game for a while.
    ///
    ///
    /// - Remark: HTTP `POST /api/board/game/{gameId}/claim-victory`.
    /// - Remark: Generated from `#/paths//api/board/game/{gameId}/claim-victory/post(boardGameClaimVictory)`.
    func boardGameClaimVictory(_ input: Operations.boardGameClaimVictory.Input) async throws -> Operations.boardGameClaimVictory.Output
    /// Claim draw of a game
    ///
    /// Claim draw when the opponent has left the game for a while.
    ///
    ///
    /// - Remark: HTTP `POST /api/board/game/{gameId}/claim-draw`.
    /// - Remark: Generated from `#/paths//api/board/game/{gameId}/claim-draw/post(boardGameClaimDraw)`.
    func boardGameClaimDraw(_ input: Operations.boardGameClaimDraw.Input) async throws -> Operations.boardGameClaimDraw.Output
    /// Berserk a tournament game
    ///
    /// Go berserk on an arena tournament game. Halves the clock time, grants an extra point upon winning.
    /// Only available in arena tournaments that allow berserk, and before each player has made a move.
    ///
    ///
    /// - Remark: HTTP `POST /api/board/game/{gameId}/berserk`.
    /// - Remark: Generated from `#/paths//api/board/game/{gameId}/berserk/post(boardGameBerserk)`.
    func boardGameBerserk(_ input: Operations.boardGameBerserk.Input) async throws -> Operations.boardGameBerserk.Output
    /// Get online bots
    ///
    /// Stream the [online bot users](https://lichess.org/player/bots), as [ndjson](#section/Introduction/Streaming-with-ND-JSON). Throttled to 50 bot users per second.
    ///
    /// - Remark: HTTP `GET /api/bot/online`.
    /// - Remark: Generated from `#/paths//api/bot/online/get(apiBotOnline)`.
    func apiBotOnline(_ input: Operations.apiBotOnline.Input) async throws -> Operations.apiBotOnline.Output
    /// Upgrade to Bot account
    ///
    /// Upgrade a lichess player account into a Bot account. Only Bot accounts can use the Bot API.
    /// The account **cannot have played any game** before becoming a Bot account. The upgrade is **irreversible**. The account will only be able to play as a Bot.
    /// To upgrade an account to Bot, use the [official lichess-bot client](https://github.com/lichess-bot-devs/lichess-bot), or follow these steps:
    /// - Create an [API access token](https://lichess.org/account/oauth/token/create?scopes[]=bot:play) with "Play bot moves" permission.
    /// - `curl -d '' https://lichess.org/api/bot/account/upgrade -H "Authorization: Bearer <yourTokenHere>"`
    /// To know if an account has already been upgraded, use the [Get my profile API](#operation/accountMe):
    /// the `title` field should be set to `BOT`.
    ///
    ///
    /// - Remark: HTTP `POST /api/bot/account/upgrade`.
    /// - Remark: Generated from `#/paths//api/bot/account/upgrade/post(botAccountUpgrade)`.
    func botAccountUpgrade(_ input: Operations.botAccountUpgrade.Input) async throws -> Operations.botAccountUpgrade.Output
    /// Stream Bot game state
    ///
    /// Stream the state of a game being played with the Bot API, as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    /// Use this endpoint to get updates about the game in real-time, with a single request.
    /// Each line is a JSON object containing a `type` field. Possible values are:
    /// - `gameFull` Full game data. All values are immutable, except for the `state` field.
    /// - `gameState` Current state of the game. Immutable values not included.
    /// - `chatLine` Chat message sent by a user (or the bot itself) in the `room` "player" or "spectator".
    /// - `opponentGone` Whether the opponent has left the game, and how long before you can claim a win or draw.
    /// The first line is always of type `gameFull`.
    ///
    ///
    /// - Remark: HTTP `GET /api/bot/game/stream/{gameId}`.
    /// - Remark: Generated from `#/paths//api/bot/game/stream/{gameId}/get(botGameStream)`.
    func botGameStream(_ input: Operations.botGameStream.Input) async throws -> Operations.botGameStream.Output
    /// Make a Bot move
    ///
    /// Make a move in a game being played with the Bot API.
    /// The move can also contain a draw offer/agreement.
    ///
    ///
    /// - Remark: HTTP `POST /api/bot/game/{gameId}/move/{move}`.
    /// - Remark: Generated from `#/paths//api/bot/game/{gameId}/move/{move}/post(botGameMove)`.
    func botGameMove(_ input: Operations.botGameMove.Input) async throws -> Operations.botGameMove.Output
    /// Fetch the game chat
    ///
    /// Get the messages posted in the game chat
    ///
    ///
    /// - Remark: HTTP `GET /api/bot/game/{gameId}/chat`.
    /// - Remark: Generated from `#/paths//api/bot/game/{gameId}/chat/get(botGameChatGet)`.
    func botGameChatGet(_ input: Operations.botGameChatGet.Input) async throws -> Operations.botGameChatGet.Output
    /// Write in the chat
    ///
    /// Post a message to the player or spectator chat, in a game being played with the Bot API.
    ///
    ///
    /// - Remark: HTTP `POST /api/bot/game/{gameId}/chat`.
    /// - Remark: Generated from `#/paths//api/bot/game/{gameId}/chat/post(botGameChat)`.
    func botGameChat(_ input: Operations.botGameChat.Input) async throws -> Operations.botGameChat.Output
    /// Abort a game
    ///
    /// Abort a game being played with the Bot API.
    ///
    ///
    /// - Remark: HTTP `POST /api/bot/game/{gameId}/abort`.
    /// - Remark: Generated from `#/paths//api/bot/game/{gameId}/abort/post(botGameAbort)`.
    func botGameAbort(_ input: Operations.botGameAbort.Input) async throws -> Operations.botGameAbort.Output
    /// Resign a game
    ///
    /// Resign a game being played with the Bot API.
    ///
    ///
    /// - Remark: HTTP `POST /api/bot/game/{gameId}/resign`.
    /// - Remark: Generated from `#/paths//api/bot/game/{gameId}/resign/post(botGameResign)`.
    func botGameResign(_ input: Operations.botGameResign.Input) async throws -> Operations.botGameResign.Output
    /// Handle draw offers
    ///
    /// Create/accept/decline draw offers with the Bot API.
    /// - `yes`: Offer a draw, or accept the opponent's draw offer.
    /// - `no`: Decline a draw offer from the opponent.
    ///
    ///
    /// - Remark: HTTP `POST /api/bot/game/{gameId}/draw/{accept}`.
    /// - Remark: Generated from `#/paths//api/bot/game/{gameId}/draw/{accept}/post(botGameDraw)`.
    func botGameDraw(_ input: Operations.botGameDraw.Input) async throws -> Operations.botGameDraw.Output
    /// Handle takeback offers
    ///
    /// Create/accept/decline takebacks with the Bot API.
    /// - `yes`: Propose a takeback, or accept the opponent's takeback offer.
    /// - `no`: Decline a takeback offer from the opponent.
    ///
    ///
    /// - Remark: HTTP `POST /api/bot/game/{gameId}/takeback/{accept}`.
    /// - Remark: Generated from `#/paths//api/bot/game/{gameId}/takeback/{accept}/post(botGameTakeback)`.
    func botGameTakeback(_ input: Operations.botGameTakeback.Input) async throws -> Operations.botGameTakeback.Output
    /// Claim victory of a game
    ///
    /// Claim victory when the opponent has left the game for a while.
    ///
    ///
    /// - Remark: HTTP `POST /api/bot/game/{gameId}/claim-victory`.
    /// - Remark: Generated from `#/paths//api/bot/game/{gameId}/claim-victory/post(botGameClaimVictory)`.
    func botGameClaimVictory(_ input: Operations.botGameClaimVictory.Input) async throws -> Operations.botGameClaimVictory.Output
    /// Claim draw of a game
    ///
    /// Claim draw when the opponent has left the game for a while.
    ///
    ///
    /// - Remark: HTTP `POST /api/bot/game/{gameId}/claim-draw`.
    /// - Remark: Generated from `#/paths//api/bot/game/{gameId}/claim-draw/post(botGameClaimDraw)`.
    func botGameClaimDraw(_ input: Operations.botGameClaimDraw.Input) async throws -> Operations.botGameClaimDraw.Output
    /// List your challenges
    ///
    /// Get a list of challenges created by or targeted at you.
    ///
    ///
    /// - Remark: HTTP `GET /api/challenge`.
    /// - Remark: Generated from `#/paths//api/challenge/get(challengeList)`.
    func challengeList(_ input: Operations.challengeList.Input) async throws -> Operations.challengeList.Output
    /// Create a challenge
    ///
    /// Challenge someone to play. The targeted player can choose to accept or decline.
    /// If the challenge is accepted, you will be notified on the [event stream](#operation/apiStreamEvent)
    /// that a new game has started. The game ID will be the same as the challenge ID.
    /// Challenges for realtime games (not correspondence) expire after 20s if not accepted.
    /// To prevent that, use the `keepAliveStream` flag described below.
    ///
    ///
    /// - Remark: HTTP `POST /api/challenge/{username}`.
    /// - Remark: Generated from `#/paths//api/challenge/{username}/post(challengeCreate)`.
    func challengeCreate(_ input: Operations.challengeCreate.Input) async throws -> Operations.challengeCreate.Output
    /// Show one challenge
    ///
    /// Get details about a challenge, even if it has been recently accepted, canceled or declined.
    ///
    ///
    /// - Remark: HTTP `GET /api/challenge/{challengeId}/show`.
    /// - Remark: Generated from `#/paths//api/challenge/{challengeId}/show/get(challengeShow)`.
    func challengeShow(_ input: Operations.challengeShow.Input) async throws -> Operations.challengeShow.Output
    /// Accept a challenge
    ///
    /// Accept an incoming challenge.
    /// You should receive a `gameStart` event on the [incoming events stream](#operation/apiStreamEvent).
    ///
    ///
    /// - Remark: HTTP `POST /api/challenge/{challengeId}/accept`.
    /// - Remark: Generated from `#/paths//api/challenge/{challengeId}/accept/post(challengeAccept)`.
    func challengeAccept(_ input: Operations.challengeAccept.Input) async throws -> Operations.challengeAccept.Output
    /// Decline a challenge
    ///
    /// Decline an incoming challenge.
    ///
    ///
    /// - Remark: HTTP `POST /api/challenge/{challengeId}/decline`.
    /// - Remark: Generated from `#/paths//api/challenge/{challengeId}/decline/post(challengeDecline)`.
    func challengeDecline(_ input: Operations.challengeDecline.Input) async throws -> Operations.challengeDecline.Output
    /// Cancel a challenge
    ///
    /// Cancel a challenge you sent, or aborts the game if the challenge was accepted, but the game was not yet played.
    /// Note that the ID of a game is the same as the ID of the challenge that created it.
    /// Works for user challenges and open challenges alike.
    ///
    ///
    /// - Remark: HTTP `POST /api/challenge/{challengeId}/cancel`.
    /// - Remark: Generated from `#/paths//api/challenge/{challengeId}/cancel/post(challengeCancel)`.
    func challengeCancel(_ input: Operations.challengeCancel.Input) async throws -> Operations.challengeCancel.Output
    /// Challenge the AI
    ///
    /// Start a game with Lichess AI.
    /// You will be notified on the [event stream](#operation/apiStreamEvent) that a new game has started.
    ///
    ///
    /// - Remark: HTTP `POST /api/challenge/ai`.
    /// - Remark: Generated from `#/paths//api/challenge/ai/post(challengeAi)`.
    func challengeAi(_ input: Operations.challengeAi.Input) async throws -> Operations.challengeAi.Output
    /// Open-ended challenge
    ///
    /// Create a challenge that any 2 players can join.
    /// Share the URL of the challenge. the first 2 players to click it will be paired for a game.
    /// The response body also contains `whiteUrl` and `blackUrl`.
    /// You can control which color each player gets by giving them these URLs,
    /// instead of the main challenge URL.
    /// Open challenges expire after 24h.
    /// If the challenge creation is [authenticated with OAuth2](#section/Introduction/Authentication),
    /// then you can use the [challenge cancel endpoint](#operation/challengeCancel) to cancel it.
    /// To directly pair 2 known players, use [this endpoint](#operation/bulkPairingList) instead.
    ///
    ///
    /// - Remark: HTTP `POST /api/challenge/open`.
    /// - Remark: Generated from `#/paths//api/challenge/open/post(challengeOpen)`.
    func challengeOpen(_ input: Operations.challengeOpen.Input) async throws -> Operations.challengeOpen.Output
    /// Start clocks of a game
    ///
    /// Start the clocks of a game immediately, even if a player has not yet made a move.
    /// Requires the OAuth tokens of both players with `challenge:write` scope.
    /// If the clocks have already started, the call will have no effect.
    ///
    /// For AI games with only one player, omit the `token2` parameter.
    ///
    ///
    /// - Remark: HTTP `POST /api/challenge/{gameId}/start-clocks`.
    /// - Remark: Generated from `#/paths//api/challenge/{gameId}/start-clocks/post(challengeStartClocks)`.
    func challengeStartClocks(_ input: Operations.challengeStartClocks.Input) async throws -> Operations.challengeStartClocks.Output
    /// View your bulk pairings
    ///
    /// Get a list of bulk pairings you created.
    ///
    ///
    /// - Remark: HTTP `GET /api/bulk-pairing`.
    /// - Remark: Generated from `#/paths//api/bulk-pairing/get(bulkPairingList)`.
    func bulkPairingList(_ input: Operations.bulkPairingList.Input) async throws -> Operations.bulkPairingList.Output
    /// Create a bulk pairing
    ///
    /// Schedule many games at once, up to 24h in advance.
    /// OAuth tokens are required for all paired players, with the `challenge:write` scope.
    /// You can schedule up to 500 games every 10 minutes. [Contact us](mailto:contact@lichess.org) if you need higher limits.
    /// If games have a real-time clock, each player must have only one pairing.
    /// For correspondence games, players can have multiple pairings within the same bulk.
    ///
    /// **The entire bulk is rejected if:**
    ///   - a token is missing
    ///   - a token is present more than once (except in correspondence)
    ///   - a token lacks the `challenge:write` scope
    ///   - a player account is closed
    ///   - a player is paired more than once (except in correspondence)
    ///   - a bulk is already scheduled to start at the same time with the same player
    ///   - you have 20 scheduled bulks
    ///   - you have 1000 scheduled games
    ///
    /// Partial bulks are never created. Either it all fails, or it all succeeds.
    /// When it fails, it does so with an error message explaining the issue.
    /// Failed bulks are not counted in the rate limiting, they are free.
    /// Fix the issues, manually or programmatically, then retry to schedule the bulk.
    /// A successful bulk creation returns a JSON bulk document. Its ID can be used for further operations.
    ///
    ///
    /// - Remark: HTTP `POST /api/bulk-pairing`.
    /// - Remark: Generated from `#/paths//api/bulk-pairing/post(bulkPairingCreate)`.
    func bulkPairingCreate(_ input: Operations.bulkPairingCreate.Input) async throws -> Operations.bulkPairingCreate.Output
    /// Manually start clocks
    ///
    /// Immediately start all clocks of the games of a bulk pairing.
    /// This overrides the `startClocksAt` value of an existing bulk pairing.
    /// If the games have not yet been created (`bulk.pairAt` is in the future), then this does nothing.
    /// If the clocks have already started (`bulk.startClocksAt` is in the past), then this does nothing.
    ///
    ///
    /// - Remark: HTTP `POST /api/bulk-pairing/{id}/start-clocks`.
    /// - Remark: Generated from `#/paths//api/bulk-pairing/{id}/start-clocks/post(bulkPairingStartClocks)`.
    func bulkPairingStartClocks(_ input: Operations.bulkPairingStartClocks.Input) async throws -> Operations.bulkPairingStartClocks.Output
    /// Show a bulk pairing
    ///
    /// Get a single bulk pairing by its ID.
    ///
    ///
    /// - Remark: HTTP `GET /api/bulk-pairing/{id}`.
    /// - Remark: Generated from `#/paths//api/bulk-pairing/{id}/get(bulkPairingGet)`.
    func bulkPairingGet(_ input: Operations.bulkPairingGet.Input) async throws -> Operations.bulkPairingGet.Output
    /// Cancel a bulk pairing
    ///
    /// Cancel and delete a bulk pairing that is scheduled in the future.
    /// If the games have already been created, then this does nothing.
    /// Canceling a bulk pairing does not refund the rate limit cost of that bulk pairing.
    ///
    ///
    /// - Remark: HTTP `DELETE /api/bulk-pairing/{id}`.
    /// - Remark: Generated from `#/paths//api/bulk-pairing/{id}/delete(bulkPairingDelete)`.
    func bulkPairingDelete(_ input: Operations.bulkPairingDelete.Input) async throws -> Operations.bulkPairingDelete.Output
    /// Export games of a bulk pairing
    ///
    /// Download games of a bulk in PGN or [ndjson](#section/Introduction/Streaming-with-ND-JSON) format, depending on the request `Accept` header.
    ///
    ///
    /// - Remark: HTTP `GET /api/bulk-pairing/{id}/games`.
    /// - Remark: Generated from `#/paths//api/bulk-pairing/{id}/games/get(bulkPairingIdGamesGet)`.
    func bulkPairingIdGamesGet(_ input: Operations.bulkPairingIdGamesGet.Input) async throws -> Operations.bulkPairingIdGamesGet.Output
    /// Add time to the opponent clock
    ///
    /// Add seconds to the opponent's clock. Can be used to create games with time odds.
    ///
    ///
    /// - Remark: HTTP `POST /api/round/{gameId}/add-time/{seconds}`.
    /// - Remark: Generated from `#/paths//api/round/{gameId}/add-time/{seconds}/post(roundAddTime)`.
    func roundAddTime(_ input: Operations.roundAddTime.Input) async throws -> Operations.roundAddTime.Output
    /// Admin challenge tokens
    ///
    /// **This endpoint can only be used by Lichess administrators. It will not work if you do not have the appropriate permissions.** Tournament organizers should instead use [OAuth](#tag/OAuth) to obtain `challenge:write` tokens from users in order to perform bulk pairing.*
    /// Create and obtain `challenge:write` tokens for multiple users.
    /// If a similar token already exists for a user, it is reused. This endpoint is idempotent.
    ///
    ///
    /// - Remark: HTTP `POST /api/token/admin-challenge`.
    /// - Remark: Generated from `#/paths//api/token/admin-challenge/post(adminChallengeTokens)`.
    func adminChallengeTokens(_ input: Operations.adminChallengeTokens.Input) async throws -> Operations.adminChallengeTokens.Output
    /// Send a private message
    ///
    /// Send a private message to another player.
    ///
    ///
    /// - Remark: HTTP `POST /inbox/{username}`.
    /// - Remark: Generated from `#/paths//inbox/{username}/post(inboxUsername)`.
    func inboxUsername(_ input: Operations.inboxUsername.Input) async throws -> Operations.inboxUsername.Output
    /// Get cloud evaluation of a position.
    ///
    /// Get the cached evaluation of a position, if available.
    /// Opening positions have more chances of being available. There are about 15 million positions in the database.
    /// Up to 5 variations may be available. Variants are supported.
    /// Use this endpoint to fetch a few positions here and there.
    /// If you want to download a lot of positions, [get the full list](https://database.lichess.org/#evals) from our exported database.
    ///
    ///
    /// - Remark: HTTP `GET /api/cloud-eval`.
    /// - Remark: Generated from `#/paths//api/cloud-eval/get(apiCloudEval)`.
    func apiCloudEval(_ input: Operations.apiCloudEval.Input) async throws -> Operations.apiCloudEval.Output
    /// List external engines
    ///
    /// Lists all external engines that have been registered for the user,
    /// and the credentials required to use them.
    ///
    ///
    /// - Remark: HTTP `GET /api/external-engine`.
    /// - Remark: Generated from `#/paths//api/external-engine/get(apiExternalEngineList)`.
    func apiExternalEngineList(_ input: Operations.apiExternalEngineList.Input) async throws -> Operations.apiExternalEngineList.Output
    /// Create external engine
    ///
    /// Registers a new external engine for the user. It can then be selected
    /// and used on the analysis board.
    /// After registering, the provider should start waiting for analyis requests.
    ///
    ///
    /// - Remark: HTTP `POST /api/external-engine`.
    /// - Remark: Generated from `#/paths//api/external-engine/post(apiExternalEngineCreate)`.
    func apiExternalEngineCreate(_ input: Operations.apiExternalEngineCreate.Input) async throws -> Operations.apiExternalEngineCreate.Output
    /// Get external engine
    ///
    /// Get properties and credentials of an external engine.
    ///
    ///
    /// - Remark: HTTP `GET /api/external-engine/{id}`.
    /// - Remark: Generated from `#/paths//api/external-engine/{id}/get(apiExternalEngineGet)`.
    func apiExternalEngineGet(_ input: Operations.apiExternalEngineGet.Input) async throws -> Operations.apiExternalEngineGet.Output
    /// Update external engine
    ///
    /// Updates the properties of an external engine.
    ///
    ///
    /// - Remark: HTTP `PUT /api/external-engine/{id}`.
    /// - Remark: Generated from `#/paths//api/external-engine/{id}/put(apiExternalEnginePut)`.
    func apiExternalEnginePut(_ input: Operations.apiExternalEnginePut.Input) async throws -> Operations.apiExternalEnginePut.Output
    /// Delete external engine
    ///
    /// Unregisters an external engine.
    ///
    ///
    /// - Remark: HTTP `DELETE /api/external-engine/{id}`.
    /// - Remark: Generated from `#/paths//api/external-engine/{id}/delete(apiExternalEngineDelete)`.
    func apiExternalEngineDelete(_ input: Operations.apiExternalEngineDelete.Input) async throws -> Operations.apiExternalEngineDelete.Output
    /// Analyse with external engine
    ///
    /// **Endpoint: `https://engine.lichess.ovh/api/external-engine/{id}/analyse`**
    /// Request analysis from an external engine.
    /// Response content is streamed as [newline delimited JSON](#section/Introduction/Streaming-with-ND-JSON).
    /// The properties are based on the [UCI specification](https://backscattering.de/chess/uci/#engine).
    /// Analysis stops when the client goes away, the requested limit
    /// is reached, or the provider goes away.
    ///
    ///
    /// - Remark: HTTP `POST /api/external-engine/{id}/analyse`.
    /// - Remark: Generated from `#/paths//api/external-engine/{id}/analyse/post(apiExternalEngineAnalyse)`.
    func apiExternalEngineAnalyse(_ input: Operations.apiExternalEngineAnalyse.Input) async throws -> Operations.apiExternalEngineAnalyse.Output
    /// Acquire analysis request
    ///
    /// **Endpoint: `https://engine.lichess.ovh/api/external-engine/work`**
    /// Wait for an analysis requests to any of the external engines that
    /// have been registered with the given `secret`.
    /// Uses long polling.
    /// After acquiring a request, the provider should immediately
    /// [start streaming the results](#tag/External-engine/operation/apiExternalEngineSubmit).
    ///
    ///
    /// - Remark: HTTP `POST /api/external-engine/work`.
    /// - Remark: Generated from `#/paths//api/external-engine/work/post(apiExternalEngineAcquire)`.
    func apiExternalEngineAcquire(_ input: Operations.apiExternalEngineAcquire.Input) async throws -> Operations.apiExternalEngineAcquire.Output
    /// Answer analysis request
    ///
    /// **Endpoint: `https://engine.lichess.ovh/api/external-engine/work/{id}`**
    /// Submit a stream of analysis as [UCI output](https://backscattering.de/chess/uci/#engine-info).
    /// * The engine should always be in `UCI_Chess960` mode.
    /// * `UCI_AnalyseMode` enabled if available.
    /// * It produces `info` with at least:
    ///   - `depth`
    ///   - `multipv` (between 1 and 5)
    ///   - `score`
    ///   - `nodes`
    ///   - `time`
    ///   - `pv`
    /// The server may close the connection at any time, indicating that
    /// the requester has gone away and analysis should be stopped.
    ///
    ///
    /// - Remark: HTTP `POST /api/external-engine/work/{id}`.
    /// - Remark: Generated from `#/paths//api/external-engine/work/{id}/post(apiExternalEngineSubmit)`.
    func apiExternalEngineSubmit(_ input: Operations.apiExternalEngineSubmit.Input) async throws -> Operations.apiExternalEngineSubmit.Output
    /// Request authorization code
    ///
    /// OAuth2 authorization endpoint.
    /// Start the OAuth2 Authorization Code Flow with PKCE by securely
    /// generating two random strings unique to each authorization
    /// request:
    ///
    /// * `code_verifier`
    /// * `state`
    ///
    /// Store these in session storage. Make sure not to reveal `code_verifier`
    /// to eavesdroppers. Do not show it in URLs, do not abuse `state` to store
    /// it, do not send it over insecure connections. However it is fine if
    /// the user themselves can extract `code_verifier`, which will always be
    /// possible for fully client-side apps.
    /// Then send the user to this endpoint. They will be prompted to grant
    /// authorization and then be redirected back to the given `redirect_uri`.
    /// If the authorization failed, the following query string parameters will
    /// be appended to the redirection:
    ///
    /// * `error`, in particular with value `access_denied` if the user
    ///    cancelled authorization
    /// * `error_description` to aid debugging
    /// * `state`, exactly as passed in the `state` parameter
    ///
    /// If the authorization succeeded, the following query string parameters
    /// will be appended to the redirection:
    ///
    /// * `code`, containing a fresh short-lived authorization code
    /// * `state`, exactly as passed in the `state` parameter
    ///
    /// Next, to defend against cross site request forgery, check that the
    /// returned `state` matches the `state` you originally generated.
    ///
    /// Finally, continue by using the authorization code to
    /// [obtain an access token](#operation/apiToken).
    ///
    ///
    /// - Remark: HTTP `GET /oauth`.
    /// - Remark: Generated from `#/paths//oauth/get(oauth)`.
    func oauth(_ input: Operations.oauth.Input) async throws -> Operations.oauth.Output
    /// Obtain access token
    ///
    /// OAuth2 token endpoint. Exchanges an authorization code for an access token.
    ///
    ///
    /// - Remark: HTTP `POST /api/token`.
    /// - Remark: Generated from `#/paths//api/token/post(apiToken)`.
    func apiToken(_ input: Operations.apiToken.Input) async throws -> Operations.apiToken.Output
    /// Revoke access token
    ///
    /// Revokes the access token sent as Bearer for this request.
    ///
    /// - Remark: HTTP `DELETE /api/token`.
    /// - Remark: Generated from `#/paths//api/token/delete(apiTokenDelete)`.
    func apiTokenDelete(_ input: Operations.apiTokenDelete.Input) async throws -> Operations.apiTokenDelete.Output
    /// Test multiple OAuth tokens
    ///
    /// For up to 1000 OAuth tokens,
    /// returns their associated user ID and scopes,
    /// or `null` if the token is invalid.
    /// The method is `POST` so a longer list of tokens can be sent in the request body.
    ///
    ///
    /// - Remark: HTTP `POST /api/token/test`.
    /// - Remark: Generated from `#/paths//api/token/test/post(tokenTest)`.
    func tokenTest(_ input: Operations.tokenTest.Input) async throws -> Operations.tokenTest.Output
    /// Masters database
    ///
    /// **Endpoint: <https://explorer.lichess.ovh/masters>**
    ///
    /// Example: `curl https://explorer.lichess.ovh/masters?play=d2d4,d7d5,c2c4,c7c6,c4d5`
    ///
    ///
    /// - Remark: HTTP `GET /masters`.
    /// - Remark: Generated from `#/paths//masters/get(openingExplorerMaster)`.
    func openingExplorerMaster(_ input: Operations.openingExplorerMaster.Input) async throws -> Operations.openingExplorerMaster.Output
    /// Lichess games
    ///
    /// **Endpoint: <https://explorer.lichess.ovh/lichess>**
    ///
    /// Games sampled from all Lichess players.
    ///
    /// Example: `curl https://explorer.lichess.ovh/lichess?variant=standard&speeds=blitz,rapid,classical&ratings=2200,2500&fen=rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR%20w%20KQkq%20-%200%201`
    ///
    ///
    /// - Remark: HTTP `GET /lichess`.
    /// - Remark: Generated from `#/paths//lichess/get(openingExplorerLichess)`.
    func openingExplorerLichess(_ input: Operations.openingExplorerLichess.Input) async throws -> Operations.openingExplorerLichess.Output
    /// Player games
    ///
    /// **Endpoint: <https://explorer.lichess.ovh/player>**
    ///
    /// Games of a Lichess player.
    ///
    /// Responds with a stream of [newline delimited JSON](#section/Introduction/Streaming-with-ND-JSON). Will start indexing
    /// on demand, immediately respond with the current results, and stream
    /// more updates until indexing is complete. The stream is throttled
    /// and deduplicated. Empty lines may be sent to avoid timeouts.
    ///
    /// Will index new games at most once per minute, and revisit previously
    /// ongoing games at most once every day.
    ///
    /// Example: `curl https://explorer.lichess.ovh/player?player=revoof&color=white&play=d2d4,d7d5&recentGames=1`
    ///
    ///
    /// - Remark: HTTP `GET /player`.
    /// - Remark: Generated from `#/paths//player/get(openingExplorerPlayer)`.
    func openingExplorerPlayer(_ input: Operations.openingExplorerPlayer.Input) async throws -> Operations.openingExplorerPlayer.Output
    /// OTB master game
    ///
    /// **Endpoint: `https://explorer.lichess.ovh/masters/pgn/{gameId}`**
    ///
    /// Example: `curl https://explorer.lichess.ovh/masters/pgn/aAbqI4ey`
    ///
    ///
    /// - Remark: HTTP `GET /master/pgn/{gameId}`.
    /// - Remark: Generated from `#/paths//master/pgn/{gameId}/get(openingExplorerMasterGame)`.
    func openingExplorerMasterGame(_ input: Operations.openingExplorerMasterGame.Input) async throws -> Operations.openingExplorerMasterGame.Output
    /// Tablebase lookup
    ///
    /// **Endpoint: <https://tablebase.lichess.ovh>**
    /// Example: `curl http://tablebase.lichess.ovh/standard?fen=4k3/6KP/8/8/8/8/7p/8_w_-_-_0_1`
    ///
    ///
    /// - Remark: HTTP `GET /standard`.
    /// - Remark: Generated from `#/paths//standard/get(tablebaseStandard)`.
    func tablebaseStandard(_ input: Operations.tablebaseStandard.Input) async throws -> Operations.tablebaseStandard.Output
    /// Tablebase lookup for Atomic chess
    ///
    /// **Endpoint: <https://tablebase.lichess.ovh>**
    ///
    ///
    /// - Remark: HTTP `GET /atomic`.
    /// - Remark: Generated from `#/paths//atomic/get(tablebaseAtomic)`.
    func tablebaseAtomic(_ input: Operations.tablebaseAtomic.Input) async throws -> Operations.tablebaseAtomic.Output
    /// Tablebase lookup for Antichess
    ///
    /// **Endpoint: <https://tablebase.lichess.ovh>**
    ///
    ///
    /// - Remark: HTTP `GET /antichess`.
    /// - Remark: Generated from `#/paths//antichess/get(antichessAtomic)`.
    func antichessAtomic(_ input: Operations.antichessAtomic.Input) async throws -> Operations.antichessAtomic.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Get real-time users status
    ///
    /// Read the `online`, `playing` and `streaming` flags of several users.
    /// This API is very fast and cheap on lichess side.
    /// So you can call it quite often (like once every 5 seconds).
    /// Use it to track players and know when they're connected on lichess and playing games.
    ///
    ///
    /// - Remark: HTTP `GET /api/users/status`.
    /// - Remark: Generated from `#/paths//api/users/status/get(apiUsersStatus)`.
    internal func apiUsersStatus(
        query: Operations.apiUsersStatus.Input.Query,
        headers: Operations.apiUsersStatus.Input.Headers = .init()
    ) async throws -> Operations.apiUsersStatus.Output {
        try await apiUsersStatus(Operations.apiUsersStatus.Input(
            query: query,
            headers: headers
        ))
    }
    /// Get all top 10
    ///
    /// Get the top 10 players for each speed and variant.
    /// See <https://lichess.org/player>.
    ///
    ///
    /// - Remark: HTTP `GET /api/player`.
    /// - Remark: Generated from `#/paths//api/player/get(player)`.
    internal func player(headers: Operations.player.Input.Headers = .init()) async throws -> Operations.player.Output {
        try await player(Operations.player.Input(headers: headers))
    }
    /// Get one leaderboard
    ///
    /// Get the leaderboard for a single speed or variant (a.k.a. `perfType`).
    /// There is no leaderboard for correspondence or puzzles.
    /// See <https://lichess.org/player/top/200/bullet>.
    ///
    ///
    /// - Remark: HTTP `GET /api/player/top/{nb}/{perfType}`.
    /// - Remark: Generated from `#/paths//api/player/top/{nb}/{perfType}/get(playerTopNbPerfType)`.
    internal func playerTopNbPerfType(
        path: Operations.playerTopNbPerfType.Input.Path,
        headers: Operations.playerTopNbPerfType.Input.Headers = .init()
    ) async throws -> Operations.playerTopNbPerfType.Output {
        try await playerTopNbPerfType(Operations.playerTopNbPerfType.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get user public data
    ///
    /// Read public data of a user.
    ///
    ///
    /// - Remark: HTTP `GET /api/user/{username}`.
    /// - Remark: Generated from `#/paths//api/user/{username}/get(apiUser)`.
    internal func apiUser(
        path: Operations.apiUser.Input.Path,
        query: Operations.apiUser.Input.Query = .init(),
        headers: Operations.apiUser.Input.Headers = .init()
    ) async throws -> Operations.apiUser.Output {
        try await apiUser(Operations.apiUser.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get rating history of a user
    ///
    /// Read rating history of a user, for all perf types.
    /// There is at most one entry per day.
    /// Format of an entry is `[year, month, day, rating]`.
    /// `month` starts at zero (January).
    ///
    ///
    /// - Remark: HTTP `GET /api/user/{username}/rating-history`.
    /// - Remark: Generated from `#/paths//api/user/{username}/rating-history/get(apiUserRatingHistory)`.
    internal func apiUserRatingHistory(
        path: Operations.apiUserRatingHistory.Input.Path,
        headers: Operations.apiUserRatingHistory.Input.Headers = .init()
    ) async throws -> Operations.apiUserRatingHistory.Output {
        try await apiUserRatingHistory(Operations.apiUserRatingHistory.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get performance statistics of a user
    ///
    /// Read performance statistics of a user, for a single performance.
    /// Similar to the [performance pages on the website](https://lichess.org/@/thibault/perf/bullet).
    ///
    ///
    /// - Remark: HTTP `GET /api/user/{username}/perf/{perf}`.
    /// - Remark: Generated from `#/paths//api/user/{username}/perf/{perf}/get(apiUserPerf)`.
    internal func apiUserPerf(
        path: Operations.apiUserPerf.Input.Path,
        headers: Operations.apiUserPerf.Input.Headers = .init()
    ) async throws -> Operations.apiUserPerf.Output {
        try await apiUserPerf(Operations.apiUserPerf.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get user activity
    ///
    /// Read data to generate the activity feed of a user.
    ///
    ///
    /// - Remark: HTTP `GET /api/user/{username}/activity`.
    /// - Remark: Generated from `#/paths//api/user/{username}/activity/get(apiUserActivity)`.
    internal func apiUserActivity(
        path: Operations.apiUserActivity.Input.Path,
        headers: Operations.apiUserActivity.Input.Headers = .init()
    ) async throws -> Operations.apiUserActivity.Output {
        try await apiUserActivity(Operations.apiUserActivity.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get the daily puzzle
    ///
    /// Get the daily Lichess puzzle in JSON format.
    /// Alternatively, you can [post it in your slack workspace](https://lichess.org/daily-puzzle-slack).
    ///
    ///
    /// - Remark: HTTP `GET /api/puzzle/daily`.
    /// - Remark: Generated from `#/paths//api/puzzle/daily/get(apiPuzzleDaily)`.
    internal func apiPuzzleDaily(headers: Operations.apiPuzzleDaily.Input.Headers = .init()) async throws -> Operations.apiPuzzleDaily.Output {
        try await apiPuzzleDaily(Operations.apiPuzzleDaily.Input(headers: headers))
    }
    /// Get a puzzle by its ID
    ///
    /// Get a single Lichess puzzle in JSON format.
    ///
    /// - Remark: HTTP `GET /api/puzzle/{id}`.
    /// - Remark: Generated from `#/paths//api/puzzle/{id}/get(apiPuzzleId)`.
    internal func apiPuzzleId(
        path: Operations.apiPuzzleId.Input.Path,
        headers: Operations.apiPuzzleId.Input.Headers = .init()
    ) async throws -> Operations.apiPuzzleId.Output {
        try await apiPuzzleId(Operations.apiPuzzleId.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get a new puzzle
    ///
    /// Get a random Lichess puzzle in JSON format.
    ///
    /// If authenticated, only returns puzzles that the user has never seen before.
    ///
    /// **DO NOT** use this endpoint to enumerate puzzles for mass download. Instead, download the [full public puzzle database](https://database.lichess.org/#puzzles).
    ///
    ///
    /// - Remark: HTTP `GET /api/puzzle/next`.
    /// - Remark: Generated from `#/paths//api/puzzle/next/get(apiPuzzleNext)`.
    internal func apiPuzzleNext(
        query: Operations.apiPuzzleNext.Input.Query = .init(),
        headers: Operations.apiPuzzleNext.Input.Headers = .init()
    ) async throws -> Operations.apiPuzzleNext.Output {
        try await apiPuzzleNext(Operations.apiPuzzleNext.Input(
            query: query,
            headers: headers
        ))
    }
    /// Get your puzzle activity
    ///
    /// Download your puzzle activity in [ndjson](#section/Introduction/Streaming-with-ND-JSON) format.
    /// Puzzle activity is sorted by reverse chronological order (most recent first)
    /// We recommend streaming the response, for it can be very long.
    ///
    ///
    /// - Remark: HTTP `GET /api/puzzle/activity`.
    /// - Remark: Generated from `#/paths//api/puzzle/activity/get(apiPuzzleActivity)`.
    internal func apiPuzzleActivity(
        query: Operations.apiPuzzleActivity.Input.Query = .init(),
        headers: Operations.apiPuzzleActivity.Input.Headers = .init()
    ) async throws -> Operations.apiPuzzleActivity.Output {
        try await apiPuzzleActivity(Operations.apiPuzzleActivity.Input(
            query: query,
            headers: headers
        ))
    }
    /// Get puzzles to replay
    ///
    /// Gets the puzzle IDs of remaining puzzles to re-attempt in JSON format.
    ///
    /// - Remark: HTTP `GET /api/puzzle/replay/{days}/{theme}`.
    /// - Remark: Generated from `#/paths//api/puzzle/replay/{days}/{theme}/get(apiPuzzleReplay)`.
    internal func apiPuzzleReplay(
        path: Operations.apiPuzzleReplay.Input.Path,
        headers: Operations.apiPuzzleReplay.Input.Headers = .init()
    ) async throws -> Operations.apiPuzzleReplay.Output {
        try await apiPuzzleReplay(Operations.apiPuzzleReplay.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get your puzzle dashboard
    ///
    /// Download your [puzzle dashboard](https://lichess.org/training/dashboard/30/dashboard) as JSON.
    /// Also includes all puzzle themes played, with aggregated results.
    /// Allows re-creating the [improvement/strengths](https://lichess.org/training/dashboard/30/improvementAreas) interfaces.
    ///
    ///
    /// - Remark: HTTP `GET /api/puzzle/dashboard/{days}`.
    /// - Remark: Generated from `#/paths//api/puzzle/dashboard/{days}/get(apiPuzzleDashboard)`.
    internal func apiPuzzleDashboard(
        path: Operations.apiPuzzleDashboard.Input.Path,
        headers: Operations.apiPuzzleDashboard.Input.Headers = .init()
    ) async throws -> Operations.apiPuzzleDashboard.Output {
        try await apiPuzzleDashboard(Operations.apiPuzzleDashboard.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get the storm dashboard of a player
    ///
    /// Download the [storm dashboard](https://lichess.org/storm/dashboard/mrbasso) of any player as JSON.
    /// Contains the aggregated highscores, and the history of storm runs aggregated by days.
    /// Use `?days=0` if you only care about the highscores.
    ///
    ///
    /// - Remark: HTTP `GET /api/storm/dashboard/{username}`.
    /// - Remark: Generated from `#/paths//api/storm/dashboard/{username}/get(apiStormDashboard)`.
    internal func apiStormDashboard(
        path: Operations.apiStormDashboard.Input.Path,
        query: Operations.apiStormDashboard.Input.Query = .init(),
        headers: Operations.apiStormDashboard.Input.Headers = .init()
    ) async throws -> Operations.apiStormDashboard.Output {
        try await apiStormDashboard(Operations.apiStormDashboard.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create and join a puzzle race
    ///
    /// Create a new private [puzzle race](https://lichess.org/racer).
    /// The Lichess user who creates the race must join the race page,
    /// and manually start the race when enough players have joined.
    /// - <https://lichess.org/racer>
    ///
    ///
    /// - Remark: HTTP `POST /api/racer`.
    /// - Remark: Generated from `#/paths//api/racer/post(racerPost)`.
    internal func racerPost(headers: Operations.racerPost.Input.Headers = .init()) async throws -> Operations.racerPost.Output {
        try await racerPost(Operations.racerPost.Input(headers: headers))
    }
    /// Get puzzle race results
    ///
    /// Get the results of a [puzzle race](https://lichess.org/racer).
    /// Returns information about players, puzzles, and the current status of the race.
    /// - <https://lichess.org/racer>
    ///
    /// Note that Lichess puzzle races are not persisted, and are only available
    /// for 30 minutes. After that delay, they are permanently deleted.
    ///
    ///
    /// - Remark: HTTP `GET /api/racer/{id}`.
    /// - Remark: Generated from `#/paths//api/racer/{id}/get(racerGet)`.
    internal func racerGet(
        path: Operations.racerGet.Input.Path,
        headers: Operations.racerGet.Input.Headers = .init()
    ) async throws -> Operations.racerGet.Output {
        try await racerGet(Operations.racerGet.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get users by ID
    ///
    /// Get up to 300 users by their IDs. Users are returned in the same order as the IDs.
    /// The method is `POST` to allow a longer list of IDs to be sent in the request body.
    /// Please do not try to download all the Lichess users with this endpoint, or any other endpoint.
    /// An API is not a way to fully export a website. We do not provide a full download of the Lichess users.
    /// This endpoint is limited to 8,000 users every 10 minutes, and 120,000 every day.
    ///
    ///
    /// - Remark: HTTP `POST /api/users`.
    /// - Remark: Generated from `#/paths//api/users/post(apiUsers)`.
    internal func apiUsers(
        headers: Operations.apiUsers.Input.Headers = .init(),
        body: Operations.apiUsers.Input.Body
    ) async throws -> Operations.apiUsers.Output {
        try await apiUsers(Operations.apiUsers.Input(
            headers: headers,
            body: body
        ))
    }
    /// Get my profile
    ///
    /// Public information about the logged in user.
    ///
    ///
    /// - Remark: HTTP `GET /api/account`.
    /// - Remark: Generated from `#/paths//api/account/get(accountMe)`.
    internal func accountMe(headers: Operations.accountMe.Input.Headers = .init()) async throws -> Operations.accountMe.Output {
        try await accountMe(Operations.accountMe.Input(headers: headers))
    }
    /// Get my email address
    ///
    /// Read the email address of the logged in user.
    ///
    ///
    /// - Remark: HTTP `GET /api/account/email`.
    /// - Remark: Generated from `#/paths//api/account/email/get(accountEmail)`.
    internal func accountEmail(headers: Operations.accountEmail.Input.Headers = .init()) async throws -> Operations.accountEmail.Output {
        try await accountEmail(Operations.accountEmail.Input(headers: headers))
    }
    /// Get my preferences
    ///
    /// Read the preferences of the logged in user.
    /// - <https://lichess.org/account/preferences/game-display>
    /// - <https://github.com/ornicar/lila/blob/master/modules/pref/src/main/Pref.scala>
    ///
    ///
    /// - Remark: HTTP `GET /api/account/preferences`.
    /// - Remark: Generated from `#/paths//api/account/preferences/get(account)`.
    internal func account(headers: Operations.account.Input.Headers = .init()) async throws -> Operations.account.Output {
        try await account(Operations.account.Input(headers: headers))
    }
    /// Get my kid mode status
    ///
    /// Read the kid mode status of the logged in user.
    /// - <https://lichess.org/account/kid>
    ///
    ///
    /// - Remark: HTTP `GET /api/account/kid`.
    /// - Remark: Generated from `#/paths//api/account/kid/get(accountKid)`.
    internal func accountKid(headers: Operations.accountKid.Input.Headers = .init()) async throws -> Operations.accountKid.Output {
        try await accountKid(Operations.accountKid.Input(headers: headers))
    }
    /// Set my kid mode status
    ///
    /// Set the kid mode status of the logged in user.
    /// - <https://lichess.org/account/kid>
    ///
    ///
    /// - Remark: HTTP `POST /api/account/kid`.
    /// - Remark: Generated from `#/paths//api/account/kid/post(accountKidPost)`.
    internal func accountKidPost(
        query: Operations.accountKidPost.Input.Query,
        headers: Operations.accountKidPost.Input.Headers = .init()
    ) async throws -> Operations.accountKidPost.Output {
        try await accountKidPost(Operations.accountKidPost.Input(
            query: query,
            headers: headers
        ))
    }
    /// Get my timeline
    ///
    /// Get the timeline events of the logged in user.
    ///
    ///
    /// - Remark: HTTP `GET /api/timeline`.
    /// - Remark: Generated from `#/paths//api/timeline/get(timeline)`.
    internal func timeline(
        query: Operations.timeline.Input.Query = .init(),
        headers: Operations.timeline.Input.Headers = .init()
    ) async throws -> Operations.timeline.Output {
        try await timeline(Operations.timeline.Input(
            query: query,
            headers: headers
        ))
    }
    /// Export one game
    ///
    /// Download one game in either PGN or JSON format.
    /// Ongoing games are delayed by a few seconds ranging from 3 to 60 depending on the time control, as to prevent cheat bots from using this API.
    ///
    ///
    /// - Remark: HTTP `GET /game/export/{gameId}`.
    /// - Remark: Generated from `#/paths//game/export/{gameId}/get(gamePgn)`.
    internal func gamePgn(
        path: Operations.gamePgn.Input.Path,
        query: Operations.gamePgn.Input.Query = .init(),
        headers: Operations.gamePgn.Input.Headers = .init()
    ) async throws -> Operations.gamePgn.Output {
        try await gamePgn(Operations.gamePgn.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Export ongoing game of a user
    ///
    /// Download the ongoing game, or the last game played, of a user.
    /// Available in either PGN or JSON format.
    /// Ongoing games are delayed by a few seconds ranging from 3 to 60 depending on the time control, as to prevent cheat bots from using this API.
    ///
    ///
    /// - Remark: HTTP `GET /api/user/{username}/current-game`.
    /// - Remark: Generated from `#/paths//api/user/{username}/current-game/get(apiUserCurrentGame)`.
    internal func apiUserCurrentGame(
        path: Operations.apiUserCurrentGame.Input.Path,
        query: Operations.apiUserCurrentGame.Input.Query = .init(),
        headers: Operations.apiUserCurrentGame.Input.Headers = .init()
    ) async throws -> Operations.apiUserCurrentGame.Output {
        try await apiUserCurrentGame(Operations.apiUserCurrentGame.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Export games of a user
    ///
    /// Download all games of any user in PGN or [ndjson](#section/Introduction/Streaming-with-ND-JSON) format.
    /// Games are sorted by reverse chronological order (most recent first).
    /// We recommend streaming the response, for it can be very long.
    /// <https://lichess.org/@/german11> for instance has more than 500,000 games.
    /// The game stream is throttled, depending on who is making the request:
    ///   - Anonymous request: 20 games per second
    ///   - [OAuth2 authenticated](#section/Introduction/Authentication) request: 30 games per second
    ///   - Authenticated, downloading your own games: 60 games per second
    ///
    ///
    /// - Remark: HTTP `GET /api/games/user/{username}`.
    /// - Remark: Generated from `#/paths//api/games/user/{username}/get(apiGamesUser)`.
    internal func apiGamesUser(
        path: Operations.apiGamesUser.Input.Path,
        query: Operations.apiGamesUser.Input.Query = .init(),
        headers: Operations.apiGamesUser.Input.Headers = .init()
    ) async throws -> Operations.apiGamesUser.Output {
        try await apiGamesUser(Operations.apiGamesUser.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Export games by IDs
    ///
    /// Download games by IDs in PGN or [ndjson](#section/Introduction/Streaming-with-ND-JSON) format, depending on the request `Accept` header.
    /// Games are sorted by reverse chronological order (most recent first)
    /// The method is `POST` so a longer list of IDs can be sent in the request body.
    /// 300 IDs can be submitted.
    /// Ongoing games are delayed by a few seconds ranging from 3 to 60 depending on the time control, as to prevent cheat bots from using this API.
    ///
    ///
    /// - Remark: HTTP `POST /api/games/export/_ids`.
    /// - Remark: Generated from `#/paths//api/games/export/_ids/post(gamesExportIds)`.
    internal func gamesExportIds(
        query: Operations.gamesExportIds.Input.Query = .init(),
        headers: Operations.gamesExportIds.Input.Headers = .init(),
        body: Operations.gamesExportIds.Input.Body
    ) async throws -> Operations.gamesExportIds.Output {
        try await gamesExportIds(Operations.gamesExportIds.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Stream games of users
    ///
    /// Stream the games played between a list of users, in real time.
    /// Only games where **both players** are part of the list are included.
    /// The stream emits an event each time a game is started or finished.
    /// To also get all current ongoing games at the beginning of the stream, use the `withCurrentGames` flag.
    /// Games are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    /// Maximum number of users: 300.
    /// The method is `POST` so a longer list of IDs can be sent in the request body.
    ///
    ///
    /// - Remark: HTTP `POST /api/stream/games-by-users`.
    /// - Remark: Generated from `#/paths//api/stream/games-by-users/post(gamesByUsers)`.
    internal func gamesByUsers(
        query: Operations.gamesByUsers.Input.Query = .init(),
        headers: Operations.gamesByUsers.Input.Headers = .init(),
        body: Operations.gamesByUsers.Input.Body
    ) async throws -> Operations.gamesByUsers.Output {
        try await gamesByUsers(Operations.gamesByUsers.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Stream games by IDs
    ///
    /// Creates a stream of games from an arbitrary streamId, and a list of game IDs.
    /// The stream first outputs the games that already exists, then emits an event each time a game is started or finished.
    /// Games are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    /// Maximum number of games: 500 for anonymous requests, or 1000 for [OAuth2 authenticated](#section/Introduction/Authentication) requests.
    /// While the stream is open, it is possible to [add new game IDs to watch](#operation/gamesByIdsAdd).
    ///
    ///
    /// - Remark: HTTP `POST /api/stream/games/{streamId}`.
    /// - Remark: Generated from `#/paths//api/stream/games/{streamId}/post(gamesByIds)`.
    internal func gamesByIds(
        path: Operations.gamesByIds.Input.Path,
        headers: Operations.gamesByIds.Input.Headers = .init(),
        body: Operations.gamesByIds.Input.Body
    ) async throws -> Operations.gamesByIds.Output {
        try await gamesByIds(Operations.gamesByIds.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Add game IDs to stream
    ///
    /// Add new game IDs for [an existing stream](#operation/gamesByIds) to watch.
    /// The stream will immediately outputs the games that already exists, then emit an event each time a game is started or finished.
    ///
    ///
    /// - Remark: HTTP `POST /api/stream/games/{streamId}/add`.
    /// - Remark: Generated from `#/paths//api/stream/games/{streamId}/add/post(gamesByIdsAdd)`.
    internal func gamesByIdsAdd(
        path: Operations.gamesByIdsAdd.Input.Path,
        headers: Operations.gamesByIdsAdd.Input.Headers = .init(),
        body: Operations.gamesByIdsAdd.Input.Body
    ) async throws -> Operations.gamesByIdsAdd.Output {
        try await gamesByIdsAdd(Operations.gamesByIdsAdd.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get my ongoing games
    ///
    /// Get the ongoing games of the current user.
    /// Real-time and correspondence games are included.
    /// The most urgent games are listed first.
    ///
    ///
    /// - Remark: HTTP `GET /api/account/playing`.
    /// - Remark: Generated from `#/paths//api/account/playing/get(apiAccountPlaying)`.
    internal func apiAccountPlaying(
        query: Operations.apiAccountPlaying.Input.Query = .init(),
        headers: Operations.apiAccountPlaying.Input.Headers = .init()
    ) async throws -> Operations.apiAccountPlaying.Output {
        try await apiAccountPlaying(Operations.apiAccountPlaying.Input(
            query: query,
            headers: headers
        ))
    }
    /// Stream moves of a game
    ///
    /// Stream positions and moves of any ongoing game, in [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    /// A description of the game is sent as a first message.
    /// Then a message is sent each time a move is played.
    /// Finally, a description of the game is sent when it finishes, and the stream is closed.
    /// Ongoing games are delayed by a few seconds ranging from 3 to 60 depending on the time control, as to prevent cheat bots from using this API.
    /// No more than 8 game streams can be opened at the same time from the same IP address.
    ///
    ///
    /// - Remark: HTTP `GET /api/stream/game/{id}`.
    /// - Remark: Generated from `#/paths//api/stream/game/{id}/get(streamGame)`.
    internal func streamGame(
        path: Operations.streamGame.Input.Path,
        headers: Operations.streamGame.Input.Headers = .init()
    ) async throws -> Operations.streamGame.Output {
        try await streamGame(Operations.streamGame.Input(
            path: path,
            headers: headers
        ))
    }
    /// Import one game
    ///
    /// Import a game from PGN. See <https://lichess.org/paste>.
    /// Rate limiting: 200 games per hour for OAuth requests, 100 games per hour for anonymous requests.
    /// To broadcast ongoing games, consider [pushing to a broadcast instead](#operation/broadcastPush).
    /// To analyse a position or a line, just construct an analysis board URL (most standard tags supported if URL-encoded):
    /// [https://lichess.org/analysis/pgn/e4_e5_Nf3_Nc6_Bc4_Bc5_Bxf7+](https://lichess.org/analysis/pgn/e4_e5_Nf3_Nc6_Bc4_Bc5_Bxf7+)
    ///
    ///
    /// - Remark: HTTP `POST /api/import`.
    /// - Remark: Generated from `#/paths//api/import/post(gameImport)`.
    internal func gameImport(
        headers: Operations.gameImport.Input.Headers = .init(),
        body: Operations.gameImport.Input.Body
    ) async throws -> Operations.gameImport.Output {
        try await gameImport(Operations.gameImport.Input(
            headers: headers,
            body: body
        ))
    }
    /// Export your imported games
    ///
    /// Download all games imported by you. Games are exported in PGN format.
    ///
    /// - Remark: HTTP `GET /api/games/export/imports`.
    /// - Remark: Generated from `#/paths//api/games/export/imports/get(apiImportedGamesUser)`.
    internal func apiImportedGamesUser(headers: Operations.apiImportedGamesUser.Input.Headers = .init()) async throws -> Operations.apiImportedGamesUser.Output {
        try await apiImportedGamesUser(Operations.apiImportedGamesUser.Input(headers: headers))
    }
    /// Export your bookmarked games
    ///
    /// Download all games bookmarked by you, in PGN or [ndjson](#section/Introduction/Streaming-with-ND-JSON) format.
    /// Games are sorted by reverse chronological order (most recent first).
    /// We recommend streaming the response, for it can be very long.
    ///
    ///
    /// - Remark: HTTP `GET /api/games/export/bookmarks`.
    /// - Remark: Generated from `#/paths//api/games/export/bookmarks/get(apiExportBookmarks)`.
    internal func apiExportBookmarks(
        query: Operations.apiExportBookmarks.Input.Query = .init(),
        headers: Operations.apiExportBookmarks.Input.Headers = .init()
    ) async throws -> Operations.apiExportBookmarks.Output {
        try await apiExportBookmarks(Operations.apiExportBookmarks.Input(
            query: query,
            headers: headers
        ))
    }
    /// Get current TV games
    ///
    /// Get basic info about the best games being played for each speed and variant,
    /// but also computer games and bot games.
    /// See [lichess.org/tv](https://lichess.org/tv).
    ///
    ///
    /// - Remark: HTTP `GET /api/tv/channels`.
    /// - Remark: Generated from `#/paths//api/tv/channels/get(tvChannels)`.
    internal func tvChannels(headers: Operations.tvChannels.Input.Headers = .init()) async throws -> Operations.tvChannels.Output {
        try await tvChannels(Operations.tvChannels.Input(headers: headers))
    }
    /// Stream current TV game
    ///
    /// Stream positions and moves of the current [TV game](https://lichess.org/tv) in [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    /// Try it with `curl https://lichess.org/api/tv/feed`.
    ///
    ///
    /// - Remark: HTTP `GET /api/tv/feed`.
    /// - Remark: Generated from `#/paths//api/tv/feed/get(tvFeed)`.
    internal func tvFeed(headers: Operations.tvFeed.Input.Headers = .init()) async throws -> Operations.tvFeed.Output {
        try await tvFeed(Operations.tvFeed.Input(headers: headers))
    }
    /// Stream current TV game of a TV channel
    ///
    /// Stream positions and moves of a current [TV channel's game](https://lichess.org/tv/rapid) in [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    /// Try it with `curl https://lichess.org/api/tv/rapid/feed`.
    ///
    ///
    /// - Remark: HTTP `GET /api/tv/{channel}/feed`.
    /// - Remark: Generated from `#/paths//api/tv/{channel}/feed/get(tvChannelFeed)`.
    internal func tvChannelFeed(
        path: Operations.tvChannelFeed.Input.Path,
        headers: Operations.tvChannelFeed.Input.Headers = .init()
    ) async throws -> Operations.tvChannelFeed.Output {
        try await tvChannelFeed(Operations.tvChannelFeed.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get best ongoing games of a TV channel
    ///
    /// Get a list of ongoing games for a given TV channel. Similar to [lichess.org/games](https://lichess.org/games).
    /// Available in PGN or [ndjson](#section/Introduction/Streaming-with-ND-JSON) format, depending on the request `Accept` header.
    ///
    ///
    /// - Remark: HTTP `GET /api/tv/{channel}`.
    /// - Remark: Generated from `#/paths//api/tv/{channel}/get(tvChannelGames)`.
    internal func tvChannelGames(
        path: Operations.tvChannelGames.Input.Path,
        query: Operations.tvChannelGames.Input.Query = .init(),
        headers: Operations.tvChannelGames.Input.Headers = .init()
    ) async throws -> Operations.tvChannelGames.Output {
        try await tvChannelGames(Operations.tvChannelGames.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get current tournaments
    ///
    /// Get recently active and finished tournaments.
    /// This API is used to display the [Lichess tournament schedule](https://lichess.org/tournament).
    ///
    ///
    /// - Remark: HTTP `GET /api/tournament`.
    /// - Remark: Generated from `#/paths//api/tournament/get(apiTournament)`.
    internal func apiTournament(headers: Operations.apiTournament.Input.Headers = .init()) async throws -> Operations.apiTournament.Output {
        try await apiTournament(Operations.apiTournament.Input(headers: headers))
    }
    /// Create a new Arena tournament
    ///
    /// Create a public or private Arena tournament.
    /// This endpoint mirrors the form on <https://lichess.org/tournament/new>.
    /// You can create up to 12 public tournaments per day, or 24 private tournaments.
    /// A team battle can be created by specifying the `teamBattleByTeam` argument.
    /// Additional restrictions:
    ///   - clockTime + clockIncrement > 0
    ///   - 15s and 0+1 variant tournaments cannot be rated
    ///   - Clock time in comparison to tournament length must be reasonable: 3 <= (minutes * 60) / (96 * clockTime + 48 * clockIncrement + 15) <= 150
    ///
    ///
    /// - Remark: HTTP `POST /api/tournament`.
    /// - Remark: Generated from `#/paths//api/tournament/post(apiTournamentPost)`.
    internal func apiTournamentPost(
        headers: Operations.apiTournamentPost.Input.Headers = .init(),
        body: Operations.apiTournamentPost.Input.Body
    ) async throws -> Operations.apiTournamentPost.Output {
        try await apiTournamentPost(Operations.apiTournamentPost.Input(
            headers: headers,
            body: body
        ))
    }
    /// Get info about an Arena tournament
    ///
    /// Get detailed info about recently finished, current, or upcoming tournament's duels, player standings, and other info.
    ///
    ///
    /// - Remark: HTTP `GET /api/tournament/{id}`.
    /// - Remark: Generated from `#/paths//api/tournament/{id}/get(tournament)`.
    internal func tournament(
        path: Operations.tournament.Input.Path,
        query: Operations.tournament.Input.Query = .init(),
        headers: Operations.tournament.Input.Headers = .init()
    ) async throws -> Operations.tournament.Output {
        try await tournament(Operations.tournament.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Update an Arena tournament
    ///
    /// Update an Arena tournament.
    /// Be mindful not to make important changes to ongoing tournaments.
    /// Can be used to update a team battle.
    /// Additional restrictions:
    ///   - clockTime + clockIncrement > 0
    ///   - 15s and 0+1 variant tournaments cannot be rated
    ///   - Clock time in comparison to tournament length must be reasonable: 3 <= (minutes * 60) / (96 * clockTime + 48 * clockIncrement + 15) <= 150
    ///
    ///
    /// - Remark: HTTP `POST /api/tournament/{id}`.
    /// - Remark: Generated from `#/paths//api/tournament/{id}/post(apiTournamentUpdate)`.
    internal func apiTournamentUpdate(
        path: Operations.apiTournamentUpdate.Input.Path,
        headers: Operations.apiTournamentUpdate.Input.Headers = .init(),
        body: Operations.apiTournamentUpdate.Input.Body
    ) async throws -> Operations.apiTournamentUpdate.Output {
        try await apiTournamentUpdate(Operations.apiTournamentUpdate.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Join an Arena tournament
    ///
    /// Join an Arena tournament, possibly with a password and/or a team.
    /// Also unpauses if you had previously [paused](#operation/apiTournamentWithdraw) the tournament.
    ///
    ///
    /// - Remark: HTTP `POST /api/tournament/{id}/join`.
    /// - Remark: Generated from `#/paths//api/tournament/{id}/join/post(apiTournamentJoin)`.
    internal func apiTournamentJoin(
        path: Operations.apiTournamentJoin.Input.Path,
        headers: Operations.apiTournamentJoin.Input.Headers = .init(),
        body: Operations.apiTournamentJoin.Input.Body? = nil
    ) async throws -> Operations.apiTournamentJoin.Output {
        try await apiTournamentJoin(Operations.apiTournamentJoin.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Pause or leave an Arena tournament
    ///
    /// Leave a future Arena tournament, or take a break on an ongoing Arena tournament.
    /// It's possible to join again later. Points and streaks are preserved.
    ///
    ///
    /// - Remark: HTTP `POST /api/tournament/{id}/withdraw`.
    /// - Remark: Generated from `#/paths//api/tournament/{id}/withdraw/post(apiTournamentWithdraw)`.
    internal func apiTournamentWithdraw(
        path: Operations.apiTournamentWithdraw.Input.Path,
        headers: Operations.apiTournamentWithdraw.Input.Headers = .init()
    ) async throws -> Operations.apiTournamentWithdraw.Output {
        try await apiTournamentWithdraw(Operations.apiTournamentWithdraw.Input(
            path: path,
            headers: headers
        ))
    }
    /// Terminate an Arena tournament
    ///
    /// Terminate an Arena tournament
    ///
    ///
    /// - Remark: HTTP `POST /api/tournament/{id}/terminate`.
    /// - Remark: Generated from `#/paths//api/tournament/{id}/terminate/post(apiTournamentTerminate)`.
    internal func apiTournamentTerminate(
        path: Operations.apiTournamentTerminate.Input.Path,
        headers: Operations.apiTournamentTerminate.Input.Headers = .init()
    ) async throws -> Operations.apiTournamentTerminate.Output {
        try await apiTournamentTerminate(Operations.apiTournamentTerminate.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update a team battle
    ///
    /// Set the teams and number of leaders of a team battle.
    /// To update the other attributes of a team battle, use the [tournament update endpoint](#operation/apiTournamentUpdate).
    ///
    ///
    /// - Remark: HTTP `POST /api/tournament/team-battle/{id}`.
    /// - Remark: Generated from `#/paths//api/tournament/team-battle/{id}/post(apiTournamentTeamBattlePost)`.
    internal func apiTournamentTeamBattlePost(
        path: Operations.apiTournamentTeamBattlePost.Input.Path,
        headers: Operations.apiTournamentTeamBattlePost.Input.Headers = .init(),
        body: Operations.apiTournamentTeamBattlePost.Input.Body
    ) async throws -> Operations.apiTournamentTeamBattlePost.Output {
        try await apiTournamentTeamBattlePost(Operations.apiTournamentTeamBattlePost.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Export games of an Arena tournament
    ///
    /// Download games of a tournament in PGN or [ndjson](#section/Introduction/Streaming-with-ND-JSON) format.
    /// Games are sorted by reverse chronological order (most recent first).
    /// The game stream is throttled, depending on who is making the request:
    ///   - Anonymous request: 20 games per second
    ///   - [OAuth2 authenticated](#section/Introduction/Authentication) request: 30 games per second
    ///
    ///
    /// - Remark: HTTP `GET /api/tournament/{id}/games`.
    /// - Remark: Generated from `#/paths//api/tournament/{id}/games/get(gamesByTournament)`.
    internal func gamesByTournament(
        path: Operations.gamesByTournament.Input.Path,
        query: Operations.gamesByTournament.Input.Query = .init(),
        headers: Operations.gamesByTournament.Input.Headers = .init()
    ) async throws -> Operations.gamesByTournament.Output {
        try await gamesByTournament(Operations.gamesByTournament.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get results of an Arena tournament
    ///
    /// Players of an Arena tournament, with their score and performance, sorted by rank (best first).
    /// **Players are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON)**, i.e. one JSON object per line.
    /// If called on an ongoing tournament, results can be inconsistent
    /// due to ranking changes while the players are being streamed.
    /// Use on finished tournaments for guaranteed consistency.
    ///
    ///
    /// - Remark: HTTP `GET /api/tournament/{id}/results`.
    /// - Remark: Generated from `#/paths//api/tournament/{id}/results/get(resultsByTournament)`.
    internal func resultsByTournament(
        path: Operations.resultsByTournament.Input.Path,
        query: Operations.resultsByTournament.Input.Query = .init(),
        headers: Operations.resultsByTournament.Input.Headers = .init()
    ) async throws -> Operations.resultsByTournament.Output {
        try await resultsByTournament(Operations.resultsByTournament.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get team standing of a team battle
    ///
    /// Teams of a team battle tournament, with top players, sorted by rank (best first).
    ///
    ///
    /// - Remark: HTTP `GET /api/tournament/{id}/teams`.
    /// - Remark: Generated from `#/paths//api/tournament/{id}/teams/get(teamsByTournament)`.
    internal func teamsByTournament(
        path: Operations.teamsByTournament.Input.Path,
        headers: Operations.teamsByTournament.Input.Headers = .init()
    ) async throws -> Operations.teamsByTournament.Output {
        try await teamsByTournament(Operations.teamsByTournament.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get tournaments created by a user
    ///
    /// Get all tournaments created by a given user.
    /// Tournaments are sorted by reverse chronological order of start date (last starting first).
    /// Tournaments are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    /// The stream is throttled, depending on who is making the request:
    ///   - Anonymous request: 20 tournaments per second
    ///   - [OAuth2 authenticated](#section/Introduction/Authentication) request: 30 tournaments per second
    ///   - Authenticated, downloading your own tournaments: 50 tournaments per second
    ///
    ///
    /// - Remark: HTTP `GET /api/user/{username}/tournament/created`.
    /// - Remark: Generated from `#/paths//api/user/{username}/tournament/created/get(apiUserNameTournamentCreated)`.
    internal func apiUserNameTournamentCreated(
        path: Operations.apiUserNameTournamentCreated.Input.Path,
        query: Operations.apiUserNameTournamentCreated.Input.Query = .init(),
        headers: Operations.apiUserNameTournamentCreated.Input.Headers = .init()
    ) async throws -> Operations.apiUserNameTournamentCreated.Output {
        try await apiUserNameTournamentCreated(Operations.apiUserNameTournamentCreated.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get tournaments played by a user
    ///
    /// Get all tournaments played by a given user.
    /// Tournaments are sorted by reverse chronological order of start date (last played first).
    /// Tournaments are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    /// The stream is throttled, depending on who is making the request:
    ///   - Anonymous request: 20 tournaments per second
    ///   - [OAuth2 authenticated](#section/Introduction/Authentication) request: 30 tournaments per second
    ///   - Authenticated, downloading your own tournaments: 50 tournaments per second
    ///
    ///
    /// - Remark: HTTP `GET /api/user/{username}/tournament/played`.
    /// - Remark: Generated from `#/paths//api/user/{username}/tournament/played/get(apiUserNameTournamentPlayed)`.
    internal func apiUserNameTournamentPlayed(
        path: Operations.apiUserNameTournamentPlayed.Input.Path,
        query: Operations.apiUserNameTournamentPlayed.Input.Query = .init(),
        headers: Operations.apiUserNameTournamentPlayed.Input.Headers = .init()
    ) async throws -> Operations.apiUserNameTournamentPlayed.Output {
        try await apiUserNameTournamentPlayed(Operations.apiUserNameTournamentPlayed.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create a new Swiss tournament
    ///
    /// Create a Swiss tournament for your team.
    /// This endpoint mirrors the Swiss tournament form from your team pagee.
    /// You can create up to 12 tournaments per day.
    /// Additional restrictions:
    ///   - clock.limit + clock.increment > 0
    ///   - 15s and 0+1 variant tournaments cannot be rated
    ///
    ///
    /// - Remark: HTTP `POST /api/swiss/new/{teamId}`.
    /// - Remark: Generated from `#/paths//api/swiss/new/{teamId}/post(apiSwissNew)`.
    internal func apiSwissNew(
        path: Operations.apiSwissNew.Input.Path,
        headers: Operations.apiSwissNew.Input.Headers = .init(),
        body: Operations.apiSwissNew.Input.Body
    ) async throws -> Operations.apiSwissNew.Output {
        try await apiSwissNew(Operations.apiSwissNew.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get info about a Swiss tournament
    ///
    /// Get detailed info about a Swiss tournament.
    ///
    ///
    /// - Remark: HTTP `GET /api/swiss/{id}`.
    /// - Remark: Generated from `#/paths//api/swiss/{id}/get(swiss)`.
    internal func swiss(
        path: Operations.swiss.Input.Path,
        headers: Operations.swiss.Input.Headers = .init()
    ) async throws -> Operations.swiss.Output {
        try await swiss(Operations.swiss.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update a Swiss tournament
    ///
    /// Update a Swiss tournament.
    /// Be mindful not to make important changes to ongoing tournaments.
    /// Additional restrictions:
    ///   - clock.limit + clock.increment > 0
    ///   - 15s and 0+1 variant tournaments cannot be rated
    ///
    ///
    /// - Remark: HTTP `POST /api/swiss/{id}/edit`.
    /// - Remark: Generated from `#/paths//api/swiss/{id}/edit/post(apiSwissUpdate)`.
    internal func apiSwissUpdate(
        path: Operations.apiSwissUpdate.Input.Path,
        headers: Operations.apiSwissUpdate.Input.Headers = .init(),
        body: Operations.apiSwissUpdate.Input.Body
    ) async throws -> Operations.apiSwissUpdate.Output {
        try await apiSwissUpdate(Operations.apiSwissUpdate.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Manually schedule the next round
    ///
    /// Manually schedule the next round date and time of a Swiss tournament.
    /// This sets the `roundInterval` field to `99999999`, i.e. manual scheduling.
    /// All further rounds will need to be manually scheduled, unless the `roundInterval` field is changed back to automatic scheduling.
    ///
    ///
    /// - Remark: HTTP `POST /api/swiss/{id}/schedule-next-round`.
    /// - Remark: Generated from `#/paths//api/swiss/{id}/schedule-next-round/post(apiSwissScheduleNextRound)`.
    internal func apiSwissScheduleNextRound(
        path: Operations.apiSwissScheduleNextRound.Input.Path,
        headers: Operations.apiSwissScheduleNextRound.Input.Headers = .init(),
        body: Operations.apiSwissScheduleNextRound.Input.Body
    ) async throws -> Operations.apiSwissScheduleNextRound.Output {
        try await apiSwissScheduleNextRound(Operations.apiSwissScheduleNextRound.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Join a Swiss tournament
    ///
    /// Join a Swiss tournament, possibly with a password.
    ///
    ///
    /// - Remark: HTTP `POST /api/swiss/{id}/join`.
    /// - Remark: Generated from `#/paths//api/swiss/{id}/join/post(apiSwissJoin)`.
    internal func apiSwissJoin(
        path: Operations.apiSwissJoin.Input.Path,
        headers: Operations.apiSwissJoin.Input.Headers = .init(),
        body: Operations.apiSwissJoin.Input.Body? = nil
    ) async throws -> Operations.apiSwissJoin.Output {
        try await apiSwissJoin(Operations.apiSwissJoin.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Pause or leave a swiss tournament
    ///
    /// Leave a future Swiss tournament, or take a break on an ongoing Swiss tournament.
    /// It's possible to join again later. Points are preserved.
    ///
    ///
    /// - Remark: HTTP `POST /api/swiss/{id}/withdraw`.
    /// - Remark: Generated from `#/paths//api/swiss/{id}/withdraw/post(apiSwissWithdraw)`.
    internal func apiSwissWithdraw(
        path: Operations.apiSwissWithdraw.Input.Path,
        headers: Operations.apiSwissWithdraw.Input.Headers = .init()
    ) async throws -> Operations.apiSwissWithdraw.Output {
        try await apiSwissWithdraw(Operations.apiSwissWithdraw.Input(
            path: path,
            headers: headers
        ))
    }
    /// Terminate a Swiss tournament
    ///
    /// Terminate a Swiss tournament
    ///
    ///
    /// - Remark: HTTP `POST /api/swiss/{id}/terminate`.
    /// - Remark: Generated from `#/paths//api/swiss/{id}/terminate/post(apiSwissTerminate)`.
    internal func apiSwissTerminate(
        path: Operations.apiSwissTerminate.Input.Path,
        headers: Operations.apiSwissTerminate.Input.Headers = .init()
    ) async throws -> Operations.apiSwissTerminate.Output {
        try await apiSwissTerminate(Operations.apiSwissTerminate.Input(
            path: path,
            headers: headers
        ))
    }
    /// Export TRF of a Swiss tournament
    ///
    /// Download a tournament in the Tournament Report File format, the FIDE standard.
    /// Documentation: <https://www.fide.com/FIDE/handbook/C04Annex2_TRF16.pdf>
    /// Example: <https://lichess.org/swiss/j8rtJ5GL.trf>
    ///
    ///
    /// - Remark: HTTP `GET /swiss/{id}.trf`.
    /// - Remark: Generated from `#/paths//swiss/{id}.trf/get(swissTrf)`.
    internal func swissTrf(
        path: Operations.swissTrf.Input.Path,
        headers: Operations.swissTrf.Input.Headers = .init()
    ) async throws -> Operations.swissTrf.Output {
        try await swissTrf(Operations.swissTrf.Input(
            path: path,
            headers: headers
        ))
    }
    /// Export games of a Swiss tournament
    ///
    /// Download games of a swiss tournament in PGN or [ndjson](#section/Introduction/Streaming-with-ND-JSON) format.
    /// Games are sorted by chronological order.
    /// The game stream is throttled, depending on who is making the request:
    ///   - Anonymous request: 20 games per second
    ///   - [OAuth2 authenticated](#section/Introduction/Authentication) request: 30 games per second
    ///
    ///
    /// - Remark: HTTP `GET /api/swiss/{id}/games`.
    /// - Remark: Generated from `#/paths//api/swiss/{id}/games/get(gamesBySwiss)`.
    internal func gamesBySwiss(
        path: Operations.gamesBySwiss.Input.Path,
        query: Operations.gamesBySwiss.Input.Query = .init(),
        headers: Operations.gamesBySwiss.Input.Headers = .init()
    ) async throws -> Operations.gamesBySwiss.Output {
        try await gamesBySwiss(Operations.gamesBySwiss.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get results of a swiss tournament
    ///
    /// Players of a swiss tournament, with their score and performance, sorted by rank (best first).
    /// Players are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    /// If called on an ongoing tournament, results can be inconsistent
    /// due to ranking changes while the players are being streamed.
    /// Use on finished tournaments for guaranteed consistency.
    ///
    ///
    /// - Remark: HTTP `GET /api/swiss/{id}/results`.
    /// - Remark: Generated from `#/paths//api/swiss/{id}/results/get(resultsBySwiss)`.
    internal func resultsBySwiss(
        path: Operations.resultsBySwiss.Input.Path,
        query: Operations.resultsBySwiss.Input.Query = .init(),
        headers: Operations.resultsBySwiss.Input.Headers = .init()
    ) async throws -> Operations.resultsBySwiss.Output {
        try await resultsBySwiss(Operations.resultsBySwiss.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get team swiss tournaments
    ///
    /// Get all swiss tournaments of a team.
    /// Tournaments are sorted by reverse chronological order of start date (last starting first).
    /// Tournaments are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    ///
    ///
    /// - Remark: HTTP `GET /api/team/{teamId}/swiss`.
    /// - Remark: Generated from `#/paths//api/team/{teamId}/swiss/get(apiTeamSwiss)`.
    internal func apiTeamSwiss(
        path: Operations.apiTeamSwiss.Input.Path,
        query: Operations.apiTeamSwiss.Input.Query = .init(),
        headers: Operations.apiTeamSwiss.Input.Headers = .init()
    ) async throws -> Operations.apiTeamSwiss.Output {
        try await apiTeamSwiss(Operations.apiTeamSwiss.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Export one study chapter
    ///
    /// Download one study chapter in PGN format.
    ///
    ///
    /// - Remark: HTTP `GET /api/study/{studyId}/{chapterId}.pgn`.
    /// - Remark: Generated from `#/paths//api/study/{studyId}/{chapterId}.pgn/get(studyChapterPgn)`.
    internal func studyChapterPgn(
        path: Operations.studyChapterPgn.Input.Path,
        query: Operations.studyChapterPgn.Input.Query = .init(),
        headers: Operations.studyChapterPgn.Input.Headers = .init()
    ) async throws -> Operations.studyChapterPgn.Output {
        try await studyChapterPgn(Operations.studyChapterPgn.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Export all chapters
    ///
    /// Download all chapters of a study in PGN format.
    ///
    ///
    /// - Remark: HTTP `GET /api/study/{studyId}.pgn`.
    /// - Remark: Generated from `#/paths//api/study/{studyId}.pgn/get(studyAllChaptersPgn)`.
    internal func studyAllChaptersPgn(
        path: Operations.studyAllChaptersPgn.Input.Path,
        query: Operations.studyAllChaptersPgn.Input.Query = .init(),
        headers: Operations.studyAllChaptersPgn.Input.Headers = .init()
    ) async throws -> Operations.studyAllChaptersPgn.Output {
        try await studyAllChaptersPgn(Operations.studyAllChaptersPgn.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Study metadata
    ///
    /// Only get the study headers, including `Last-Modified`.
    ///
    ///
    /// - Remark: HTTP `HEAD /api/study/{studyId}.pgn`.
    /// - Remark: Generated from `#/paths//api/study/{studyId}.pgn/head(studyAllChaptersHead)`.
    internal func studyAllChaptersHead(path: Operations.studyAllChaptersHead.Input.Path) async throws -> Operations.studyAllChaptersHead.Output {
        try await studyAllChaptersHead(Operations.studyAllChaptersHead.Input(path: path))
    }
    /// Import PGN into a study
    ///
    /// Imports arbitrary PGN into an existing [study](https://lichess.org/study). Creates a new chapter in the study.
    /// If the PGN contains multiple games (separated by 2 or more newlines)
    /// then multiple chapters will be created within the study.
    /// Note that a study can contain at most 64 chapters.
    ///
    ///
    /// - Remark: HTTP `POST /api/study/{studyId}/import-pgn`.
    /// - Remark: Generated from `#/paths//api/study/{studyId}/import-pgn/post(apiStudyImportPGN)`.
    internal func apiStudyImportPGN(
        path: Operations.apiStudyImportPGN.Input.Path,
        headers: Operations.apiStudyImportPGN.Input.Headers = .init(),
        body: Operations.apiStudyImportPGN.Input.Body
    ) async throws -> Operations.apiStudyImportPGN.Output {
        try await apiStudyImportPGN(Operations.apiStudyImportPGN.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Export all studies of a user
    ///
    /// Download all chapters of all studies of a user in PGN format.
    /// If authenticated, then all public, unlisted, and private studies are included.
    /// If not, only public (non-unlisted) studies are included.
    ///
    ///
    /// - Remark: HTTP `GET /study/by/{username}/export.pgn`.
    /// - Remark: Generated from `#/paths//study/by/{username}/export.pgn/get(studyExportAllPgn)`.
    internal func studyExportAllPgn(
        path: Operations.studyExportAllPgn.Input.Path,
        query: Operations.studyExportAllPgn.Input.Query = .init(),
        headers: Operations.studyExportAllPgn.Input.Headers = .init()
    ) async throws -> Operations.studyExportAllPgn.Output {
        try await studyExportAllPgn(Operations.studyExportAllPgn.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List studies of a user
    ///
    /// Get metadata (name and dates) of all studies of a user.
    /// If authenticated, then all public, unlisted, and private studies are included.
    /// If not, only public (non-unlisted) studies are included.
    /// Studies are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    ///
    ///
    /// - Remark: HTTP `GET /api/study/by/{username}`.
    /// - Remark: Generated from `#/paths//api/study/by/{username}/get(studyListMetadata)`.
    internal func studyListMetadata(
        path: Operations.studyListMetadata.Input.Path,
        headers: Operations.studyListMetadata.Input.Headers = .init()
    ) async throws -> Operations.studyListMetadata.Output {
        try await studyListMetadata(Operations.studyListMetadata.Input(
            path: path,
            headers: headers
        ))
    }
    /// Delete a study chapter
    ///
    /// Delete a chapter of a study you own. This is definitive.
    /// A study must have at least one chapter; so if you delete the last chapter,
    /// an empty one will be automatically created to replace it.
    ///
    ///
    /// - Remark: HTTP `DELETE /api/study/{studyId}/{chapterId}`.
    /// - Remark: Generated from `#/paths//api/study/{studyId}/{chapterId}/delete(apiStudyStudyIdChapterIdDelete)`.
    internal func apiStudyStudyIdChapterIdDelete(path: Operations.apiStudyStudyIdChapterIdDelete.Input.Path) async throws -> Operations.apiStudyStudyIdChapterIdDelete.Output {
        try await apiStudyStudyIdChapterIdDelete(Operations.apiStudyStudyIdChapterIdDelete.Input(path: path))
    }
    /// Get official broadcasts
    ///
    /// Returns ongoing official broadcasts sorted by tier. 
    /// After that, returns finished broadcasts sorted by most recent sync time.
    /// Broadcasts are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    ///
    ///
    /// - Remark: HTTP `GET /api/broadcast`.
    /// - Remark: Generated from `#/paths//api/broadcast/get(broadcastsOfficial)`.
    internal func broadcastsOfficial(
        query: Operations.broadcastsOfficial.Input.Query = .init(),
        headers: Operations.broadcastsOfficial.Input.Headers = .init()
    ) async throws -> Operations.broadcastsOfficial.Output {
        try await broadcastsOfficial(Operations.broadcastsOfficial.Input(
            query: query,
            headers: headers
        ))
    }
    /// Get paginated top broadcast previews
    ///
    /// The same data, in the same order, as can be seen on [https://lichess.org/broadcast](/broadcast).
    ///
    ///
    /// - Remark: HTTP `GET /api/broadcast/top`.
    /// - Remark: Generated from `#/paths//api/broadcast/top/get(broadcastsTop)`.
    internal func broadcastsTop(
        query: Operations.broadcastsTop.Input.Query = .init(),
        headers: Operations.broadcastsTop.Input.Headers = .init()
    ) async throws -> Operations.broadcastsTop.Output {
        try await broadcastsTop(Operations.broadcastsTop.Input(
            query: query,
            headers: headers
        ))
    }
    /// Get broadcasts created by a user
    ///
    /// Get all incoming, ongoing, and finished official broadcasts.
    /// The broadcasts are sorted by created date, most recent first.
    ///
    ///
    /// - Remark: HTTP `GET /api/broadcast/by/{username}`.
    /// - Remark: Generated from `#/paths//api/broadcast/by/{username}/get(broadcastsByUser)`.
    internal func broadcastsByUser(
        path: Operations.broadcastsByUser.Input.Path,
        query: Operations.broadcastsByUser.Input.Query = .init(),
        headers: Operations.broadcastsByUser.Input.Headers = .init()
    ) async throws -> Operations.broadcastsByUser.Output {
        try await broadcastsByUser(Operations.broadcastsByUser.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Search broadcasts
    ///
    /// Search across recent official broadcasts.
    ///
    ///
    /// - Remark: HTTP `GET /api/broadcast/search`.
    /// - Remark: Generated from `#/paths//api/broadcast/search/get(broadcastsSearch)`.
    internal func broadcastsSearch(
        query: Operations.broadcastsSearch.Input.Query = .init(),
        headers: Operations.broadcastsSearch.Input.Headers = .init()
    ) async throws -> Operations.broadcastsSearch.Output {
        try await broadcastsSearch(Operations.broadcastsSearch.Input(
            query: query,
            headers: headers
        ))
    }
    /// Create a broadcast tournament
    ///
    /// Create a new broadcast tournament to relay external games.
    /// This endpoint accepts the same form data as the [web form](https://lichess.org/broadcast/new).
    ///
    ///
    /// - Remark: HTTP `POST /broadcast/new`.
    /// - Remark: Generated from `#/paths//broadcast/new/post(broadcastTourCreate)`.
    internal func broadcastTourCreate(
        headers: Operations.broadcastTourCreate.Input.Headers = .init(),
        body: Operations.broadcastTourCreate.Input.Body
    ) async throws -> Operations.broadcastTourCreate.Output {
        try await broadcastTourCreate(Operations.broadcastTourCreate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Get a broadcast tournament
    ///
    /// Get information about a broadcast tournament.
    ///
    ///
    /// - Remark: HTTP `GET /api/broadcast/{broadcastTournamentId}`.
    /// - Remark: Generated from `#/paths//api/broadcast/{broadcastTournamentId}/get(broadcastTourGet)`.
    internal func broadcastTourGet(
        path: Operations.broadcastTourGet.Input.Path,
        headers: Operations.broadcastTourGet.Input.Headers = .init()
    ) async throws -> Operations.broadcastTourGet.Output {
        try await broadcastTourGet(Operations.broadcastTourGet.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get players of a broadcast
    ///
    /// Get the list of players of a broadcast tournament, if available.
    ///
    ///
    /// - Remark: HTTP `GET /broadcast/{broadcastTournamentId}/players`.
    /// - Remark: Generated from `#/paths//broadcast/{broadcastTournamentId}/players/get(broadcastPlayersGet)`.
    internal func broadcastPlayersGet(
        path: Operations.broadcastPlayersGet.Input.Path,
        headers: Operations.broadcastPlayersGet.Input.Headers = .init()
    ) async throws -> Operations.broadcastPlayersGet.Output {
        try await broadcastPlayersGet(Operations.broadcastPlayersGet.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update your broadcast tournament
    ///
    /// Update information about a broadcast tournament that you created.
    /// This endpoint accepts the same form data as the web form.
    /// All fields must be populated with data. Missing fields will override the broadcast with empty data.
    ///
    ///
    /// - Remark: HTTP `POST /broadcast/{broadcastTournamentId}/edit`.
    /// - Remark: Generated from `#/paths//broadcast/{broadcastTournamentId}/edit/post(broadcastTourUpdate)`.
    internal func broadcastTourUpdate(
        path: Operations.broadcastTourUpdate.Input.Path,
        headers: Operations.broadcastTourUpdate.Input.Headers = .init(),
        body: Operations.broadcastTourUpdate.Input.Body
    ) async throws -> Operations.broadcastTourUpdate.Output {
        try await broadcastTourUpdate(Operations.broadcastTourUpdate.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Create a broadcast round
    ///
    /// Create a new broadcast round to relay external games.
    /// This endpoint accepts the same form data as the web form.
    ///
    /// Choose one between `syncUrl`, `syncUrls`, `syncIds` and `syncUsers`, if it is missing, the broadcast needs to be fed by [pushing PGN to it](#operation/broadcastPush)
    ///
    ///
    /// - Remark: HTTP `POST /broadcast/{broadcastTournamentId}/new`.
    /// - Remark: Generated from `#/paths//broadcast/{broadcastTournamentId}/new/post(broadcastRoundCreate)`.
    internal func broadcastRoundCreate(
        path: Operations.broadcastRoundCreate.Input.Path,
        headers: Operations.broadcastRoundCreate.Input.Headers = .init(),
        body: Operations.broadcastRoundCreate.Input.Body
    ) async throws -> Operations.broadcastRoundCreate.Output {
        try await broadcastRoundCreate(Operations.broadcastRoundCreate.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get a broadcast round
    ///
    /// Get information about a broadcast round.
    ///
    ///
    /// - Remark: HTTP `GET /api/broadcast/{broadcastTournamentSlug}/{broadcastRoundSlug}/{broadcastRoundId}`.
    /// - Remark: Generated from `#/paths//api/broadcast/{broadcastTournamentSlug}/{broadcastRoundSlug}/{broadcastRoundId}/get(broadcastRoundGet)`.
    internal func broadcastRoundGet(
        path: Operations.broadcastRoundGet.Input.Path,
        headers: Operations.broadcastRoundGet.Input.Headers = .init()
    ) async throws -> Operations.broadcastRoundGet.Output {
        try await broadcastRoundGet(Operations.broadcastRoundGet.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update a broadcast round
    ///
    /// Update information about a broadcast round.
    /// This endpoint accepts the same form data as the web form.
    /// All fields must be populated with data. Missing fields will override the broadcast with empty data.
    /// For instance, if you omit `startDate`, then any pre-existing start date will be removed.
    ///
    ///
    /// - Remark: HTTP `POST /broadcast/round/{broadcastRoundId}/edit`.
    /// - Remark: Generated from `#/paths//broadcast/round/{broadcastRoundId}/edit/post(broadcastRoundUpdate)`.
    internal func broadcastRoundUpdate(
        path: Operations.broadcastRoundUpdate.Input.Path,
        headers: Operations.broadcastRoundUpdate.Input.Headers = .init(),
        body: Operations.broadcastRoundUpdate.Input.Body
    ) async throws -> Operations.broadcastRoundUpdate.Output {
        try await broadcastRoundUpdate(Operations.broadcastRoundUpdate.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Reset a broadcast round
    ///
    /// Remove any games from the broadcast round and reset it to its initial state.
    ///
    ///
    /// - Remark: HTTP `POST /api/broadcast/round/{broadcastRoundId}/reset`.
    /// - Remark: Generated from `#/paths//api/broadcast/round/{broadcastRoundId}/reset/post(broadcastRoundReset)`.
    internal func broadcastRoundReset(
        path: Operations.broadcastRoundReset.Input.Path,
        headers: Operations.broadcastRoundReset.Input.Headers = .init()
    ) async throws -> Operations.broadcastRoundReset.Output {
        try await broadcastRoundReset(Operations.broadcastRoundReset.Input(
            path: path,
            headers: headers
        ))
    }
    /// Push PGN to a broadcast round
    ///
    /// Update a broadcast with new PGN.
    /// Only for broadcasts without a source URL.
    ///
    ///
    /// - Remark: HTTP `POST /api/broadcast/round/{broadcastRoundId}/push`.
    /// - Remark: Generated from `#/paths//api/broadcast/round/{broadcastRoundId}/push/post(broadcastPush)`.
    internal func broadcastPush(
        path: Operations.broadcastPush.Input.Path,
        headers: Operations.broadcastPush.Input.Headers = .init(),
        body: Operations.broadcastPush.Input.Body
    ) async throws -> Operations.broadcastPush.Output {
        try await broadcastPush(Operations.broadcastPush.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Stream an ongoing broadcast round as PGN
    ///
    /// This streaming endpoint first sends all games of a broadcast round in PGN format.
    /// Then, it waits for new moves to be played. As soon as it happens, the entire PGN of the game is sent to the stream.
    /// The stream will also send PGNs when games are added to the round.
    /// This is the best way to get updates about an ongoing round. Streaming means no polling,
    /// and no pollings means no latency, and minimum impact on the server.
    ///
    ///
    /// - Remark: HTTP `GET /api/stream/broadcast/round/{broadcastRoundId}.pgn`.
    /// - Remark: Generated from `#/paths//api/stream/broadcast/round/{broadcastRoundId}.pgn/get(broadcastStreamRoundPgn)`.
    internal func broadcastStreamRoundPgn(
        path: Operations.broadcastStreamRoundPgn.Input.Path,
        headers: Operations.broadcastStreamRoundPgn.Input.Headers = .init()
    ) async throws -> Operations.broadcastStreamRoundPgn.Output {
        try await broadcastStreamRoundPgn(Operations.broadcastStreamRoundPgn.Input(
            path: path,
            headers: headers
        ))
    }
    /// Export one round as PGN
    ///
    /// Download all games of a single round of a broadcast tournament in PGN format.
    /// You *could* poll this endpoint to get updates about a tournament, but it would be slow,
    /// and very inefficient.
    /// Instead, consider [streaming the tournament](#operation/broadcastStreamRoundPgn) to get
    /// a new PGN every time a game is updated, in real-time.
    ///
    ///
    /// - Remark: HTTP `GET /api/broadcast/round/{broadcastRoundId}.pgn`.
    /// - Remark: Generated from `#/paths//api/broadcast/round/{broadcastRoundId}.pgn/get(broadcastRoundPgn)`.
    internal func broadcastRoundPgn(
        path: Operations.broadcastRoundPgn.Input.Path,
        headers: Operations.broadcastRoundPgn.Input.Headers = .init()
    ) async throws -> Operations.broadcastRoundPgn.Output {
        try await broadcastRoundPgn(Operations.broadcastRoundPgn.Input(
            path: path,
            headers: headers
        ))
    }
    /// Export all rounds as PGN
    ///
    /// Download all games of all rounds of a broadcast in PGN format.
    /// If a `study:read` [OAuth token](#tag/OAuth) is provided,
    /// the private rounds where the user is a contributor will be available.
    /// You may want to [download only the games of a single round](#operation/broadcastRoundPgn) instead.
    ///
    ///
    /// - Remark: HTTP `GET /api/broadcast/{broadcastTournamentId}.pgn`.
    /// - Remark: Generated from `#/paths//api/broadcast/{broadcastTournamentId}.pgn/get(broadcastAllRoundsPgn)`.
    internal func broadcastAllRoundsPgn(
        path: Operations.broadcastAllRoundsPgn.Input.Path,
        headers: Operations.broadcastAllRoundsPgn.Input.Headers = .init()
    ) async throws -> Operations.broadcastAllRoundsPgn.Output {
        try await broadcastAllRoundsPgn(Operations.broadcastAllRoundsPgn.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get your broadcast rounds
    ///
    /// Stream all broadcast rounds you are a member of.
    /// Also includes broadcasts rounds you did not create, but were invited to.
    /// Also includes broadcasts rounds where you're a non-writing member. See the `writeable` flag in the response.
    /// Rounds are ordered by rank, which is roughly chronological, most recent first, slightly pondered with popularity.
    ///
    ///
    /// - Remark: HTTP `GET /api/broadcast/my-rounds`.
    /// - Remark: Generated from `#/paths//api/broadcast/my-rounds/get(broadcastMyRoundsGet)`.
    internal func broadcastMyRoundsGet(
        query: Operations.broadcastMyRoundsGet.Input.Query = .init(),
        headers: Operations.broadcastMyRoundsGet.Input.Headers = .init()
    ) async throws -> Operations.broadcastMyRoundsGet.Output {
        try await broadcastMyRoundsGet(Operations.broadcastMyRoundsGet.Input(
            query: query,
            headers: headers
        ))
    }
    /// Get a FIDE player
    ///
    /// Get information about a FIDE player.
    ///
    ///
    /// - Remark: HTTP `GET /api/fide/player/{playerId}`.
    /// - Remark: Generated from `#/paths//api/fide/player/{playerId}/get(fidePlayerGet)`.
    internal func fidePlayerGet(
        path: Operations.fidePlayerGet.Input.Path,
        headers: Operations.fidePlayerGet.Input.Headers = .init()
    ) async throws -> Operations.fidePlayerGet.Output {
        try await fidePlayerGet(Operations.fidePlayerGet.Input(
            path: path,
            headers: headers
        ))
    }
    /// Search FIDE players
    ///
    /// List of FIDE players search results for a query.
    ///
    ///
    /// - Remark: HTTP `GET /api/fide/player`.
    /// - Remark: Generated from `#/paths//api/fide/player/get(fidePlayerSearch)`.
    internal func fidePlayerSearch(
        query: Operations.fidePlayerSearch.Input.Query,
        headers: Operations.fidePlayerSearch.Input.Headers = .init()
    ) async throws -> Operations.fidePlayerSearch.Output {
        try await fidePlayerSearch(Operations.fidePlayerSearch.Input(
            query: query,
            headers: headers
        ))
    }
    /// Get current simuls
    ///
    /// Get recently created, started, finished, simuls.
    /// Created and finished simul lists are not exhaustives, only those with
    /// strong enough host will be listed, the same filter is used to display simuls on https://lichess.org/simul.
    /// When [authenticated with OAuth2](#section/Introduction/Authentication), the pending list will be populated with your created, but unstarted simuls.
    ///
    ///
    /// - Remark: HTTP `GET /api/simul`.
    /// - Remark: Generated from `#/paths//api/simul/get(apiSimul)`.
    internal func apiSimul(headers: Operations.apiSimul.Input.Headers = .init()) async throws -> Operations.apiSimul.Output {
        try await apiSimul(Operations.apiSimul.Input(headers: headers))
    }
    /// Get a single team
    ///
    /// Public info about a team. Includes the list of publicly visible leaders.
    ///
    /// - Remark: HTTP `GET /api/team/{teamId}`.
    /// - Remark: Generated from `#/paths//api/team/{teamId}/get(teamShow)`.
    internal func teamShow(
        path: Operations.teamShow.Input.Path,
        headers: Operations.teamShow.Input.Headers = .init()
    ) async throws -> Operations.teamShow.Output {
        try await teamShow(Operations.teamShow.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get popular teams
    ///
    /// Paginator of the most popular teams.
    ///
    ///
    /// - Remark: HTTP `GET /api/team/all`.
    /// - Remark: Generated from `#/paths//api/team/all/get(teamAll)`.
    internal func teamAll(
        query: Operations.teamAll.Input.Query = .init(),
        headers: Operations.teamAll.Input.Headers = .init()
    ) async throws -> Operations.teamAll.Output {
        try await teamAll(Operations.teamAll.Input(
            query: query,
            headers: headers
        ))
    }
    /// Teams of a player
    ///
    /// All the teams a player is a member of.
    ///
    ///
    /// - Remark: HTTP `GET /api/team/of/{username}`.
    /// - Remark: Generated from `#/paths//api/team/of/{username}/get(teamOfUsername)`.
    internal func teamOfUsername(
        path: Operations.teamOfUsername.Input.Path,
        headers: Operations.teamOfUsername.Input.Headers = .init()
    ) async throws -> Operations.teamOfUsername.Output {
        try await teamOfUsername(Operations.teamOfUsername.Input(
            path: path,
            headers: headers
        ))
    }
    /// Search teams
    ///
    /// Paginator of team search results for a keyword.
    ///
    ///
    /// - Remark: HTTP `GET /api/team/search`.
    /// - Remark: Generated from `#/paths//api/team/search/get(teamSearch)`.
    internal func teamSearch(
        query: Operations.teamSearch.Input.Query = .init(),
        headers: Operations.teamSearch.Input.Headers = .init()
    ) async throws -> Operations.teamSearch.Output {
        try await teamSearch(Operations.teamSearch.Input(
            query: query,
            headers: headers
        ))
    }
    /// Get members of a team
    ///
    /// Members are sorted by reverse chronological order of joining the team (most recent first).
    /// OAuth is only required if the list of members is private.
    /// Up to 5,000 users are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    ///
    ///
    /// - Remark: HTTP `GET /api/team/{teamId}/users`.
    /// - Remark: Generated from `#/paths//api/team/{teamId}/users/get(teamIdUsers)`.
    internal func teamIdUsers(
        path: Operations.teamIdUsers.Input.Path,
        query: Operations.teamIdUsers.Input.Query = .init(),
        headers: Operations.teamIdUsers.Input.Headers = .init()
    ) async throws -> Operations.teamIdUsers.Output {
        try await teamIdUsers(Operations.teamIdUsers.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get team Arena tournaments
    ///
    /// Get all Arena tournaments relevant to a team.
    /// Tournaments are sorted by reverse chronological order of start date (last starting first).
    /// Tournaments are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    ///
    ///
    /// - Remark: HTTP `GET /api/team/{teamId}/arena`.
    /// - Remark: Generated from `#/paths//api/team/{teamId}/arena/get(apiTeamArena)`.
    internal func apiTeamArena(
        path: Operations.apiTeamArena.Input.Path,
        query: Operations.apiTeamArena.Input.Query = .init(),
        headers: Operations.apiTeamArena.Input.Headers = .init()
    ) async throws -> Operations.apiTeamArena.Output {
        try await apiTeamArena(Operations.apiTeamArena.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Join a team
    ///
    /// Join a team.
    /// If the team requires a password but the `password` field is incorrect,
    /// then the call fails with `403 Forbidden`.
    /// Similarly, if the team join policy requires a confirmation but the
    /// `message` parameter is not given, then the call fails with
    /// `403 Forbidden`.
    ///
    ///
    /// - Remark: HTTP `POST /team/{teamId}/join`.
    /// - Remark: Generated from `#/paths//team/{teamId}/join/post(teamIdJoin)`.
    internal func teamIdJoin(
        path: Operations.teamIdJoin.Input.Path,
        headers: Operations.teamIdJoin.Input.Headers = .init(),
        body: Operations.teamIdJoin.Input.Body? = nil
    ) async throws -> Operations.teamIdJoin.Output {
        try await teamIdJoin(Operations.teamIdJoin.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Leave a team
    ///
    /// Leave a team.
    /// - <https://lichess.org/team>
    ///
    ///
    /// - Remark: HTTP `POST /team/{teamId}/quit`.
    /// - Remark: Generated from `#/paths//team/{teamId}/quit/post(teamIdQuit)`.
    internal func teamIdQuit(
        path: Operations.teamIdQuit.Input.Path,
        headers: Operations.teamIdQuit.Input.Headers = .init()
    ) async throws -> Operations.teamIdQuit.Output {
        try await teamIdQuit(Operations.teamIdQuit.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get join requests
    ///
    /// Get pending join requests of your team
    ///
    /// - Remark: HTTP `GET /api/team/{teamId}/requests`.
    /// - Remark: Generated from `#/paths//api/team/{teamId}/requests/get(teamRequests)`.
    internal func teamRequests(
        path: Operations.teamRequests.Input.Path,
        query: Operations.teamRequests.Input.Query = .init(),
        headers: Operations.teamRequests.Input.Headers = .init()
    ) async throws -> Operations.teamRequests.Output {
        try await teamRequests(Operations.teamRequests.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Accept join request
    ///
    /// Accept someone's request to join your team
    ///
    /// - Remark: HTTP `POST /api/team/{teamId}/request/{userId}/accept`.
    /// - Remark: Generated from `#/paths//api/team/{teamId}/request/{userId}/accept/post(teamRequestAccept)`.
    internal func teamRequestAccept(
        path: Operations.teamRequestAccept.Input.Path,
        headers: Operations.teamRequestAccept.Input.Headers = .init()
    ) async throws -> Operations.teamRequestAccept.Output {
        try await teamRequestAccept(Operations.teamRequestAccept.Input(
            path: path,
            headers: headers
        ))
    }
    /// Decline join request
    ///
    /// Decline someone's request to join your team
    ///
    /// - Remark: HTTP `POST /api/team/{teamId}/request/{userId}/decline`.
    /// - Remark: Generated from `#/paths//api/team/{teamId}/request/{userId}/decline/post(teamRequestDecline)`.
    internal func teamRequestDecline(
        path: Operations.teamRequestDecline.Input.Path,
        headers: Operations.teamRequestDecline.Input.Headers = .init()
    ) async throws -> Operations.teamRequestDecline.Output {
        try await teamRequestDecline(Operations.teamRequestDecline.Input(
            path: path,
            headers: headers
        ))
    }
    /// Kick a user from your team
    ///
    /// Kick a member out of one of your teams.
    /// - <https://lichess.org/team>
    ///
    ///
    /// - Remark: HTTP `POST /api/team/{teamId}/kick/{userId}`.
    /// - Remark: Generated from `#/paths//api/team/{teamId}/kick/{userId}/post(teamIdKickUserId)`.
    internal func teamIdKickUserId(
        path: Operations.teamIdKickUserId.Input.Path,
        headers: Operations.teamIdKickUserId.Input.Headers = .init()
    ) async throws -> Operations.teamIdKickUserId.Output {
        try await teamIdKickUserId(Operations.teamIdKickUserId.Input(
            path: path,
            headers: headers
        ))
    }
    /// Message all members
    ///
    /// Send a private message to all members of a team.
    /// You must be a team leader with the "Messages" permission.
    ///
    ///
    /// - Remark: HTTP `POST /team/{teamId}/pm-all`.
    /// - Remark: Generated from `#/paths//team/{teamId}/pm-all/post(teamIdPmAll)`.
    internal func teamIdPmAll(
        path: Operations.teamIdPmAll.Input.Path,
        headers: Operations.teamIdPmAll.Input.Headers = .init(),
        body: Operations.teamIdPmAll.Input.Body
    ) async throws -> Operations.teamIdPmAll.Output {
        try await teamIdPmAll(Operations.teamIdPmAll.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get live streamers
    ///
    /// Get basic info about currently streaming users.
    /// This API is very fast and cheap on lichess side.
    /// So you can call it quite often (like once every 5 seconds).
    ///
    ///
    /// - Remark: HTTP `GET /api/streamer/live`.
    /// - Remark: Generated from `#/paths//api/streamer/live/get(streamerLive)`.
    internal func streamerLive(headers: Operations.streamerLive.Input.Headers = .init()) async throws -> Operations.streamerLive.Output {
        try await streamerLive(Operations.streamerLive.Input(headers: headers))
    }
    /// Get crosstable
    ///
    /// Get total number of games, and current score, of any two users.
    /// If the `matchup` flag is provided, and the users are currently playing, also gets the current match game number and scores.
    ///
    ///
    /// - Remark: HTTP `GET /api/crosstable/{user1}/{user2}`.
    /// - Remark: Generated from `#/paths//api/crosstable/{user1}/{user2}/get(apiCrosstable)`.
    internal func apiCrosstable(
        path: Operations.apiCrosstable.Input.Path,
        query: Operations.apiCrosstable.Input.Query = .init(),
        headers: Operations.apiCrosstable.Input.Headers = .init()
    ) async throws -> Operations.apiCrosstable.Output {
        try await apiCrosstable(Operations.apiCrosstable.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Autocomplete usernames
    ///
    /// Provides autocompletion options for an incomplete username.
    ///
    ///
    /// - Remark: HTTP `GET /api/player/autocomplete`.
    /// - Remark: Generated from `#/paths//api/player/autocomplete/get(apiPlayerAutocomplete)`.
    internal func apiPlayerAutocomplete(
        query: Operations.apiPlayerAutocomplete.Input.Query,
        headers: Operations.apiPlayerAutocomplete.Input.Headers = .init()
    ) async throws -> Operations.apiPlayerAutocomplete.Output {
        try await apiPlayerAutocomplete(Operations.apiPlayerAutocomplete.Input(
            query: query,
            headers: headers
        ))
    }
    /// Get notes for a user
    ///
    /// Get the private notes that you have added for a user.
    ///
    ///
    /// - Remark: HTTP `GET /api/user/{username}/note`.
    /// - Remark: Generated from `#/paths//api/user/{username}/note/get(readNote)`.
    internal func readNote(
        path: Operations.readNote.Input.Path,
        headers: Operations.readNote.Input.Headers = .init()
    ) async throws -> Operations.readNote.Output {
        try await readNote(Operations.readNote.Input(
            path: path,
            headers: headers
        ))
    }
    /// Add a note for a user
    ///
    /// Add a private note available only to you about this account.
    ///
    ///
    /// - Remark: HTTP `POST /api/user/{username}/note`.
    /// - Remark: Generated from `#/paths//api/user/{username}/note/post(writeNote)`.
    internal func writeNote(
        path: Operations.writeNote.Input.Path,
        headers: Operations.writeNote.Input.Headers = .init(),
        body: Operations.writeNote.Input.Body
    ) async throws -> Operations.writeNote.Output {
        try await writeNote(Operations.writeNote.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get users followed by the logged in user
    ///
    /// Users are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    ///
    ///
    /// - Remark: HTTP `GET /api/rel/following`.
    /// - Remark: Generated from `#/paths//api/rel/following/get(apiUserFollowing)`.
    internal func apiUserFollowing(headers: Operations.apiUserFollowing.Input.Headers = .init()) async throws -> Operations.apiUserFollowing.Output {
        try await apiUserFollowing(Operations.apiUserFollowing.Input(headers: headers))
    }
    /// Follow a player
    ///
    /// Follow a player, adding them to your list of Lichess friends.
    ///
    ///
    /// - Remark: HTTP `POST /api/rel/follow/{username}`.
    /// - Remark: Generated from `#/paths//api/rel/follow/{username}/post(followUser)`.
    internal func followUser(
        path: Operations.followUser.Input.Path,
        headers: Operations.followUser.Input.Headers = .init()
    ) async throws -> Operations.followUser.Output {
        try await followUser(Operations.followUser.Input(
            path: path,
            headers: headers
        ))
    }
    /// Unfollow a player
    ///
    /// Unfollow a player, removing them from your list of Lichess friends.
    ///
    ///
    /// - Remark: HTTP `POST /api/rel/unfollow/{username}`.
    /// - Remark: Generated from `#/paths//api/rel/unfollow/{username}/post(unfollowUser)`.
    internal func unfollowUser(
        path: Operations.unfollowUser.Input.Path,
        headers: Operations.unfollowUser.Input.Headers = .init()
    ) async throws -> Operations.unfollowUser.Output {
        try await unfollowUser(Operations.unfollowUser.Input(
            path: path,
            headers: headers
        ))
    }
    /// Block a player
    ///
    /// Block a player, adding them to your list of blocked Lichess users.
    ///
    ///
    /// - Remark: HTTP `POST /api/rel/block/{username}`.
    /// - Remark: Generated from `#/paths//api/rel/block/{username}/post(blockUser)`.
    internal func blockUser(
        path: Operations.blockUser.Input.Path,
        headers: Operations.blockUser.Input.Headers = .init()
    ) async throws -> Operations.blockUser.Output {
        try await blockUser(Operations.blockUser.Input(
            path: path,
            headers: headers
        ))
    }
    /// Unblock a player
    ///
    /// Unblock a player, removing them from your list of blocked Lichess users.
    ///
    ///
    /// - Remark: HTTP `POST /api/rel/unblock/{username}`.
    /// - Remark: Generated from `#/paths//api/rel/unblock/{username}/post(unblockUser)`.
    internal func unblockUser(
        path: Operations.unblockUser.Input.Path,
        headers: Operations.unblockUser.Input.Headers = .init()
    ) async throws -> Operations.unblockUser.Output {
        try await unblockUser(Operations.unblockUser.Input(
            path: path,
            headers: headers
        ))
    }
    /// Stream incoming events
    ///
    /// Stream the events reaching a lichess user in real time as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    ///
    /// An empty line is sent every 7 seconds for keep alive purposes.
    ///
    /// Each non-empty line is a JSON object containing a `type` field. Possible values are:
    /// - `gameStart` Start of a game
    /// - `gameFinish` Completion of a game
    /// - `challenge` A player sends you a challenge or you challenge someone
    /// - `challengeCanceled` A player cancels their challenge to you
    /// - `challengeDeclined` The opponent declines your challenge
    ///
    /// When the stream opens, all current challenges and games are sent.
    ///
    /// Only one global event stream can be active at a time. When the stream opens, the previous one with the same access token is closed.
    ///
    ///
    /// - Remark: HTTP `GET /api/stream/event`.
    /// - Remark: Generated from `#/paths//api/stream/event/get(apiStreamEvent)`.
    internal func apiStreamEvent(headers: Operations.apiStreamEvent.Input.Headers = .init()) async throws -> Operations.apiStreamEvent.Output {
        try await apiStreamEvent(Operations.apiStreamEvent.Input(headers: headers))
    }
    /// Create a seek
    ///
    /// Create a public seek, to start a game with a random player.
    ///
    /// ### Real-time seek
    ///
    /// Specify the `time` and `increment` clock values.
    /// The response is streamed but doesn't contain any information.
    ///
    /// **Keep the connection open to keep the seek active**.
    ///
    /// If the client closes the connection, the seek is canceled. This way, if the client terminates, the user won't be paired in a game they wouldn't play.
    /// When the seek is accepted, or expires, the server closes the connection.
    ///
    /// **Make sure to also have an [Event stream](#operation/apiStreamEvent) open**, to be notified when a game starts.
    /// We recommend opening the [Event stream](#operation/apiStreamEvent) first, then the seek stream. This way,
    /// you won't miss the game event if the seek is accepted immediately.
    ///
    /// ### Correspondence seek
    ///
    /// Specify the `days` per turn value.
    /// The response is not streamed, it immediately completes with the seek ID. The seek remains active on the server until it is joined by someone.
    ///
    ///
    /// - Remark: HTTP `POST /api/board/seek`.
    /// - Remark: Generated from `#/paths//api/board/seek/post(apiBoardSeek)`.
    internal func apiBoardSeek(
        headers: Operations.apiBoardSeek.Input.Headers = .init(),
        body: Operations.apiBoardSeek.Input.Body? = nil
    ) async throws -> Operations.apiBoardSeek.Output {
        try await apiBoardSeek(Operations.apiBoardSeek.Input(
            headers: headers,
            body: body
        ))
    }
    /// Stream Board game state
    ///
    /// Stream the state of a game being played with the Board API, as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    ///
    /// Use this endpoint to get updates about the game in real-time, with a single request.
    ///
    /// Each line is a JSON object containing a `type` field. Possible values are:
    ///   - `gameFull` Full game data. All values are immutable, except for the `state` field.
    ///   - `gameState` Current state of the game. Immutable values not included. Sent when a move is played, a draw is offered, or when the game ends.
    ///   - `chatLine` Chat message sent by a user in the `room` "player" or "spectator".
    ///   - `opponentGone` Whether the opponent has left the game, and how long before you can claim a win or draw.
    ///
    /// The first line is always of type `gameFull`.
    ///
    /// The server closes the stream when the game ends, or if the game has already ended.
    ///
    ///
    /// - Remark: HTTP `GET /api/board/game/stream/{gameId}`.
    /// - Remark: Generated from `#/paths//api/board/game/stream/{gameId}/get(boardGameStream)`.
    internal func boardGameStream(
        path: Operations.boardGameStream.Input.Path,
        headers: Operations.boardGameStream.Input.Headers = .init()
    ) async throws -> Operations.boardGameStream.Output {
        try await boardGameStream(Operations.boardGameStream.Input(
            path: path,
            headers: headers
        ))
    }
    /// Make a Board move
    ///
    /// Make a move in a game being played with the Board API.
    /// The move can also contain a draw offer/agreement.
    ///
    ///
    /// - Remark: HTTP `POST /api/board/game/{gameId}/move/{move}`.
    /// - Remark: Generated from `#/paths//api/board/game/{gameId}/move/{move}/post(boardGameMove)`.
    internal func boardGameMove(
        path: Operations.boardGameMove.Input.Path,
        query: Operations.boardGameMove.Input.Query = .init(),
        headers: Operations.boardGameMove.Input.Headers = .init()
    ) async throws -> Operations.boardGameMove.Output {
        try await boardGameMove(Operations.boardGameMove.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Fetch the game chat
    ///
    /// Get the messages posted in the game chat
    ///
    ///
    /// - Remark: HTTP `GET /api/board/game/{gameId}/chat`.
    /// - Remark: Generated from `#/paths//api/board/game/{gameId}/chat/get(boardGameChatGet)`.
    internal func boardGameChatGet(
        path: Operations.boardGameChatGet.Input.Path,
        headers: Operations.boardGameChatGet.Input.Headers = .init()
    ) async throws -> Operations.boardGameChatGet.Output {
        try await boardGameChatGet(Operations.boardGameChatGet.Input(
            path: path,
            headers: headers
        ))
    }
    /// Write in the chat
    ///
    /// Post a message to the player or spectator chat, in a game being played with the Board API.
    ///
    ///
    /// - Remark: HTTP `POST /api/board/game/{gameId}/chat`.
    /// - Remark: Generated from `#/paths//api/board/game/{gameId}/chat/post(boardGameChatPost)`.
    internal func boardGameChatPost(
        path: Operations.boardGameChatPost.Input.Path,
        headers: Operations.boardGameChatPost.Input.Headers = .init(),
        body: Operations.boardGameChatPost.Input.Body
    ) async throws -> Operations.boardGameChatPost.Output {
        try await boardGameChatPost(Operations.boardGameChatPost.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Abort a game
    ///
    /// Abort a game being played with the Board API.
    ///
    ///
    /// - Remark: HTTP `POST /api/board/game/{gameId}/abort`.
    /// - Remark: Generated from `#/paths//api/board/game/{gameId}/abort/post(boardGameAbort)`.
    internal func boardGameAbort(
        path: Operations.boardGameAbort.Input.Path,
        headers: Operations.boardGameAbort.Input.Headers = .init()
    ) async throws -> Operations.boardGameAbort.Output {
        try await boardGameAbort(Operations.boardGameAbort.Input(
            path: path,
            headers: headers
        ))
    }
    /// Resign a game
    ///
    /// Resign a game being played with the Board API.
    ///
    ///
    /// - Remark: HTTP `POST /api/board/game/{gameId}/resign`.
    /// - Remark: Generated from `#/paths//api/board/game/{gameId}/resign/post(boardGameResign)`.
    internal func boardGameResign(
        path: Operations.boardGameResign.Input.Path,
        headers: Operations.boardGameResign.Input.Headers = .init()
    ) async throws -> Operations.boardGameResign.Output {
        try await boardGameResign(Operations.boardGameResign.Input(
            path: path,
            headers: headers
        ))
    }
    /// Handle draw offers
    ///
    /// Create/accept/decline draw offers.
    /// - `yes`: Offer a draw, or accept the opponent's draw offer.
    /// - `no`: Decline a draw offer from the opponent.
    ///
    ///
    /// - Remark: HTTP `POST /api/board/game/{gameId}/draw/{accept}`.
    /// - Remark: Generated from `#/paths//api/board/game/{gameId}/draw/{accept}/post(boardGameDraw)`.
    internal func boardGameDraw(
        path: Operations.boardGameDraw.Input.Path,
        headers: Operations.boardGameDraw.Input.Headers = .init()
    ) async throws -> Operations.boardGameDraw.Output {
        try await boardGameDraw(Operations.boardGameDraw.Input(
            path: path,
            headers: headers
        ))
    }
    /// Handle takeback offers
    ///
    /// Create/accept/decline takebacks.
    /// - `yes`: Propose a takeback, or accept the opponent's takeback offer.
    /// - `no`: Decline a takeback offer from the opponent.
    ///
    ///
    /// - Remark: HTTP `POST /api/board/game/{gameId}/takeback/{accept}`.
    /// - Remark: Generated from `#/paths//api/board/game/{gameId}/takeback/{accept}/post(boardGameTakeback)`.
    internal func boardGameTakeback(
        path: Operations.boardGameTakeback.Input.Path,
        headers: Operations.boardGameTakeback.Input.Headers = .init()
    ) async throws -> Operations.boardGameTakeback.Output {
        try await boardGameTakeback(Operations.boardGameTakeback.Input(
            path: path,
            headers: headers
        ))
    }
    /// Claim victory of a game
    ///
    /// Claim victory when the opponent has left the game for a while.
    ///
    ///
    /// - Remark: HTTP `POST /api/board/game/{gameId}/claim-victory`.
    /// - Remark: Generated from `#/paths//api/board/game/{gameId}/claim-victory/post(boardGameClaimVictory)`.
    internal func boardGameClaimVictory(
        path: Operations.boardGameClaimVictory.Input.Path,
        headers: Operations.boardGameClaimVictory.Input.Headers = .init()
    ) async throws -> Operations.boardGameClaimVictory.Output {
        try await boardGameClaimVictory(Operations.boardGameClaimVictory.Input(
            path: path,
            headers: headers
        ))
    }
    /// Claim draw of a game
    ///
    /// Claim draw when the opponent has left the game for a while.
    ///
    ///
    /// - Remark: HTTP `POST /api/board/game/{gameId}/claim-draw`.
    /// - Remark: Generated from `#/paths//api/board/game/{gameId}/claim-draw/post(boardGameClaimDraw)`.
    internal func boardGameClaimDraw(
        path: Operations.boardGameClaimDraw.Input.Path,
        headers: Operations.boardGameClaimDraw.Input.Headers = .init()
    ) async throws -> Operations.boardGameClaimDraw.Output {
        try await boardGameClaimDraw(Operations.boardGameClaimDraw.Input(
            path: path,
            headers: headers
        ))
    }
    /// Berserk a tournament game
    ///
    /// Go berserk on an arena tournament game. Halves the clock time, grants an extra point upon winning.
    /// Only available in arena tournaments that allow berserk, and before each player has made a move.
    ///
    ///
    /// - Remark: HTTP `POST /api/board/game/{gameId}/berserk`.
    /// - Remark: Generated from `#/paths//api/board/game/{gameId}/berserk/post(boardGameBerserk)`.
    internal func boardGameBerserk(
        path: Operations.boardGameBerserk.Input.Path,
        headers: Operations.boardGameBerserk.Input.Headers = .init()
    ) async throws -> Operations.boardGameBerserk.Output {
        try await boardGameBerserk(Operations.boardGameBerserk.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get online bots
    ///
    /// Stream the [online bot users](https://lichess.org/player/bots), as [ndjson](#section/Introduction/Streaming-with-ND-JSON). Throttled to 50 bot users per second.
    ///
    /// - Remark: HTTP `GET /api/bot/online`.
    /// - Remark: Generated from `#/paths//api/bot/online/get(apiBotOnline)`.
    internal func apiBotOnline(
        query: Operations.apiBotOnline.Input.Query = .init(),
        headers: Operations.apiBotOnline.Input.Headers = .init()
    ) async throws -> Operations.apiBotOnline.Output {
        try await apiBotOnline(Operations.apiBotOnline.Input(
            query: query,
            headers: headers
        ))
    }
    /// Upgrade to Bot account
    ///
    /// Upgrade a lichess player account into a Bot account. Only Bot accounts can use the Bot API.
    /// The account **cannot have played any game** before becoming a Bot account. The upgrade is **irreversible**. The account will only be able to play as a Bot.
    /// To upgrade an account to Bot, use the [official lichess-bot client](https://github.com/lichess-bot-devs/lichess-bot), or follow these steps:
    /// - Create an [API access token](https://lichess.org/account/oauth/token/create?scopes[]=bot:play) with "Play bot moves" permission.
    /// - `curl -d '' https://lichess.org/api/bot/account/upgrade -H "Authorization: Bearer <yourTokenHere>"`
    /// To know if an account has already been upgraded, use the [Get my profile API](#operation/accountMe):
    /// the `title` field should be set to `BOT`.
    ///
    ///
    /// - Remark: HTTP `POST /api/bot/account/upgrade`.
    /// - Remark: Generated from `#/paths//api/bot/account/upgrade/post(botAccountUpgrade)`.
    internal func botAccountUpgrade(headers: Operations.botAccountUpgrade.Input.Headers = .init()) async throws -> Operations.botAccountUpgrade.Output {
        try await botAccountUpgrade(Operations.botAccountUpgrade.Input(headers: headers))
    }
    /// Stream Bot game state
    ///
    /// Stream the state of a game being played with the Bot API, as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    /// Use this endpoint to get updates about the game in real-time, with a single request.
    /// Each line is a JSON object containing a `type` field. Possible values are:
    /// - `gameFull` Full game data. All values are immutable, except for the `state` field.
    /// - `gameState` Current state of the game. Immutable values not included.
    /// - `chatLine` Chat message sent by a user (or the bot itself) in the `room` "player" or "spectator".
    /// - `opponentGone` Whether the opponent has left the game, and how long before you can claim a win or draw.
    /// The first line is always of type `gameFull`.
    ///
    ///
    /// - Remark: HTTP `GET /api/bot/game/stream/{gameId}`.
    /// - Remark: Generated from `#/paths//api/bot/game/stream/{gameId}/get(botGameStream)`.
    internal func botGameStream(
        path: Operations.botGameStream.Input.Path,
        headers: Operations.botGameStream.Input.Headers = .init()
    ) async throws -> Operations.botGameStream.Output {
        try await botGameStream(Operations.botGameStream.Input(
            path: path,
            headers: headers
        ))
    }
    /// Make a Bot move
    ///
    /// Make a move in a game being played with the Bot API.
    /// The move can also contain a draw offer/agreement.
    ///
    ///
    /// - Remark: HTTP `POST /api/bot/game/{gameId}/move/{move}`.
    /// - Remark: Generated from `#/paths//api/bot/game/{gameId}/move/{move}/post(botGameMove)`.
    internal func botGameMove(
        path: Operations.botGameMove.Input.Path,
        query: Operations.botGameMove.Input.Query = .init(),
        headers: Operations.botGameMove.Input.Headers = .init()
    ) async throws -> Operations.botGameMove.Output {
        try await botGameMove(Operations.botGameMove.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Fetch the game chat
    ///
    /// Get the messages posted in the game chat
    ///
    ///
    /// - Remark: HTTP `GET /api/bot/game/{gameId}/chat`.
    /// - Remark: Generated from `#/paths//api/bot/game/{gameId}/chat/get(botGameChatGet)`.
    internal func botGameChatGet(
        path: Operations.botGameChatGet.Input.Path,
        headers: Operations.botGameChatGet.Input.Headers = .init()
    ) async throws -> Operations.botGameChatGet.Output {
        try await botGameChatGet(Operations.botGameChatGet.Input(
            path: path,
            headers: headers
        ))
    }
    /// Write in the chat
    ///
    /// Post a message to the player or spectator chat, in a game being played with the Bot API.
    ///
    ///
    /// - Remark: HTTP `POST /api/bot/game/{gameId}/chat`.
    /// - Remark: Generated from `#/paths//api/bot/game/{gameId}/chat/post(botGameChat)`.
    internal func botGameChat(
        path: Operations.botGameChat.Input.Path,
        headers: Operations.botGameChat.Input.Headers = .init(),
        body: Operations.botGameChat.Input.Body
    ) async throws -> Operations.botGameChat.Output {
        try await botGameChat(Operations.botGameChat.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Abort a game
    ///
    /// Abort a game being played with the Bot API.
    ///
    ///
    /// - Remark: HTTP `POST /api/bot/game/{gameId}/abort`.
    /// - Remark: Generated from `#/paths//api/bot/game/{gameId}/abort/post(botGameAbort)`.
    internal func botGameAbort(
        path: Operations.botGameAbort.Input.Path,
        headers: Operations.botGameAbort.Input.Headers = .init()
    ) async throws -> Operations.botGameAbort.Output {
        try await botGameAbort(Operations.botGameAbort.Input(
            path: path,
            headers: headers
        ))
    }
    /// Resign a game
    ///
    /// Resign a game being played with the Bot API.
    ///
    ///
    /// - Remark: HTTP `POST /api/bot/game/{gameId}/resign`.
    /// - Remark: Generated from `#/paths//api/bot/game/{gameId}/resign/post(botGameResign)`.
    internal func botGameResign(
        path: Operations.botGameResign.Input.Path,
        headers: Operations.botGameResign.Input.Headers = .init()
    ) async throws -> Operations.botGameResign.Output {
        try await botGameResign(Operations.botGameResign.Input(
            path: path,
            headers: headers
        ))
    }
    /// Handle draw offers
    ///
    /// Create/accept/decline draw offers with the Bot API.
    /// - `yes`: Offer a draw, or accept the opponent's draw offer.
    /// - `no`: Decline a draw offer from the opponent.
    ///
    ///
    /// - Remark: HTTP `POST /api/bot/game/{gameId}/draw/{accept}`.
    /// - Remark: Generated from `#/paths//api/bot/game/{gameId}/draw/{accept}/post(botGameDraw)`.
    internal func botGameDraw(
        path: Operations.botGameDraw.Input.Path,
        headers: Operations.botGameDraw.Input.Headers = .init()
    ) async throws -> Operations.botGameDraw.Output {
        try await botGameDraw(Operations.botGameDraw.Input(
            path: path,
            headers: headers
        ))
    }
    /// Handle takeback offers
    ///
    /// Create/accept/decline takebacks with the Bot API.
    /// - `yes`: Propose a takeback, or accept the opponent's takeback offer.
    /// - `no`: Decline a takeback offer from the opponent.
    ///
    ///
    /// - Remark: HTTP `POST /api/bot/game/{gameId}/takeback/{accept}`.
    /// - Remark: Generated from `#/paths//api/bot/game/{gameId}/takeback/{accept}/post(botGameTakeback)`.
    internal func botGameTakeback(
        path: Operations.botGameTakeback.Input.Path,
        headers: Operations.botGameTakeback.Input.Headers = .init()
    ) async throws -> Operations.botGameTakeback.Output {
        try await botGameTakeback(Operations.botGameTakeback.Input(
            path: path,
            headers: headers
        ))
    }
    /// Claim victory of a game
    ///
    /// Claim victory when the opponent has left the game for a while.
    ///
    ///
    /// - Remark: HTTP `POST /api/bot/game/{gameId}/claim-victory`.
    /// - Remark: Generated from `#/paths//api/bot/game/{gameId}/claim-victory/post(botGameClaimVictory)`.
    internal func botGameClaimVictory(
        path: Operations.botGameClaimVictory.Input.Path,
        headers: Operations.botGameClaimVictory.Input.Headers = .init()
    ) async throws -> Operations.botGameClaimVictory.Output {
        try await botGameClaimVictory(Operations.botGameClaimVictory.Input(
            path: path,
            headers: headers
        ))
    }
    /// Claim draw of a game
    ///
    /// Claim draw when the opponent has left the game for a while.
    ///
    ///
    /// - Remark: HTTP `POST /api/bot/game/{gameId}/claim-draw`.
    /// - Remark: Generated from `#/paths//api/bot/game/{gameId}/claim-draw/post(botGameClaimDraw)`.
    internal func botGameClaimDraw(
        path: Operations.botGameClaimDraw.Input.Path,
        headers: Operations.botGameClaimDraw.Input.Headers = .init()
    ) async throws -> Operations.botGameClaimDraw.Output {
        try await botGameClaimDraw(Operations.botGameClaimDraw.Input(
            path: path,
            headers: headers
        ))
    }
    /// List your challenges
    ///
    /// Get a list of challenges created by or targeted at you.
    ///
    ///
    /// - Remark: HTTP `GET /api/challenge`.
    /// - Remark: Generated from `#/paths//api/challenge/get(challengeList)`.
    internal func challengeList(headers: Operations.challengeList.Input.Headers = .init()) async throws -> Operations.challengeList.Output {
        try await challengeList(Operations.challengeList.Input(headers: headers))
    }
    /// Create a challenge
    ///
    /// Challenge someone to play. The targeted player can choose to accept or decline.
    /// If the challenge is accepted, you will be notified on the [event stream](#operation/apiStreamEvent)
    /// that a new game has started. The game ID will be the same as the challenge ID.
    /// Challenges for realtime games (not correspondence) expire after 20s if not accepted.
    /// To prevent that, use the `keepAliveStream` flag described below.
    ///
    ///
    /// - Remark: HTTP `POST /api/challenge/{username}`.
    /// - Remark: Generated from `#/paths//api/challenge/{username}/post(challengeCreate)`.
    internal func challengeCreate(
        path: Operations.challengeCreate.Input.Path,
        headers: Operations.challengeCreate.Input.Headers = .init(),
        body: Operations.challengeCreate.Input.Body? = nil
    ) async throws -> Operations.challengeCreate.Output {
        try await challengeCreate(Operations.challengeCreate.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Show one challenge
    ///
    /// Get details about a challenge, even if it has been recently accepted, canceled or declined.
    ///
    ///
    /// - Remark: HTTP `GET /api/challenge/{challengeId}/show`.
    /// - Remark: Generated from `#/paths//api/challenge/{challengeId}/show/get(challengeShow)`.
    internal func challengeShow(
        path: Operations.challengeShow.Input.Path,
        headers: Operations.challengeShow.Input.Headers = .init()
    ) async throws -> Operations.challengeShow.Output {
        try await challengeShow(Operations.challengeShow.Input(
            path: path,
            headers: headers
        ))
    }
    /// Accept a challenge
    ///
    /// Accept an incoming challenge.
    /// You should receive a `gameStart` event on the [incoming events stream](#operation/apiStreamEvent).
    ///
    ///
    /// - Remark: HTTP `POST /api/challenge/{challengeId}/accept`.
    /// - Remark: Generated from `#/paths//api/challenge/{challengeId}/accept/post(challengeAccept)`.
    internal func challengeAccept(
        path: Operations.challengeAccept.Input.Path,
        query: Operations.challengeAccept.Input.Query = .init(),
        headers: Operations.challengeAccept.Input.Headers = .init()
    ) async throws -> Operations.challengeAccept.Output {
        try await challengeAccept(Operations.challengeAccept.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Decline a challenge
    ///
    /// Decline an incoming challenge.
    ///
    ///
    /// - Remark: HTTP `POST /api/challenge/{challengeId}/decline`.
    /// - Remark: Generated from `#/paths//api/challenge/{challengeId}/decline/post(challengeDecline)`.
    internal func challengeDecline(
        path: Operations.challengeDecline.Input.Path,
        headers: Operations.challengeDecline.Input.Headers = .init(),
        body: Operations.challengeDecline.Input.Body? = nil
    ) async throws -> Operations.challengeDecline.Output {
        try await challengeDecline(Operations.challengeDecline.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Cancel a challenge
    ///
    /// Cancel a challenge you sent, or aborts the game if the challenge was accepted, but the game was not yet played.
    /// Note that the ID of a game is the same as the ID of the challenge that created it.
    /// Works for user challenges and open challenges alike.
    ///
    ///
    /// - Remark: HTTP `POST /api/challenge/{challengeId}/cancel`.
    /// - Remark: Generated from `#/paths//api/challenge/{challengeId}/cancel/post(challengeCancel)`.
    internal func challengeCancel(
        path: Operations.challengeCancel.Input.Path,
        query: Operations.challengeCancel.Input.Query = .init(),
        headers: Operations.challengeCancel.Input.Headers = .init()
    ) async throws -> Operations.challengeCancel.Output {
        try await challengeCancel(Operations.challengeCancel.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Challenge the AI
    ///
    /// Start a game with Lichess AI.
    /// You will be notified on the [event stream](#operation/apiStreamEvent) that a new game has started.
    ///
    ///
    /// - Remark: HTTP `POST /api/challenge/ai`.
    /// - Remark: Generated from `#/paths//api/challenge/ai/post(challengeAi)`.
    internal func challengeAi(
        headers: Operations.challengeAi.Input.Headers = .init(),
        body: Operations.challengeAi.Input.Body
    ) async throws -> Operations.challengeAi.Output {
        try await challengeAi(Operations.challengeAi.Input(
            headers: headers,
            body: body
        ))
    }
    /// Open-ended challenge
    ///
    /// Create a challenge that any 2 players can join.
    /// Share the URL of the challenge. the first 2 players to click it will be paired for a game.
    /// The response body also contains `whiteUrl` and `blackUrl`.
    /// You can control which color each player gets by giving them these URLs,
    /// instead of the main challenge URL.
    /// Open challenges expire after 24h.
    /// If the challenge creation is [authenticated with OAuth2](#section/Introduction/Authentication),
    /// then you can use the [challenge cancel endpoint](#operation/challengeCancel) to cancel it.
    /// To directly pair 2 known players, use [this endpoint](#operation/bulkPairingList) instead.
    ///
    ///
    /// - Remark: HTTP `POST /api/challenge/open`.
    /// - Remark: Generated from `#/paths//api/challenge/open/post(challengeOpen)`.
    internal func challengeOpen(
        headers: Operations.challengeOpen.Input.Headers = .init(),
        body: Operations.challengeOpen.Input.Body? = nil
    ) async throws -> Operations.challengeOpen.Output {
        try await challengeOpen(Operations.challengeOpen.Input(
            headers: headers,
            body: body
        ))
    }
    /// Start clocks of a game
    ///
    /// Start the clocks of a game immediately, even if a player has not yet made a move.
    /// Requires the OAuth tokens of both players with `challenge:write` scope.
    /// If the clocks have already started, the call will have no effect.
    ///
    /// For AI games with only one player, omit the `token2` parameter.
    ///
    ///
    /// - Remark: HTTP `POST /api/challenge/{gameId}/start-clocks`.
    /// - Remark: Generated from `#/paths//api/challenge/{gameId}/start-clocks/post(challengeStartClocks)`.
    internal func challengeStartClocks(
        path: Operations.challengeStartClocks.Input.Path,
        query: Operations.challengeStartClocks.Input.Query,
        headers: Operations.challengeStartClocks.Input.Headers = .init()
    ) async throws -> Operations.challengeStartClocks.Output {
        try await challengeStartClocks(Operations.challengeStartClocks.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// View your bulk pairings
    ///
    /// Get a list of bulk pairings you created.
    ///
    ///
    /// - Remark: HTTP `GET /api/bulk-pairing`.
    /// - Remark: Generated from `#/paths//api/bulk-pairing/get(bulkPairingList)`.
    internal func bulkPairingList(headers: Operations.bulkPairingList.Input.Headers = .init()) async throws -> Operations.bulkPairingList.Output {
        try await bulkPairingList(Operations.bulkPairingList.Input(headers: headers))
    }
    /// Create a bulk pairing
    ///
    /// Schedule many games at once, up to 24h in advance.
    /// OAuth tokens are required for all paired players, with the `challenge:write` scope.
    /// You can schedule up to 500 games every 10 minutes. [Contact us](mailto:contact@lichess.org) if you need higher limits.
    /// If games have a real-time clock, each player must have only one pairing.
    /// For correspondence games, players can have multiple pairings within the same bulk.
    ///
    /// **The entire bulk is rejected if:**
    ///   - a token is missing
    ///   - a token is present more than once (except in correspondence)
    ///   - a token lacks the `challenge:write` scope
    ///   - a player account is closed
    ///   - a player is paired more than once (except in correspondence)
    ///   - a bulk is already scheduled to start at the same time with the same player
    ///   - you have 20 scheduled bulks
    ///   - you have 1000 scheduled games
    ///
    /// Partial bulks are never created. Either it all fails, or it all succeeds.
    /// When it fails, it does so with an error message explaining the issue.
    /// Failed bulks are not counted in the rate limiting, they are free.
    /// Fix the issues, manually or programmatically, then retry to schedule the bulk.
    /// A successful bulk creation returns a JSON bulk document. Its ID can be used for further operations.
    ///
    ///
    /// - Remark: HTTP `POST /api/bulk-pairing`.
    /// - Remark: Generated from `#/paths//api/bulk-pairing/post(bulkPairingCreate)`.
    internal func bulkPairingCreate(
        headers: Operations.bulkPairingCreate.Input.Headers = .init(),
        body: Operations.bulkPairingCreate.Input.Body
    ) async throws -> Operations.bulkPairingCreate.Output {
        try await bulkPairingCreate(Operations.bulkPairingCreate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Manually start clocks
    ///
    /// Immediately start all clocks of the games of a bulk pairing.
    /// This overrides the `startClocksAt` value of an existing bulk pairing.
    /// If the games have not yet been created (`bulk.pairAt` is in the future), then this does nothing.
    /// If the clocks have already started (`bulk.startClocksAt` is in the past), then this does nothing.
    ///
    ///
    /// - Remark: HTTP `POST /api/bulk-pairing/{id}/start-clocks`.
    /// - Remark: Generated from `#/paths//api/bulk-pairing/{id}/start-clocks/post(bulkPairingStartClocks)`.
    internal func bulkPairingStartClocks(
        path: Operations.bulkPairingStartClocks.Input.Path,
        headers: Operations.bulkPairingStartClocks.Input.Headers = .init()
    ) async throws -> Operations.bulkPairingStartClocks.Output {
        try await bulkPairingStartClocks(Operations.bulkPairingStartClocks.Input(
            path: path,
            headers: headers
        ))
    }
    /// Show a bulk pairing
    ///
    /// Get a single bulk pairing by its ID.
    ///
    ///
    /// - Remark: HTTP `GET /api/bulk-pairing/{id}`.
    /// - Remark: Generated from `#/paths//api/bulk-pairing/{id}/get(bulkPairingGet)`.
    internal func bulkPairingGet(
        path: Operations.bulkPairingGet.Input.Path,
        headers: Operations.bulkPairingGet.Input.Headers = .init()
    ) async throws -> Operations.bulkPairingGet.Output {
        try await bulkPairingGet(Operations.bulkPairingGet.Input(
            path: path,
            headers: headers
        ))
    }
    /// Cancel a bulk pairing
    ///
    /// Cancel and delete a bulk pairing that is scheduled in the future.
    /// If the games have already been created, then this does nothing.
    /// Canceling a bulk pairing does not refund the rate limit cost of that bulk pairing.
    ///
    ///
    /// - Remark: HTTP `DELETE /api/bulk-pairing/{id}`.
    /// - Remark: Generated from `#/paths//api/bulk-pairing/{id}/delete(bulkPairingDelete)`.
    internal func bulkPairingDelete(
        path: Operations.bulkPairingDelete.Input.Path,
        headers: Operations.bulkPairingDelete.Input.Headers = .init()
    ) async throws -> Operations.bulkPairingDelete.Output {
        try await bulkPairingDelete(Operations.bulkPairingDelete.Input(
            path: path,
            headers: headers
        ))
    }
    /// Export games of a bulk pairing
    ///
    /// Download games of a bulk in PGN or [ndjson](#section/Introduction/Streaming-with-ND-JSON) format, depending on the request `Accept` header.
    ///
    ///
    /// - Remark: HTTP `GET /api/bulk-pairing/{id}/games`.
    /// - Remark: Generated from `#/paths//api/bulk-pairing/{id}/games/get(bulkPairingIdGamesGet)`.
    internal func bulkPairingIdGamesGet(
        path: Operations.bulkPairingIdGamesGet.Input.Path,
        query: Operations.bulkPairingIdGamesGet.Input.Query = .init(),
        headers: Operations.bulkPairingIdGamesGet.Input.Headers = .init()
    ) async throws -> Operations.bulkPairingIdGamesGet.Output {
        try await bulkPairingIdGamesGet(Operations.bulkPairingIdGamesGet.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Add time to the opponent clock
    ///
    /// Add seconds to the opponent's clock. Can be used to create games with time odds.
    ///
    ///
    /// - Remark: HTTP `POST /api/round/{gameId}/add-time/{seconds}`.
    /// - Remark: Generated from `#/paths//api/round/{gameId}/add-time/{seconds}/post(roundAddTime)`.
    internal func roundAddTime(
        path: Operations.roundAddTime.Input.Path,
        headers: Operations.roundAddTime.Input.Headers = .init()
    ) async throws -> Operations.roundAddTime.Output {
        try await roundAddTime(Operations.roundAddTime.Input(
            path: path,
            headers: headers
        ))
    }
    /// Admin challenge tokens
    ///
    /// **This endpoint can only be used by Lichess administrators. It will not work if you do not have the appropriate permissions.** Tournament organizers should instead use [OAuth](#tag/OAuth) to obtain `challenge:write` tokens from users in order to perform bulk pairing.*
    /// Create and obtain `challenge:write` tokens for multiple users.
    /// If a similar token already exists for a user, it is reused. This endpoint is idempotent.
    ///
    ///
    /// - Remark: HTTP `POST /api/token/admin-challenge`.
    /// - Remark: Generated from `#/paths//api/token/admin-challenge/post(adminChallengeTokens)`.
    internal func adminChallengeTokens(
        headers: Operations.adminChallengeTokens.Input.Headers = .init(),
        body: Operations.adminChallengeTokens.Input.Body
    ) async throws -> Operations.adminChallengeTokens.Output {
        try await adminChallengeTokens(Operations.adminChallengeTokens.Input(
            headers: headers,
            body: body
        ))
    }
    /// Send a private message
    ///
    /// Send a private message to another player.
    ///
    ///
    /// - Remark: HTTP `POST /inbox/{username}`.
    /// - Remark: Generated from `#/paths//inbox/{username}/post(inboxUsername)`.
    internal func inboxUsername(
        path: Operations.inboxUsername.Input.Path,
        headers: Operations.inboxUsername.Input.Headers = .init(),
        body: Operations.inboxUsername.Input.Body
    ) async throws -> Operations.inboxUsername.Output {
        try await inboxUsername(Operations.inboxUsername.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get cloud evaluation of a position.
    ///
    /// Get the cached evaluation of a position, if available.
    /// Opening positions have more chances of being available. There are about 15 million positions in the database.
    /// Up to 5 variations may be available. Variants are supported.
    /// Use this endpoint to fetch a few positions here and there.
    /// If you want to download a lot of positions, [get the full list](https://database.lichess.org/#evals) from our exported database.
    ///
    ///
    /// - Remark: HTTP `GET /api/cloud-eval`.
    /// - Remark: Generated from `#/paths//api/cloud-eval/get(apiCloudEval)`.
    internal func apiCloudEval(
        query: Operations.apiCloudEval.Input.Query,
        headers: Operations.apiCloudEval.Input.Headers = .init()
    ) async throws -> Operations.apiCloudEval.Output {
        try await apiCloudEval(Operations.apiCloudEval.Input(
            query: query,
            headers: headers
        ))
    }
    /// List external engines
    ///
    /// Lists all external engines that have been registered for the user,
    /// and the credentials required to use them.
    ///
    ///
    /// - Remark: HTTP `GET /api/external-engine`.
    /// - Remark: Generated from `#/paths//api/external-engine/get(apiExternalEngineList)`.
    internal func apiExternalEngineList(headers: Operations.apiExternalEngineList.Input.Headers = .init()) async throws -> Operations.apiExternalEngineList.Output {
        try await apiExternalEngineList(Operations.apiExternalEngineList.Input(headers: headers))
    }
    /// Create external engine
    ///
    /// Registers a new external engine for the user. It can then be selected
    /// and used on the analysis board.
    /// After registering, the provider should start waiting for analyis requests.
    ///
    ///
    /// - Remark: HTTP `POST /api/external-engine`.
    /// - Remark: Generated from `#/paths//api/external-engine/post(apiExternalEngineCreate)`.
    internal func apiExternalEngineCreate(
        headers: Operations.apiExternalEngineCreate.Input.Headers = .init(),
        body: Operations.apiExternalEngineCreate.Input.Body
    ) async throws -> Operations.apiExternalEngineCreate.Output {
        try await apiExternalEngineCreate(Operations.apiExternalEngineCreate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Get external engine
    ///
    /// Get properties and credentials of an external engine.
    ///
    ///
    /// - Remark: HTTP `GET /api/external-engine/{id}`.
    /// - Remark: Generated from `#/paths//api/external-engine/{id}/get(apiExternalEngineGet)`.
    internal func apiExternalEngineGet(
        path: Operations.apiExternalEngineGet.Input.Path,
        headers: Operations.apiExternalEngineGet.Input.Headers = .init()
    ) async throws -> Operations.apiExternalEngineGet.Output {
        try await apiExternalEngineGet(Operations.apiExternalEngineGet.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update external engine
    ///
    /// Updates the properties of an external engine.
    ///
    ///
    /// - Remark: HTTP `PUT /api/external-engine/{id}`.
    /// - Remark: Generated from `#/paths//api/external-engine/{id}/put(apiExternalEnginePut)`.
    internal func apiExternalEnginePut(
        path: Operations.apiExternalEnginePut.Input.Path,
        headers: Operations.apiExternalEnginePut.Input.Headers = .init(),
        body: Operations.apiExternalEnginePut.Input.Body
    ) async throws -> Operations.apiExternalEnginePut.Output {
        try await apiExternalEnginePut(Operations.apiExternalEnginePut.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete external engine
    ///
    /// Unregisters an external engine.
    ///
    ///
    /// - Remark: HTTP `DELETE /api/external-engine/{id}`.
    /// - Remark: Generated from `#/paths//api/external-engine/{id}/delete(apiExternalEngineDelete)`.
    internal func apiExternalEngineDelete(
        path: Operations.apiExternalEngineDelete.Input.Path,
        headers: Operations.apiExternalEngineDelete.Input.Headers = .init()
    ) async throws -> Operations.apiExternalEngineDelete.Output {
        try await apiExternalEngineDelete(Operations.apiExternalEngineDelete.Input(
            path: path,
            headers: headers
        ))
    }
    /// Analyse with external engine
    ///
    /// **Endpoint: `https://engine.lichess.ovh/api/external-engine/{id}/analyse`**
    /// Request analysis from an external engine.
    /// Response content is streamed as [newline delimited JSON](#section/Introduction/Streaming-with-ND-JSON).
    /// The properties are based on the [UCI specification](https://backscattering.de/chess/uci/#engine).
    /// Analysis stops when the client goes away, the requested limit
    /// is reached, or the provider goes away.
    ///
    ///
    /// - Remark: HTTP `POST /api/external-engine/{id}/analyse`.
    /// - Remark: Generated from `#/paths//api/external-engine/{id}/analyse/post(apiExternalEngineAnalyse)`.
    internal func apiExternalEngineAnalyse(
        path: Operations.apiExternalEngineAnalyse.Input.Path,
        headers: Operations.apiExternalEngineAnalyse.Input.Headers = .init(),
        body: Operations.apiExternalEngineAnalyse.Input.Body
    ) async throws -> Operations.apiExternalEngineAnalyse.Output {
        try await apiExternalEngineAnalyse(Operations.apiExternalEngineAnalyse.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Acquire analysis request
    ///
    /// **Endpoint: `https://engine.lichess.ovh/api/external-engine/work`**
    /// Wait for an analysis requests to any of the external engines that
    /// have been registered with the given `secret`.
    /// Uses long polling.
    /// After acquiring a request, the provider should immediately
    /// [start streaming the results](#tag/External-engine/operation/apiExternalEngineSubmit).
    ///
    ///
    /// - Remark: HTTP `POST /api/external-engine/work`.
    /// - Remark: Generated from `#/paths//api/external-engine/work/post(apiExternalEngineAcquire)`.
    internal func apiExternalEngineAcquire(
        headers: Operations.apiExternalEngineAcquire.Input.Headers = .init(),
        body: Operations.apiExternalEngineAcquire.Input.Body
    ) async throws -> Operations.apiExternalEngineAcquire.Output {
        try await apiExternalEngineAcquire(Operations.apiExternalEngineAcquire.Input(
            headers: headers,
            body: body
        ))
    }
    /// Answer analysis request
    ///
    /// **Endpoint: `https://engine.lichess.ovh/api/external-engine/work/{id}`**
    /// Submit a stream of analysis as [UCI output](https://backscattering.de/chess/uci/#engine-info).
    /// * The engine should always be in `UCI_Chess960` mode.
    /// * `UCI_AnalyseMode` enabled if available.
    /// * It produces `info` with at least:
    ///   - `depth`
    ///   - `multipv` (between 1 and 5)
    ///   - `score`
    ///   - `nodes`
    ///   - `time`
    ///   - `pv`
    /// The server may close the connection at any time, indicating that
    /// the requester has gone away and analysis should be stopped.
    ///
    ///
    /// - Remark: HTTP `POST /api/external-engine/work/{id}`.
    /// - Remark: Generated from `#/paths//api/external-engine/work/{id}/post(apiExternalEngineSubmit)`.
    internal func apiExternalEngineSubmit(
        path: Operations.apiExternalEngineSubmit.Input.Path,
        body: Operations.apiExternalEngineSubmit.Input.Body
    ) async throws -> Operations.apiExternalEngineSubmit.Output {
        try await apiExternalEngineSubmit(Operations.apiExternalEngineSubmit.Input(
            path: path,
            body: body
        ))
    }
    /// Request authorization code
    ///
    /// OAuth2 authorization endpoint.
    /// Start the OAuth2 Authorization Code Flow with PKCE by securely
    /// generating two random strings unique to each authorization
    /// request:
    ///
    /// * `code_verifier`
    /// * `state`
    ///
    /// Store these in session storage. Make sure not to reveal `code_verifier`
    /// to eavesdroppers. Do not show it in URLs, do not abuse `state` to store
    /// it, do not send it over insecure connections. However it is fine if
    /// the user themselves can extract `code_verifier`, which will always be
    /// possible for fully client-side apps.
    /// Then send the user to this endpoint. They will be prompted to grant
    /// authorization and then be redirected back to the given `redirect_uri`.
    /// If the authorization failed, the following query string parameters will
    /// be appended to the redirection:
    ///
    /// * `error`, in particular with value `access_denied` if the user
    ///    cancelled authorization
    /// * `error_description` to aid debugging
    /// * `state`, exactly as passed in the `state` parameter
    ///
    /// If the authorization succeeded, the following query string parameters
    /// will be appended to the redirection:
    ///
    /// * `code`, containing a fresh short-lived authorization code
    /// * `state`, exactly as passed in the `state` parameter
    ///
    /// Next, to defend against cross site request forgery, check that the
    /// returned `state` matches the `state` you originally generated.
    ///
    /// Finally, continue by using the authorization code to
    /// [obtain an access token](#operation/apiToken).
    ///
    ///
    /// - Remark: HTTP `GET /oauth`.
    /// - Remark: Generated from `#/paths//oauth/get(oauth)`.
    internal func oauth(query: Operations.oauth.Input.Query) async throws -> Operations.oauth.Output {
        try await oauth(Operations.oauth.Input(query: query))
    }
    /// Obtain access token
    ///
    /// OAuth2 token endpoint. Exchanges an authorization code for an access token.
    ///
    ///
    /// - Remark: HTTP `POST /api/token`.
    /// - Remark: Generated from `#/paths//api/token/post(apiToken)`.
    internal func apiToken(
        headers: Operations.apiToken.Input.Headers = .init(),
        body: Operations.apiToken.Input.Body
    ) async throws -> Operations.apiToken.Output {
        try await apiToken(Operations.apiToken.Input(
            headers: headers,
            body: body
        ))
    }
    /// Revoke access token
    ///
    /// Revokes the access token sent as Bearer for this request.
    ///
    /// - Remark: HTTP `DELETE /api/token`.
    /// - Remark: Generated from `#/paths//api/token/delete(apiTokenDelete)`.
    internal func apiTokenDelete() async throws -> Operations.apiTokenDelete.Output {
        try await apiTokenDelete(Operations.apiTokenDelete.Input())
    }
    /// Test multiple OAuth tokens
    ///
    /// For up to 1000 OAuth tokens,
    /// returns their associated user ID and scopes,
    /// or `null` if the token is invalid.
    /// The method is `POST` so a longer list of tokens can be sent in the request body.
    ///
    ///
    /// - Remark: HTTP `POST /api/token/test`.
    /// - Remark: Generated from `#/paths//api/token/test/post(tokenTest)`.
    internal func tokenTest(
        headers: Operations.tokenTest.Input.Headers = .init(),
        body: Operations.tokenTest.Input.Body
    ) async throws -> Operations.tokenTest.Output {
        try await tokenTest(Operations.tokenTest.Input(
            headers: headers,
            body: body
        ))
    }
    /// Masters database
    ///
    /// **Endpoint: <https://explorer.lichess.ovh/masters>**
    ///
    /// Example: `curl https://explorer.lichess.ovh/masters?play=d2d4,d7d5,c2c4,c7c6,c4d5`
    ///
    ///
    /// - Remark: HTTP `GET /masters`.
    /// - Remark: Generated from `#/paths//masters/get(openingExplorerMaster)`.
    internal func openingExplorerMaster(
        query: Operations.openingExplorerMaster.Input.Query = .init(),
        headers: Operations.openingExplorerMaster.Input.Headers = .init()
    ) async throws -> Operations.openingExplorerMaster.Output {
        try await openingExplorerMaster(Operations.openingExplorerMaster.Input(
            query: query,
            headers: headers
        ))
    }
    /// Lichess games
    ///
    /// **Endpoint: <https://explorer.lichess.ovh/lichess>**
    ///
    /// Games sampled from all Lichess players.
    ///
    /// Example: `curl https://explorer.lichess.ovh/lichess?variant=standard&speeds=blitz,rapid,classical&ratings=2200,2500&fen=rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR%20w%20KQkq%20-%200%201`
    ///
    ///
    /// - Remark: HTTP `GET /lichess`.
    /// - Remark: Generated from `#/paths//lichess/get(openingExplorerLichess)`.
    internal func openingExplorerLichess(
        query: Operations.openingExplorerLichess.Input.Query = .init(),
        headers: Operations.openingExplorerLichess.Input.Headers = .init()
    ) async throws -> Operations.openingExplorerLichess.Output {
        try await openingExplorerLichess(Operations.openingExplorerLichess.Input(
            query: query,
            headers: headers
        ))
    }
    /// Player games
    ///
    /// **Endpoint: <https://explorer.lichess.ovh/player>**
    ///
    /// Games of a Lichess player.
    ///
    /// Responds with a stream of [newline delimited JSON](#section/Introduction/Streaming-with-ND-JSON). Will start indexing
    /// on demand, immediately respond with the current results, and stream
    /// more updates until indexing is complete. The stream is throttled
    /// and deduplicated. Empty lines may be sent to avoid timeouts.
    ///
    /// Will index new games at most once per minute, and revisit previously
    /// ongoing games at most once every day.
    ///
    /// Example: `curl https://explorer.lichess.ovh/player?player=revoof&color=white&play=d2d4,d7d5&recentGames=1`
    ///
    ///
    /// - Remark: HTTP `GET /player`.
    /// - Remark: Generated from `#/paths//player/get(openingExplorerPlayer)`.
    internal func openingExplorerPlayer(
        query: Operations.openingExplorerPlayer.Input.Query,
        headers: Operations.openingExplorerPlayer.Input.Headers = .init()
    ) async throws -> Operations.openingExplorerPlayer.Output {
        try await openingExplorerPlayer(Operations.openingExplorerPlayer.Input(
            query: query,
            headers: headers
        ))
    }
    /// OTB master game
    ///
    /// **Endpoint: `https://explorer.lichess.ovh/masters/pgn/{gameId}`**
    ///
    /// Example: `curl https://explorer.lichess.ovh/masters/pgn/aAbqI4ey`
    ///
    ///
    /// - Remark: HTTP `GET /master/pgn/{gameId}`.
    /// - Remark: Generated from `#/paths//master/pgn/{gameId}/get(openingExplorerMasterGame)`.
    internal func openingExplorerMasterGame(
        path: Operations.openingExplorerMasterGame.Input.Path,
        headers: Operations.openingExplorerMasterGame.Input.Headers = .init()
    ) async throws -> Operations.openingExplorerMasterGame.Output {
        try await openingExplorerMasterGame(Operations.openingExplorerMasterGame.Input(
            path: path,
            headers: headers
        ))
    }
    /// Tablebase lookup
    ///
    /// **Endpoint: <https://tablebase.lichess.ovh>**
    /// Example: `curl http://tablebase.lichess.ovh/standard?fen=4k3/6KP/8/8/8/8/7p/8_w_-_-_0_1`
    ///
    ///
    /// - Remark: HTTP `GET /standard`.
    /// - Remark: Generated from `#/paths//standard/get(tablebaseStandard)`.
    internal func tablebaseStandard(
        query: Operations.tablebaseStandard.Input.Query,
        headers: Operations.tablebaseStandard.Input.Headers = .init()
    ) async throws -> Operations.tablebaseStandard.Output {
        try await tablebaseStandard(Operations.tablebaseStandard.Input(
            query: query,
            headers: headers
        ))
    }
    /// Tablebase lookup for Atomic chess
    ///
    /// **Endpoint: <https://tablebase.lichess.ovh>**
    ///
    ///
    /// - Remark: HTTP `GET /atomic`.
    /// - Remark: Generated from `#/paths//atomic/get(tablebaseAtomic)`.
    internal func tablebaseAtomic(
        query: Operations.tablebaseAtomic.Input.Query,
        headers: Operations.tablebaseAtomic.Input.Headers = .init()
    ) async throws -> Operations.tablebaseAtomic.Output {
        try await tablebaseAtomic(Operations.tablebaseAtomic.Input(
            query: query,
            headers: headers
        ))
    }
    /// Tablebase lookup for Antichess
    ///
    /// **Endpoint: <https://tablebase.lichess.ovh>**
    ///
    ///
    /// - Remark: HTTP `GET /antichess`.
    /// - Remark: Generated from `#/paths//antichess/get(antichessAtomic)`.
    internal func antichessAtomic(
        query: Operations.antichessAtomic.Input.Query,
        headers: Operations.antichessAtomic.Input.Headers = .init()
    ) async throws -> Operations.antichessAtomic.Output {
        try await antichessAtomic(Operations.antichessAtomic.Input(
            query: query,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
internal enum Servers {
    internal static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://lichess.org",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
internal enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    internal enum Schemas {
        /// See [available flair list and images](https://github.com/lichess-org/lila/tree/master/public/flair)
        ///
        /// - Remark: Generated from `#/components/schemas/Flair`.
        internal typealias Flair = Swift.String
        /// only appears if the user is a titled player or a bot user
        ///
        /// - Remark: Generated from `#/components/schemas/Title`.
        @frozen internal enum Title: String, Codable, Hashable, Sendable {
            case GM = "GM"
            case WGM = "WGM"
            case IM = "IM"
            case WIM = "WIM"
            case FM = "FM"
            case WFM = "WFM"
            case NM = "NM"
            case CM = "CM"
            case WCM = "WCM"
            case WNM = "WNM"
            case LM = "LM"
            case BOT = "BOT"
        }
        /// - Remark: Generated from `#/components/schemas/TopUser`.
        internal struct TopUser: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TopUser/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/TopUser/username`.
            internal var username: Swift.String
            /// - Remark: Generated from `#/components/schemas/TopUser/perfs`.
            internal struct perfsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/TopUser/perfs/additionalProperties`.
                internal struct additionalPropertiesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/TopUser/perfs/additionalProperties/rating`.
                    internal var rating: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/TopUser/perfs/additionalProperties/progress`.
                    internal var progress: Swift.Int
                    /// Creates a new `additionalPropertiesPayload`.
                    ///
                    /// - Parameters:
                    ///   - rating:
                    ///   - progress:
                    internal init(
                        rating: Swift.Int,
                        progress: Swift.Int
                    ) {
                        self.rating = rating
                        self.progress = progress
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case rating
                        case progress
                    }
                }
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Components.Schemas.TopUser.perfsPayload.additionalPropertiesPayload]
                /// Creates a new `perfsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Components.Schemas.TopUser.perfsPayload.additionalPropertiesPayload] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/TopUser/perfs`.
            internal var perfs: Components.Schemas.TopUser.perfsPayload?
            /// - Remark: Generated from `#/components/schemas/TopUser/title`.
            internal var title: Components.Schemas.Title?
            /// - Remark: Generated from `#/components/schemas/TopUser/patron`.
            internal var patron: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TopUser/online`.
            internal var online: Swift.Bool?
            /// Creates a new `TopUser`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - username:
            ///   - perfs:
            ///   - title:
            ///   - patron:
            ///   - online:
            internal init(
                id: Swift.String,
                username: Swift.String,
                perfs: Components.Schemas.TopUser.perfsPayload? = nil,
                title: Components.Schemas.Title? = nil,
                patron: Swift.Bool? = nil,
                online: Swift.Bool? = nil
            ) {
                self.id = id
                self.username = username
                self.perfs = perfs
                self.title = title
                self.patron = patron
                self.online = online
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case username
                case perfs
                case title
                case patron
                case online
            }
        }
        /// - Remark: Generated from `#/components/schemas/PerfTop10`.
        internal typealias PerfTop10 = [Components.Schemas.TopUser]
        /// - Remark: Generated from `#/components/schemas/Top10s`.
        internal struct Top10s: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Top10s/bullet`.
            internal var bullet: Components.Schemas.PerfTop10
            /// - Remark: Generated from `#/components/schemas/Top10s/blitz`.
            internal var blitz: Components.Schemas.PerfTop10
            /// - Remark: Generated from `#/components/schemas/Top10s/rapid`.
            internal var rapid: Components.Schemas.PerfTop10
            /// - Remark: Generated from `#/components/schemas/Top10s/classical`.
            internal var classical: Components.Schemas.PerfTop10
            /// - Remark: Generated from `#/components/schemas/Top10s/ultraBullet`.
            internal var ultraBullet: Components.Schemas.PerfTop10
            /// - Remark: Generated from `#/components/schemas/Top10s/crazyhouse`.
            internal var crazyhouse: Components.Schemas.PerfTop10
            /// - Remark: Generated from `#/components/schemas/Top10s/chess960`.
            internal var chess960: Components.Schemas.PerfTop10
            /// - Remark: Generated from `#/components/schemas/Top10s/kingOfTheHill`.
            internal var kingOfTheHill: Components.Schemas.PerfTop10
            /// - Remark: Generated from `#/components/schemas/Top10s/threeCheck`.
            internal var threeCheck: Components.Schemas.PerfTop10
            /// - Remark: Generated from `#/components/schemas/Top10s/antichess`.
            internal var antichess: Components.Schemas.PerfTop10
            /// - Remark: Generated from `#/components/schemas/Top10s/atomic`.
            internal var atomic: Components.Schemas.PerfTop10
            /// - Remark: Generated from `#/components/schemas/Top10s/horde`.
            internal var horde: Components.Schemas.PerfTop10
            /// - Remark: Generated from `#/components/schemas/Top10s/racingKings`.
            internal var racingKings: Components.Schemas.PerfTop10
            /// Creates a new `Top10s`.
            ///
            /// - Parameters:
            ///   - bullet:
            ///   - blitz:
            ///   - rapid:
            ///   - classical:
            ///   - ultraBullet:
            ///   - crazyhouse:
            ///   - chess960:
            ///   - kingOfTheHill:
            ///   - threeCheck:
            ///   - antichess:
            ///   - atomic:
            ///   - horde:
            ///   - racingKings:
            internal init(
                bullet: Components.Schemas.PerfTop10,
                blitz: Components.Schemas.PerfTop10,
                rapid: Components.Schemas.PerfTop10,
                classical: Components.Schemas.PerfTop10,
                ultraBullet: Components.Schemas.PerfTop10,
                crazyhouse: Components.Schemas.PerfTop10,
                chess960: Components.Schemas.PerfTop10,
                kingOfTheHill: Components.Schemas.PerfTop10,
                threeCheck: Components.Schemas.PerfTop10,
                antichess: Components.Schemas.PerfTop10,
                atomic: Components.Schemas.PerfTop10,
                horde: Components.Schemas.PerfTop10,
                racingKings: Components.Schemas.PerfTop10
            ) {
                self.bullet = bullet
                self.blitz = blitz
                self.rapid = rapid
                self.classical = classical
                self.ultraBullet = ultraBullet
                self.crazyhouse = crazyhouse
                self.chess960 = chess960
                self.kingOfTheHill = kingOfTheHill
                self.threeCheck = threeCheck
                self.antichess = antichess
                self.atomic = atomic
                self.horde = horde
                self.racingKings = racingKings
            }
            internal enum CodingKeys: String, CodingKey {
                case bullet
                case blitz
                case rapid
                case classical
                case ultraBullet
                case crazyhouse
                case chess960
                case kingOfTheHill
                case threeCheck
                case antichess
                case atomic
                case horde
                case racingKings
            }
        }
        /// - Remark: Generated from `#/components/schemas/Leaderboard`.
        internal struct Leaderboard: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Leaderboard/users`.
            internal var users: [Components.Schemas.TopUser]
            /// Creates a new `Leaderboard`.
            ///
            /// - Parameters:
            ///   - users:
            internal init(users: [Components.Schemas.TopUser]) {
                self.users = users
            }
            internal enum CodingKeys: String, CodingKey {
                case users
            }
        }
        /// - Remark: Generated from `#/components/schemas/Perf`.
        internal struct Perf: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Perf/games`.
            internal var games: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Perf/rating`.
            internal var rating: Swift.Int
            /// rating deviation
            ///
            /// - Remark: Generated from `#/components/schemas/Perf/rd`.
            internal var rd: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Perf/prog`.
            internal var prog: Swift.Int
            /// only appears if a user's perf rating are [provisional](https://lichess.org/faq#provisional)
            ///
            /// - Remark: Generated from `#/components/schemas/Perf/prov`.
            internal var prov: Swift.Bool?
            /// Creates a new `Perf`.
            ///
            /// - Parameters:
            ///   - games:
            ///   - rating:
            ///   - rd: rating deviation
            ///   - prog:
            ///   - prov: only appears if a user's perf rating are [provisional](https://lichess.org/faq#provisional)
            internal init(
                games: Swift.Int,
                rating: Swift.Int,
                rd: Swift.Int,
                prog: Swift.Int,
                prov: Swift.Bool? = nil
            ) {
                self.games = games
                self.rating = rating
                self.rd = rd
                self.prog = prog
                self.prov = prov
            }
            internal enum CodingKeys: String, CodingKey {
                case games
                case rating
                case rd
                case prog
                case prov
            }
        }
        /// - Remark: Generated from `#/components/schemas/PuzzleModePerf`.
        internal struct PuzzleModePerf: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PuzzleModePerf/runs`.
            internal var runs: Swift.Int
            /// - Remark: Generated from `#/components/schemas/PuzzleModePerf/score`.
            internal var score: Swift.Int
            /// Creates a new `PuzzleModePerf`.
            ///
            /// - Parameters:
            ///   - runs:
            ///   - score:
            internal init(
                runs: Swift.Int,
                score: Swift.Int
            ) {
                self.runs = runs
                self.score = score
            }
            internal enum CodingKeys: String, CodingKey {
                case runs
                case score
            }
        }
        /// - Remark: Generated from `#/components/schemas/Perfs`.
        internal struct Perfs: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Perfs/chess960`.
            internal var chess960: Components.Schemas.Perf?
            /// - Remark: Generated from `#/components/schemas/Perfs/atomic`.
            internal var atomic: Components.Schemas.Perf?
            /// - Remark: Generated from `#/components/schemas/Perfs/racingKings`.
            internal var racingKings: Components.Schemas.Perf?
            /// - Remark: Generated from `#/components/schemas/Perfs/ultraBullet`.
            internal var ultraBullet: Components.Schemas.Perf?
            /// - Remark: Generated from `#/components/schemas/Perfs/blitz`.
            internal var blitz: Components.Schemas.Perf?
            /// - Remark: Generated from `#/components/schemas/Perfs/kingOfTheHill`.
            internal var kingOfTheHill: Components.Schemas.Perf?
            /// - Remark: Generated from `#/components/schemas/Perfs/threeCheck`.
            internal var threeCheck: Components.Schemas.Perf?
            /// - Remark: Generated from `#/components/schemas/Perfs/antichess`.
            internal var antichess: Components.Schemas.Perf?
            /// - Remark: Generated from `#/components/schemas/Perfs/crazyhouse`.
            internal var crazyhouse: Components.Schemas.Perf?
            /// - Remark: Generated from `#/components/schemas/Perfs/bullet`.
            internal var bullet: Components.Schemas.Perf?
            /// - Remark: Generated from `#/components/schemas/Perfs/correspondence`.
            internal var correspondence: Components.Schemas.Perf?
            /// - Remark: Generated from `#/components/schemas/Perfs/horde`.
            internal var horde: Components.Schemas.Perf?
            /// - Remark: Generated from `#/components/schemas/Perfs/puzzle`.
            internal var puzzle: Components.Schemas.Perf?
            /// - Remark: Generated from `#/components/schemas/Perfs/classical`.
            internal var classical: Components.Schemas.Perf?
            /// - Remark: Generated from `#/components/schemas/Perfs/rapid`.
            internal var rapid: Components.Schemas.Perf?
            /// - Remark: Generated from `#/components/schemas/Perfs/storm`.
            internal var storm: Components.Schemas.PuzzleModePerf?
            /// - Remark: Generated from `#/components/schemas/Perfs/racer`.
            internal var racer: Components.Schemas.PuzzleModePerf?
            /// - Remark: Generated from `#/components/schemas/Perfs/streak`.
            internal var streak: Components.Schemas.PuzzleModePerf?
            /// Creates a new `Perfs`.
            ///
            /// - Parameters:
            ///   - chess960:
            ///   - atomic:
            ///   - racingKings:
            ///   - ultraBullet:
            ///   - blitz:
            ///   - kingOfTheHill:
            ///   - threeCheck:
            ///   - antichess:
            ///   - crazyhouse:
            ///   - bullet:
            ///   - correspondence:
            ///   - horde:
            ///   - puzzle:
            ///   - classical:
            ///   - rapid:
            ///   - storm:
            ///   - racer:
            ///   - streak:
            internal init(
                chess960: Components.Schemas.Perf? = nil,
                atomic: Components.Schemas.Perf? = nil,
                racingKings: Components.Schemas.Perf? = nil,
                ultraBullet: Components.Schemas.Perf? = nil,
                blitz: Components.Schemas.Perf? = nil,
                kingOfTheHill: Components.Schemas.Perf? = nil,
                threeCheck: Components.Schemas.Perf? = nil,
                antichess: Components.Schemas.Perf? = nil,
                crazyhouse: Components.Schemas.Perf? = nil,
                bullet: Components.Schemas.Perf? = nil,
                correspondence: Components.Schemas.Perf? = nil,
                horde: Components.Schemas.Perf? = nil,
                puzzle: Components.Schemas.Perf? = nil,
                classical: Components.Schemas.Perf? = nil,
                rapid: Components.Schemas.Perf? = nil,
                storm: Components.Schemas.PuzzleModePerf? = nil,
                racer: Components.Schemas.PuzzleModePerf? = nil,
                streak: Components.Schemas.PuzzleModePerf? = nil
            ) {
                self.chess960 = chess960
                self.atomic = atomic
                self.racingKings = racingKings
                self.ultraBullet = ultraBullet
                self.blitz = blitz
                self.kingOfTheHill = kingOfTheHill
                self.threeCheck = threeCheck
                self.antichess = antichess
                self.crazyhouse = crazyhouse
                self.bullet = bullet
                self.correspondence = correspondence
                self.horde = horde
                self.puzzle = puzzle
                self.classical = classical
                self.rapid = rapid
                self.storm = storm
                self.racer = racer
                self.streak = streak
            }
            internal enum CodingKeys: String, CodingKey {
                case chess960
                case atomic
                case racingKings
                case ultraBullet
                case blitz
                case kingOfTheHill
                case threeCheck
                case antichess
                case crazyhouse
                case bullet
                case correspondence
                case horde
                case puzzle
                case classical
                case rapid
                case storm
                case racer
                case streak
            }
        }
        /// - Remark: Generated from `#/components/schemas/Profile`.
        internal struct Profile: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Profile/flag`.
            internal var flag: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Profile/location`.
            internal var location: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Profile/bio`.
            internal var bio: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Profile/realName`.
            internal var realName: Swift.String?
            /// only appears if a user has set them
            ///
            /// - Remark: Generated from `#/components/schemas/Profile/fideRating`.
            internal var fideRating: Swift.Int?
            /// only appears if a user has set them
            ///
            /// - Remark: Generated from `#/components/schemas/Profile/uscfRating`.
            internal var uscfRating: Swift.Int?
            /// only appears if a user has set them
            ///
            /// - Remark: Generated from `#/components/schemas/Profile/ecfRating`.
            internal var ecfRating: Swift.Int?
            /// only appears if a user has set them
            ///
            /// - Remark: Generated from `#/components/schemas/Profile/cfcRating`.
            internal var cfcRating: Swift.Int?
            /// only appears if a user has set them
            ///
            /// - Remark: Generated from `#/components/schemas/Profile/rcfRating`.
            internal var rcfRating: Swift.Int?
            /// only appears if a user has set them
            ///
            /// - Remark: Generated from `#/components/schemas/Profile/dsbRating`.
            internal var dsbRating: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Profile/links`.
            internal var links: Swift.String?
            /// Creates a new `Profile`.
            ///
            /// - Parameters:
            ///   - flag:
            ///   - location:
            ///   - bio:
            ///   - realName:
            ///   - fideRating: only appears if a user has set them
            ///   - uscfRating: only appears if a user has set them
            ///   - ecfRating: only appears if a user has set them
            ///   - cfcRating: only appears if a user has set them
            ///   - rcfRating: only appears if a user has set them
            ///   - dsbRating: only appears if a user has set them
            ///   - links:
            internal init(
                flag: Swift.String? = nil,
                location: Swift.String? = nil,
                bio: Swift.String? = nil,
                realName: Swift.String? = nil,
                fideRating: Swift.Int? = nil,
                uscfRating: Swift.Int? = nil,
                ecfRating: Swift.Int? = nil,
                cfcRating: Swift.Int? = nil,
                rcfRating: Swift.Int? = nil,
                dsbRating: Swift.Int? = nil,
                links: Swift.String? = nil
            ) {
                self.flag = flag
                self.location = location
                self.bio = bio
                self.realName = realName
                self.fideRating = fideRating
                self.uscfRating = uscfRating
                self.ecfRating = ecfRating
                self.cfcRating = cfcRating
                self.rcfRating = rcfRating
                self.dsbRating = dsbRating
                self.links = links
            }
            internal enum CodingKeys: String, CodingKey {
                case flag
                case location
                case bio
                case realName
                case fideRating
                case uscfRating
                case ecfRating
                case cfcRating
                case rcfRating
                case dsbRating
                case links
            }
        }
        /// - Remark: Generated from `#/components/schemas/PlayTime`.
        internal struct PlayTime: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PlayTime/total`.
            internal var total: Swift.Int
            /// - Remark: Generated from `#/components/schemas/PlayTime/tv`.
            internal var tv: Swift.Int
            /// Creates a new `PlayTime`.
            ///
            /// - Parameters:
            ///   - total:
            ///   - tv:
            internal init(
                total: Swift.Int,
                tv: Swift.Int
            ) {
                self.total = total
                self.tv = tv
            }
            internal enum CodingKeys: String, CodingKey {
                case total
                case tv
            }
        }
        /// - Remark: Generated from `#/components/schemas/User`.
        internal struct User: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/User/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/User/username`.
            internal var username: Swift.String
            /// - Remark: Generated from `#/components/schemas/User/perfs`.
            internal var perfs: Components.Schemas.Perfs?
            /// - Remark: Generated from `#/components/schemas/User/title`.
            internal var title: Components.Schemas.Title?
            /// - Remark: Generated from `#/components/schemas/User/flair`.
            internal var flair: Components.Schemas.Flair?
            /// - Remark: Generated from `#/components/schemas/User/createdAt`.
            internal var createdAt: Swift.Int64?
            /// only appears if a user's account is closed
            ///
            /// - Remark: Generated from `#/components/schemas/User/disabled`.
            internal var disabled: Swift.Bool?
            /// only appears if a user's account is marked for the violation of [Lichess TOS](https://lichess.org/terms-of-service)
            ///
            /// - Remark: Generated from `#/components/schemas/User/tosViolation`.
            internal var tosViolation: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/User/profile`.
            internal var profile: Components.Schemas.Profile?
            /// - Remark: Generated from `#/components/schemas/User/seenAt`.
            internal var seenAt: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/User/playTime`.
            internal var playTime: Components.Schemas.PlayTime?
            /// - Remark: Generated from `#/components/schemas/User/patron`.
            internal var patron: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/User/verified`.
            internal var verified: Swift.Bool?
            /// Creates a new `User`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - username:
            ///   - perfs:
            ///   - title:
            ///   - flair:
            ///   - createdAt:
            ///   - disabled: only appears if a user's account is closed
            ///   - tosViolation: only appears if a user's account is marked for the violation of [Lichess TOS](https://lichess.org/terms-of-service)
            ///   - profile:
            ///   - seenAt:
            ///   - playTime:
            ///   - patron:
            ///   - verified:
            internal init(
                id: Swift.String,
                username: Swift.String,
                perfs: Components.Schemas.Perfs? = nil,
                title: Components.Schemas.Title? = nil,
                flair: Components.Schemas.Flair? = nil,
                createdAt: Swift.Int64? = nil,
                disabled: Swift.Bool? = nil,
                tosViolation: Swift.Bool? = nil,
                profile: Components.Schemas.Profile? = nil,
                seenAt: Swift.Int64? = nil,
                playTime: Components.Schemas.PlayTime? = nil,
                patron: Swift.Bool? = nil,
                verified: Swift.Bool? = nil
            ) {
                self.id = id
                self.username = username
                self.perfs = perfs
                self.title = title
                self.flair = flair
                self.createdAt = createdAt
                self.disabled = disabled
                self.tosViolation = tosViolation
                self.profile = profile
                self.seenAt = seenAt
                self.playTime = playTime
                self.patron = patron
                self.verified = verified
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case username
                case perfs
                case title
                case flair
                case createdAt
                case disabled
                case tosViolation
                case profile
                case seenAt
                case playTime
                case patron
                case verified
            }
        }
        /// - Remark: Generated from `#/components/schemas/Count`.
        internal struct Count: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Count/all`.
            internal var all: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Count/rated`.
            internal var rated: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Count/ai`.
            internal var ai: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Count/draw`.
            internal var draw: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Count/drawH`.
            internal var drawH: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Count/loss`.
            internal var loss: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Count/lossH`.
            internal var lossH: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Count/win`.
            internal var win: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Count/winH`.
            internal var winH: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Count/bookmark`.
            internal var bookmark: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Count/playing`.
            internal var playing: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Count/import`.
            internal var _import: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Count/me`.
            internal var me: Swift.Int
            /// Creates a new `Count`.
            ///
            /// - Parameters:
            ///   - all:
            ///   - rated:
            ///   - ai:
            ///   - draw:
            ///   - drawH:
            ///   - loss:
            ///   - lossH:
            ///   - win:
            ///   - winH:
            ///   - bookmark:
            ///   - playing:
            ///   - _import:
            ///   - me:
            internal init(
                all: Swift.Int,
                rated: Swift.Int,
                ai: Swift.Int,
                draw: Swift.Int,
                drawH: Swift.Int,
                loss: Swift.Int,
                lossH: Swift.Int,
                win: Swift.Int,
                winH: Swift.Int,
                bookmark: Swift.Int,
                playing: Swift.Int,
                _import: Swift.Int,
                me: Swift.Int
            ) {
                self.all = all
                self.rated = rated
                self.ai = ai
                self.draw = draw
                self.drawH = drawH
                self.loss = loss
                self.lossH = lossH
                self.win = win
                self.winH = winH
                self.bookmark = bookmark
                self.playing = playing
                self._import = _import
                self.me = me
            }
            internal enum CodingKeys: String, CodingKey {
                case all
                case rated
                case ai
                case draw
                case drawH
                case loss
                case lossH
                case win
                case winH
                case bookmark
                case playing
                case _import = "import"
                case me
            }
        }
        /// - Remark: Generated from `#/components/schemas/UserStreamer`.
        internal struct UserStreamer: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UserStreamer/twitch`.
            internal struct twitchPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/UserStreamer/twitch/channel`.
                internal var channel: Swift.String?
                /// Creates a new `twitchPayload`.
                ///
                /// - Parameters:
                ///   - channel:
                internal init(channel: Swift.String? = nil) {
                    self.channel = channel
                }
                internal enum CodingKeys: String, CodingKey {
                    case channel
                }
            }
            /// - Remark: Generated from `#/components/schemas/UserStreamer/twitch`.
            internal var twitch: Components.Schemas.UserStreamer.twitchPayload?
            /// - Remark: Generated from `#/components/schemas/UserStreamer/youTube`.
            internal struct youTubePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/UserStreamer/youTube/channel`.
                internal var channel: Swift.String?
                /// Creates a new `youTubePayload`.
                ///
                /// - Parameters:
                ///   - channel:
                internal init(channel: Swift.String? = nil) {
                    self.channel = channel
                }
                internal enum CodingKeys: String, CodingKey {
                    case channel
                }
            }
            /// - Remark: Generated from `#/components/schemas/UserStreamer/youTube`.
            internal var youTube: Components.Schemas.UserStreamer.youTubePayload?
            /// Creates a new `UserStreamer`.
            ///
            /// - Parameters:
            ///   - twitch:
            ///   - youTube:
            internal init(
                twitch: Components.Schemas.UserStreamer.twitchPayload? = nil,
                youTube: Components.Schemas.UserStreamer.youTubePayload? = nil
            ) {
                self.twitch = twitch
                self.youTube = youTube
            }
            internal enum CodingKeys: String, CodingKey {
                case twitch
                case youTube
            }
        }
        /// - Remark: Generated from `#/components/schemas/UserExtended`.
        internal struct UserExtended: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UserExtended/value1`.
            internal var value1: Components.Schemas.User
            /// - Remark: Generated from `#/components/schemas/UserExtended/value2`.
            internal struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/UserExtended/value2/url`.
                internal var url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/UserExtended/value2/playing`.
                internal var playing: Swift.String?
                /// - Remark: Generated from `#/components/schemas/UserExtended/value2/count`.
                internal var count: Components.Schemas.Count?
                /// - Remark: Generated from `#/components/schemas/UserExtended/value2/streaming`.
                internal var streaming: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/UserExtended/value2/streamer`.
                internal var streamer: Components.Schemas.UserStreamer?
                /// only appears if the request is [authenticated with OAuth2](#section/Introduction/Authentication)
                ///
                /// - Remark: Generated from `#/components/schemas/UserExtended/value2/followable`.
                internal var followable: Swift.Bool?
                /// only appears if the request is [authenticated with OAuth2](#section/Introduction/Authentication)
                ///
                /// - Remark: Generated from `#/components/schemas/UserExtended/value2/following`.
                internal var following: Swift.Bool?
                /// only appears if the request is [authenticated with OAuth2](#section/Introduction/Authentication)
                ///
                /// - Remark: Generated from `#/components/schemas/UserExtended/value2/blocking`.
                internal var blocking: Swift.Bool?
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - url:
                ///   - playing:
                ///   - count:
                ///   - streaming:
                ///   - streamer:
                ///   - followable: only appears if the request is [authenticated with OAuth2](#section/Introduction/Authentication)
                ///   - following: only appears if the request is [authenticated with OAuth2](#section/Introduction/Authentication)
                ///   - blocking: only appears if the request is [authenticated with OAuth2](#section/Introduction/Authentication)
                internal init(
                    url: Swift.String? = nil,
                    playing: Swift.String? = nil,
                    count: Components.Schemas.Count? = nil,
                    streaming: Swift.Bool? = nil,
                    streamer: Components.Schemas.UserStreamer? = nil,
                    followable: Swift.Bool? = nil,
                    following: Swift.Bool? = nil,
                    blocking: Swift.Bool? = nil
                ) {
                    self.url = url
                    self.playing = playing
                    self.count = count
                    self.streaming = streaming
                    self.streamer = streamer
                    self.followable = followable
                    self.following = following
                    self.blocking = blocking
                }
                internal enum CodingKeys: String, CodingKey {
                    case url
                    case playing
                    case count
                    case streaming
                    case streamer
                    case followable
                    case following
                    case blocking
                }
            }
            /// - Remark: Generated from `#/components/schemas/UserExtended/value2`.
            internal var value2: Components.Schemas.UserExtended.Value2Payload
            /// Creates a new `UserExtended`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            internal init(
                value1: Components.Schemas.User,
                value2: Components.Schemas.UserExtended.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            internal init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            internal func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/RatingHistory`.
        internal typealias RatingHistory = OpenAPIRuntime.OpenAPIValueContainer
        /// - Remark: Generated from `#/components/schemas/PerfType`.
        @frozen internal enum PerfType: String, Codable, Hashable, Sendable {
            case ultraBullet = "ultraBullet"
            case bullet = "bullet"
            case blitz = "blitz"
            case rapid = "rapid"
            case classical = "classical"
            case correspondence = "correspondence"
            case chess960 = "chess960"
            case crazyhouse = "crazyhouse"
            case antichess = "antichess"
            case atomic = "atomic"
            case horde = "horde"
            case kingOfTheHill = "kingOfTheHill"
            case racingKings = "racingKings"
            case threeCheck = "threeCheck"
        }
        /// - Remark: Generated from `#/components/schemas/PerfStat`.
        internal typealias PerfStat = OpenAPIRuntime.OpenAPIValueContainer
        /// - Remark: Generated from `#/components/schemas/UserActivityScore`.
        internal struct UserActivityScore: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UserActivityScore/win`.
            internal var win: Swift.Double
            /// - Remark: Generated from `#/components/schemas/UserActivityScore/loss`.
            internal var loss: Swift.Double
            /// - Remark: Generated from `#/components/schemas/UserActivityScore/draw`.
            internal var draw: Swift.Double
            /// - Remark: Generated from `#/components/schemas/UserActivityScore/rp`.
            internal struct rpPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/UserActivityScore/rp/before`.
                internal var before: Swift.Double?
                /// - Remark: Generated from `#/components/schemas/UserActivityScore/rp/after`.
                internal var after: Swift.Double?
                /// Creates a new `rpPayload`.
                ///
                /// - Parameters:
                ///   - before:
                ///   - after:
                internal init(
                    before: Swift.Double? = nil,
                    after: Swift.Double? = nil
                ) {
                    self.before = before
                    self.after = after
                }
                internal enum CodingKeys: String, CodingKey {
                    case before
                    case after
                }
            }
            /// - Remark: Generated from `#/components/schemas/UserActivityScore/rp`.
            internal var rp: Components.Schemas.UserActivityScore.rpPayload
            /// Creates a new `UserActivityScore`.
            ///
            /// - Parameters:
            ///   - win:
            ///   - loss:
            ///   - draw:
            ///   - rp:
            internal init(
                win: Swift.Double,
                loss: Swift.Double,
                draw: Swift.Double,
                rp: Components.Schemas.UserActivityScore.rpPayload
            ) {
                self.win = win
                self.loss = loss
                self.draw = draw
                self.rp = rp
            }
            internal enum CodingKeys: String, CodingKey {
                case win
                case loss
                case draw
                case rp
            }
        }
        /// - Remark: Generated from `#/components/schemas/GameColor`.
        @frozen internal enum GameColor: String, Codable, Hashable, Sendable {
            case white = "white"
            case black = "black"
        }
        /// - Remark: Generated from `#/components/schemas/VariantKey`.
        @frozen internal enum VariantKey: String, Codable, Hashable, Sendable {
            case standard = "standard"
            case chess960 = "chess960"
            case crazyhouse = "crazyhouse"
            case antichess = "antichess"
            case atomic = "atomic"
            case horde = "horde"
            case kingOfTheHill = "kingOfTheHill"
            case racingKings = "racingKings"
            case threeCheck = "threeCheck"
            case fromPosition = "fromPosition"
        }
        /// - Remark: Generated from `#/components/schemas/UserActivityCorrespondenceGame`.
        internal struct UserActivityCorrespondenceGame: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UserActivityCorrespondenceGame/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/UserActivityCorrespondenceGame/color`.
            internal var color: Components.Schemas.GameColor
            /// - Remark: Generated from `#/components/schemas/UserActivityCorrespondenceGame/url`.
            internal var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/UserActivityCorrespondenceGame/variant`.
            internal var variant: Components.Schemas.VariantKey
            /// - Remark: Generated from `#/components/schemas/UserActivityCorrespondenceGame/speed`.
            @frozen internal enum speedPayload: String, Codable, Hashable, Sendable {
                case correspondence = "correspondence"
            }
            /// - Remark: Generated from `#/components/schemas/UserActivityCorrespondenceGame/speed`.
            internal var speed: Components.Schemas.UserActivityCorrespondenceGame.speedPayload
            /// - Remark: Generated from `#/components/schemas/UserActivityCorrespondenceGame/perf`.
            @frozen internal enum perfPayload: String, Codable, Hashable, Sendable {
                case correspondence = "correspondence"
            }
            /// - Remark: Generated from `#/components/schemas/UserActivityCorrespondenceGame/perf`.
            internal var perf: Components.Schemas.UserActivityCorrespondenceGame.perfPayload
            /// - Remark: Generated from `#/components/schemas/UserActivityCorrespondenceGame/rated`.
            internal var rated: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/UserActivityCorrespondenceGame/opponent`.
            internal struct opponentPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/UserActivityCorrespondenceGame/opponent/user`.
                internal var user: Swift.String
                /// - Remark: Generated from `#/components/schemas/UserActivityCorrespondenceGame/opponent/rating`.
                internal var rating: Swift.Double
                /// Creates a new `opponentPayload`.
                ///
                /// - Parameters:
                ///   - user:
                ///   - rating:
                internal init(
                    user: Swift.String,
                    rating: Swift.Double
                ) {
                    self.user = user
                    self.rating = rating
                }
                internal enum CodingKeys: String, CodingKey {
                    case user
                    case rating
                }
            }
            /// - Remark: Generated from `#/components/schemas/UserActivityCorrespondenceGame/opponent`.
            internal var opponent: Components.Schemas.UserActivityCorrespondenceGame.opponentPayload
            /// Creates a new `UserActivityCorrespondenceGame`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - color:
            ///   - url:
            ///   - variant:
            ///   - speed:
            ///   - perf:
            ///   - rated:
            ///   - opponent:
            internal init(
                id: Swift.String,
                color: Components.Schemas.GameColor,
                url: Swift.String,
                variant: Components.Schemas.VariantKey,
                speed: Components.Schemas.UserActivityCorrespondenceGame.speedPayload,
                perf: Components.Schemas.UserActivityCorrespondenceGame.perfPayload,
                rated: Swift.Bool,
                opponent: Components.Schemas.UserActivityCorrespondenceGame.opponentPayload
            ) {
                self.id = id
                self.color = color
                self.url = url
                self.variant = variant
                self.speed = speed
                self.perf = perf
                self.rated = rated
                self.opponent = opponent
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case color
                case url
                case variant
                case speed
                case perf
                case rated
                case opponent
            }
        }
        /// - Remark: Generated from `#/components/schemas/UserActivityFollowList`.
        internal struct UserActivityFollowList: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UserActivityFollowList/ids`.
            internal var ids: [Swift.String]
            /// - Remark: Generated from `#/components/schemas/UserActivityFollowList/nb`.
            internal var nb: Swift.Double?
            /// Creates a new `UserActivityFollowList`.
            ///
            /// - Parameters:
            ///   - ids:
            ///   - nb:
            internal init(
                ids: [Swift.String],
                nb: Swift.Double? = nil
            ) {
                self.ids = ids
                self.nb = nb
            }
            internal enum CodingKeys: String, CodingKey {
                case ids
                case nb
            }
        }
        /// - Remark: Generated from `#/components/schemas/UserActivity`.
        internal struct UserActivity: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UserActivity/interval`.
            internal struct intervalPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/UserActivity/interval/start`.
                internal var start: Swift.Double
                /// - Remark: Generated from `#/components/schemas/UserActivity/interval/end`.
                internal var end: Swift.Double
                /// Creates a new `intervalPayload`.
                ///
                /// - Parameters:
                ///   - start:
                ///   - end:
                internal init(
                    start: Swift.Double,
                    end: Swift.Double
                ) {
                    self.start = start
                    self.end = end
                }
                internal enum CodingKeys: String, CodingKey {
                    case start
                    case end
                }
            }
            /// - Remark: Generated from `#/components/schemas/UserActivity/interval`.
            internal var interval: Components.Schemas.UserActivity.intervalPayload
            /// - Remark: Generated from `#/components/schemas/UserActivity/games`.
            internal struct gamesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/UserActivity/games/chess960`.
                internal var chess960: Components.Schemas.UserActivityScore?
                /// - Remark: Generated from `#/components/schemas/UserActivity/games/atomic`.
                internal var atomic: Components.Schemas.UserActivityScore?
                /// - Remark: Generated from `#/components/schemas/UserActivity/games/racingKings`.
                internal var racingKings: Components.Schemas.UserActivityScore?
                /// - Remark: Generated from `#/components/schemas/UserActivity/games/ultraBullet`.
                internal var ultraBullet: Components.Schemas.UserActivityScore?
                /// - Remark: Generated from `#/components/schemas/UserActivity/games/blitz`.
                internal var blitz: Components.Schemas.UserActivityScore?
                /// - Remark: Generated from `#/components/schemas/UserActivity/games/kingOfTheHill`.
                internal var kingOfTheHill: Components.Schemas.UserActivityScore?
                /// - Remark: Generated from `#/components/schemas/UserActivity/games/bullet`.
                internal var bullet: Components.Schemas.UserActivityScore?
                /// - Remark: Generated from `#/components/schemas/UserActivity/games/correspondence`.
                internal var correspondence: Components.Schemas.UserActivityScore?
                /// - Remark: Generated from `#/components/schemas/UserActivity/games/horde`.
                internal var horde: Components.Schemas.UserActivityScore?
                /// - Remark: Generated from `#/components/schemas/UserActivity/games/puzzle`.
                internal var puzzle: Components.Schemas.UserActivityScore?
                /// - Remark: Generated from `#/components/schemas/UserActivity/games/classical`.
                internal var classical: Components.Schemas.UserActivityScore?
                /// - Remark: Generated from `#/components/schemas/UserActivity/games/rapid`.
                internal var rapid: Components.Schemas.UserActivityScore?
                /// Creates a new `gamesPayload`.
                ///
                /// - Parameters:
                ///   - chess960:
                ///   - atomic:
                ///   - racingKings:
                ///   - ultraBullet:
                ///   - blitz:
                ///   - kingOfTheHill:
                ///   - bullet:
                ///   - correspondence:
                ///   - horde:
                ///   - puzzle:
                ///   - classical:
                ///   - rapid:
                internal init(
                    chess960: Components.Schemas.UserActivityScore? = nil,
                    atomic: Components.Schemas.UserActivityScore? = nil,
                    racingKings: Components.Schemas.UserActivityScore? = nil,
                    ultraBullet: Components.Schemas.UserActivityScore? = nil,
                    blitz: Components.Schemas.UserActivityScore? = nil,
                    kingOfTheHill: Components.Schemas.UserActivityScore? = nil,
                    bullet: Components.Schemas.UserActivityScore? = nil,
                    correspondence: Components.Schemas.UserActivityScore? = nil,
                    horde: Components.Schemas.UserActivityScore? = nil,
                    puzzle: Components.Schemas.UserActivityScore? = nil,
                    classical: Components.Schemas.UserActivityScore? = nil,
                    rapid: Components.Schemas.UserActivityScore? = nil
                ) {
                    self.chess960 = chess960
                    self.atomic = atomic
                    self.racingKings = racingKings
                    self.ultraBullet = ultraBullet
                    self.blitz = blitz
                    self.kingOfTheHill = kingOfTheHill
                    self.bullet = bullet
                    self.correspondence = correspondence
                    self.horde = horde
                    self.puzzle = puzzle
                    self.classical = classical
                    self.rapid = rapid
                }
                internal enum CodingKeys: String, CodingKey {
                    case chess960
                    case atomic
                    case racingKings
                    case ultraBullet
                    case blitz
                    case kingOfTheHill
                    case bullet
                    case correspondence
                    case horde
                    case puzzle
                    case classical
                    case rapid
                }
            }
            /// - Remark: Generated from `#/components/schemas/UserActivity/games`.
            internal var games: Components.Schemas.UserActivity.gamesPayload?
            /// - Remark: Generated from `#/components/schemas/UserActivity/puzzles`.
            internal struct puzzlesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/UserActivity/puzzles/score`.
                internal var score: Components.Schemas.UserActivityScore?
                /// Creates a new `puzzlesPayload`.
                ///
                /// - Parameters:
                ///   - score:
                internal init(score: Components.Schemas.UserActivityScore? = nil) {
                    self.score = score
                }
                internal enum CodingKeys: String, CodingKey {
                    case score
                }
            }
            /// - Remark: Generated from `#/components/schemas/UserActivity/puzzles`.
            internal var puzzles: Components.Schemas.UserActivity.puzzlesPayload?
            /// - Remark: Generated from `#/components/schemas/UserActivity/storm`.
            internal var storm: Components.Schemas.PuzzleModePerf?
            /// - Remark: Generated from `#/components/schemas/UserActivity/racer`.
            internal var racer: Components.Schemas.PuzzleModePerf?
            /// - Remark: Generated from `#/components/schemas/UserActivity/streak`.
            internal var streak: Components.Schemas.PuzzleModePerf?
            /// - Remark: Generated from `#/components/schemas/UserActivity/tournaments`.
            internal struct tournamentsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/UserActivity/tournaments/nb`.
                internal var nb: Swift.Double?
                /// - Remark: Generated from `#/components/schemas/UserActivity/tournaments/bestPayload`.
                internal struct bestPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/UserActivity/tournaments/bestPayload/tournament`.
                    internal struct tournamentPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/UserActivity/tournaments/bestPayload/tournament/id`.
                        internal var id: Swift.String
                        /// - Remark: Generated from `#/components/schemas/UserActivity/tournaments/bestPayload/tournament/name`.
                        internal var name: Swift.String
                        /// Creates a new `tournamentPayload`.
                        ///
                        /// - Parameters:
                        ///   - id:
                        ///   - name:
                        internal init(
                            id: Swift.String,
                            name: Swift.String
                        ) {
                            self.id = id
                            self.name = name
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case id
                            case name
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/UserActivity/tournaments/bestPayload/tournament`.
                    internal var tournament: Components.Schemas.UserActivity.tournamentsPayload.bestPayloadPayload.tournamentPayload
                    /// - Remark: Generated from `#/components/schemas/UserActivity/tournaments/bestPayload/nbGames`.
                    internal var nbGames: Swift.Double
                    /// - Remark: Generated from `#/components/schemas/UserActivity/tournaments/bestPayload/score`.
                    internal var score: Swift.Double
                    /// - Remark: Generated from `#/components/schemas/UserActivity/tournaments/bestPayload/rank`.
                    internal var rank: Swift.Double
                    /// - Remark: Generated from `#/components/schemas/UserActivity/tournaments/bestPayload/rankPercent`.
                    internal var rankPercent: Swift.Double
                    /// Creates a new `bestPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - tournament:
                    ///   - nbGames:
                    ///   - score:
                    ///   - rank:
                    ///   - rankPercent:
                    internal init(
                        tournament: Components.Schemas.UserActivity.tournamentsPayload.bestPayloadPayload.tournamentPayload,
                        nbGames: Swift.Double,
                        score: Swift.Double,
                        rank: Swift.Double,
                        rankPercent: Swift.Double
                    ) {
                        self.tournament = tournament
                        self.nbGames = nbGames
                        self.score = score
                        self.rank = rank
                        self.rankPercent = rankPercent
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case tournament
                        case nbGames
                        case score
                        case rank
                        case rankPercent
                    }
                }
                /// - Remark: Generated from `#/components/schemas/UserActivity/tournaments/best`.
                internal typealias bestPayload = [Components.Schemas.UserActivity.tournamentsPayload.bestPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/UserActivity/tournaments/best`.
                internal var best: Components.Schemas.UserActivity.tournamentsPayload.bestPayload?
                /// Creates a new `tournamentsPayload`.
                ///
                /// - Parameters:
                ///   - nb:
                ///   - best:
                internal init(
                    nb: Swift.Double? = nil,
                    best: Components.Schemas.UserActivity.tournamentsPayload.bestPayload? = nil
                ) {
                    self.nb = nb
                    self.best = best
                }
                internal enum CodingKeys: String, CodingKey {
                    case nb
                    case best
                }
            }
            /// - Remark: Generated from `#/components/schemas/UserActivity/tournaments`.
            internal var tournaments: Components.Schemas.UserActivity.tournamentsPayload?
            /// - Remark: Generated from `#/components/schemas/UserActivity/practicePayload`.
            internal struct practicePayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/UserActivity/practicePayload/url`.
                internal var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/UserActivity/practicePayload/name`.
                internal var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/UserActivity/practicePayload/nbPositions`.
                internal var nbPositions: Swift.Double
                /// Creates a new `practicePayloadPayload`.
                ///
                /// - Parameters:
                ///   - url:
                ///   - name:
                ///   - nbPositions:
                internal init(
                    url: Swift.String,
                    name: Swift.String,
                    nbPositions: Swift.Double
                ) {
                    self.url = url
                    self.name = name
                    self.nbPositions = nbPositions
                }
                internal enum CodingKeys: String, CodingKey {
                    case url
                    case name
                    case nbPositions
                }
            }
            /// - Remark: Generated from `#/components/schemas/UserActivity/practice`.
            internal typealias practicePayload = [Components.Schemas.UserActivity.practicePayloadPayload]
            /// - Remark: Generated from `#/components/schemas/UserActivity/practice`.
            internal var practice: Components.Schemas.UserActivity.practicePayload?
            /// - Remark: Generated from `#/components/schemas/UserActivity/simuls`.
            internal var simuls: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/UserActivity/correspondenceMoves`.
            internal struct correspondenceMovesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/UserActivity/correspondenceMoves/nb`.
                internal var nb: Swift.Double
                /// - Remark: Generated from `#/components/schemas/UserActivity/correspondenceMoves/games`.
                internal var games: [Components.Schemas.UserActivityCorrespondenceGame]
                /// Creates a new `correspondenceMovesPayload`.
                ///
                /// - Parameters:
                ///   - nb:
                ///   - games:
                internal init(
                    nb: Swift.Double,
                    games: [Components.Schemas.UserActivityCorrespondenceGame]
                ) {
                    self.nb = nb
                    self.games = games
                }
                internal enum CodingKeys: String, CodingKey {
                    case nb
                    case games
                }
            }
            /// - Remark: Generated from `#/components/schemas/UserActivity/correspondenceMoves`.
            internal var correspondenceMoves: Components.Schemas.UserActivity.correspondenceMovesPayload?
            /// - Remark: Generated from `#/components/schemas/UserActivity/correspondenceEnds`.
            internal struct correspondenceEndsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/UserActivity/correspondenceEnds/score`.
                internal var score: Components.Schemas.UserActivityScore
                /// - Remark: Generated from `#/components/schemas/UserActivity/correspondenceEnds/games`.
                internal var games: [Components.Schemas.UserActivityCorrespondenceGame]
                /// Creates a new `correspondenceEndsPayload`.
                ///
                /// - Parameters:
                ///   - score:
                ///   - games:
                internal init(
                    score: Components.Schemas.UserActivityScore,
                    games: [Components.Schemas.UserActivityCorrespondenceGame]
                ) {
                    self.score = score
                    self.games = games
                }
                internal enum CodingKeys: String, CodingKey {
                    case score
                    case games
                }
            }
            /// - Remark: Generated from `#/components/schemas/UserActivity/correspondenceEnds`.
            internal var correspondenceEnds: Components.Schemas.UserActivity.correspondenceEndsPayload?
            /// - Remark: Generated from `#/components/schemas/UserActivity/follows`.
            internal struct followsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/UserActivity/follows/in`.
                internal var _in: Components.Schemas.UserActivityFollowList?
                /// - Remark: Generated from `#/components/schemas/UserActivity/follows/out`.
                internal var out: Components.Schemas.UserActivityFollowList?
                /// Creates a new `followsPayload`.
                ///
                /// - Parameters:
                ///   - _in:
                ///   - out:
                internal init(
                    _in: Components.Schemas.UserActivityFollowList? = nil,
                    out: Components.Schemas.UserActivityFollowList? = nil
                ) {
                    self._in = _in
                    self.out = out
                }
                internal enum CodingKeys: String, CodingKey {
                    case _in = "in"
                    case out
                }
            }
            /// - Remark: Generated from `#/components/schemas/UserActivity/follows`.
            internal var follows: Components.Schemas.UserActivity.followsPayload?
            /// - Remark: Generated from `#/components/schemas/UserActivity/studies`.
            internal var studies: OpenAPIRuntime.OpenAPIObjectContainer?
            /// - Remark: Generated from `#/components/schemas/UserActivity/teamsPayload`.
            internal struct teamsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/UserActivity/teamsPayload/url`.
                internal var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/UserActivity/teamsPayload/name`.
                internal var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/UserActivity/teamsPayload/flair`.
                internal var flair: Components.Schemas.Flair?
                /// Creates a new `teamsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - url:
                ///   - name:
                ///   - flair:
                internal init(
                    url: Swift.String,
                    name: Swift.String,
                    flair: Components.Schemas.Flair? = nil
                ) {
                    self.url = url
                    self.name = name
                    self.flair = flair
                }
                internal enum CodingKeys: String, CodingKey {
                    case url
                    case name
                    case flair
                }
            }
            /// - Remark: Generated from `#/components/schemas/UserActivity/teams`.
            internal typealias teamsPayload = [Components.Schemas.UserActivity.teamsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/UserActivity/teams`.
            internal var teams: Components.Schemas.UserActivity.teamsPayload?
            /// - Remark: Generated from `#/components/schemas/UserActivity/postsPayload`.
            internal struct postsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/UserActivity/postsPayload/topicUrl`.
                internal var topicUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/UserActivity/postsPayload/topicName`.
                internal var topicName: Swift.String
                /// - Remark: Generated from `#/components/schemas/UserActivity/postsPayload/postsPayload`.
                internal struct postsPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/UserActivity/postsPayload/postsPayload/url`.
                    internal var url: Swift.String
                    /// - Remark: Generated from `#/components/schemas/UserActivity/postsPayload/postsPayload/text`.
                    internal var text: Swift.String
                    /// Creates a new `postsPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - url:
                    ///   - text:
                    internal init(
                        url: Swift.String,
                        text: Swift.String
                    ) {
                        self.url = url
                        self.text = text
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case url
                        case text
                    }
                }
                /// - Remark: Generated from `#/components/schemas/UserActivity/postsPayload/posts`.
                internal typealias postsPayload = [Components.Schemas.UserActivity.postsPayloadPayload.postsPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/UserActivity/postsPayload/posts`.
                internal var posts: Components.Schemas.UserActivity.postsPayloadPayload.postsPayload
                /// Creates a new `postsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - topicUrl:
                ///   - topicName:
                ///   - posts:
                internal init(
                    topicUrl: Swift.String,
                    topicName: Swift.String,
                    posts: Components.Schemas.UserActivity.postsPayloadPayload.postsPayload
                ) {
                    self.topicUrl = topicUrl
                    self.topicName = topicName
                    self.posts = posts
                }
                internal enum CodingKeys: String, CodingKey {
                    case topicUrl
                    case topicName
                    case posts
                }
            }
            /// - Remark: Generated from `#/components/schemas/UserActivity/posts`.
            internal typealias postsPayload = [Components.Schemas.UserActivity.postsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/UserActivity/posts`.
            internal var posts: Components.Schemas.UserActivity.postsPayload?
            /// - Remark: Generated from `#/components/schemas/UserActivity/patron`.
            internal struct patronPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/UserActivity/patron/months`.
                internal var months: Swift.Double
                /// Creates a new `patronPayload`.
                ///
                /// - Parameters:
                ///   - months:
                internal init(months: Swift.Double) {
                    self.months = months
                }
                internal enum CodingKeys: String, CodingKey {
                    case months
                }
            }
            /// - Remark: Generated from `#/components/schemas/UserActivity/patron`.
            internal var patron: Components.Schemas.UserActivity.patronPayload?
            /// - Remark: Generated from `#/components/schemas/UserActivity/stream`.
            internal var stream: Swift.Bool?
            /// Creates a new `UserActivity`.
            ///
            /// - Parameters:
            ///   - interval:
            ///   - games:
            ///   - puzzles:
            ///   - storm:
            ///   - racer:
            ///   - streak:
            ///   - tournaments:
            ///   - practice:
            ///   - simuls:
            ///   - correspondenceMoves:
            ///   - correspondenceEnds:
            ///   - follows:
            ///   - studies:
            ///   - teams:
            ///   - posts:
            ///   - patron:
            ///   - stream:
            internal init(
                interval: Components.Schemas.UserActivity.intervalPayload,
                games: Components.Schemas.UserActivity.gamesPayload? = nil,
                puzzles: Components.Schemas.UserActivity.puzzlesPayload? = nil,
                storm: Components.Schemas.PuzzleModePerf? = nil,
                racer: Components.Schemas.PuzzleModePerf? = nil,
                streak: Components.Schemas.PuzzleModePerf? = nil,
                tournaments: Components.Schemas.UserActivity.tournamentsPayload? = nil,
                practice: Components.Schemas.UserActivity.practicePayload? = nil,
                simuls: [Swift.String]? = nil,
                correspondenceMoves: Components.Schemas.UserActivity.correspondenceMovesPayload? = nil,
                correspondenceEnds: Components.Schemas.UserActivity.correspondenceEndsPayload? = nil,
                follows: Components.Schemas.UserActivity.followsPayload? = nil,
                studies: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                teams: Components.Schemas.UserActivity.teamsPayload? = nil,
                posts: Components.Schemas.UserActivity.postsPayload? = nil,
                patron: Components.Schemas.UserActivity.patronPayload? = nil,
                stream: Swift.Bool? = nil
            ) {
                self.interval = interval
                self.games = games
                self.puzzles = puzzles
                self.storm = storm
                self.racer = racer
                self.streak = streak
                self.tournaments = tournaments
                self.practice = practice
                self.simuls = simuls
                self.correspondenceMoves = correspondenceMoves
                self.correspondenceEnds = correspondenceEnds
                self.follows = follows
                self.studies = studies
                self.teams = teams
                self.posts = posts
                self.patron = patron
                self.stream = stream
            }
            internal enum CodingKeys: String, CodingKey {
                case interval
                case games
                case puzzles
                case storm
                case racer
                case streak
                case tournaments
                case practice
                case simuls
                case correspondenceMoves
                case correspondenceEnds
                case follows
                case studies
                case teams
                case posts
                case patron
                case stream
            }
        }
        /// - Remark: Generated from `#/components/schemas/PuzzleAndGame`.
        internal struct PuzzleAndGame: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PuzzleAndGame/game`.
            internal struct gamePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PuzzleAndGame/game/clock`.
                internal var clock: Swift.String
                /// - Remark: Generated from `#/components/schemas/PuzzleAndGame/game/id`.
                internal var id: Swift.String
                /// - Remark: Generated from `#/components/schemas/PuzzleAndGame/game/perf`.
                internal struct perfPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/PuzzleAndGame/game/perf/key`.
                    internal var key: Components.Schemas.PerfType
                    /// - Remark: Generated from `#/components/schemas/PuzzleAndGame/game/perf/name`.
                    internal var name: Swift.String
                    /// Creates a new `perfPayload`.
                    ///
                    /// - Parameters:
                    ///   - key:
                    ///   - name:
                    internal init(
                        key: Components.Schemas.PerfType,
                        name: Swift.String
                    ) {
                        self.key = key
                        self.name = name
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case key
                        case name
                    }
                }
                /// - Remark: Generated from `#/components/schemas/PuzzleAndGame/game/perf`.
                internal var perf: Components.Schemas.PuzzleAndGame.gamePayload.perfPayload
                /// - Remark: Generated from `#/components/schemas/PuzzleAndGame/game/pgn`.
                internal var pgn: Swift.String
                /// - Remark: Generated from `#/components/schemas/PuzzleAndGame/game/playersPayload`.
                internal struct playersPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/PuzzleAndGame/game/playersPayload/color`.
                    internal var color: Swift.String
                    /// - Remark: Generated from `#/components/schemas/PuzzleAndGame/game/playersPayload/flair`.
                    internal var flair: Components.Schemas.Flair?
                    /// - Remark: Generated from `#/components/schemas/PuzzleAndGame/game/playersPayload/id`.
                    internal var id: Swift.String
                    /// - Remark: Generated from `#/components/schemas/PuzzleAndGame/game/playersPayload/name`.
                    internal var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/PuzzleAndGame/game/playersPayload/patron`.
                    internal var patron: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/PuzzleAndGame/game/playersPayload/rating`.
                    internal var rating: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/PuzzleAndGame/game/playersPayload/title`.
                    internal var title: Components.Schemas.Title?
                    /// Creates a new `playersPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - color:
                    ///   - flair:
                    ///   - id:
                    ///   - name:
                    ///   - patron:
                    ///   - rating:
                    ///   - title:
                    internal init(
                        color: Swift.String,
                        flair: Components.Schemas.Flair? = nil,
                        id: Swift.String,
                        name: Swift.String,
                        patron: Swift.Bool? = nil,
                        rating: Swift.Int,
                        title: Components.Schemas.Title? = nil
                    ) {
                        self.color = color
                        self.flair = flair
                        self.id = id
                        self.name = name
                        self.patron = patron
                        self.rating = rating
                        self.title = title
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case color
                        case flair
                        case id
                        case name
                        case patron
                        case rating
                        case title
                    }
                }
                /// - Remark: Generated from `#/components/schemas/PuzzleAndGame/game/players`.
                internal typealias playersPayload = [Components.Schemas.PuzzleAndGame.gamePayload.playersPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/PuzzleAndGame/game/players`.
                internal var players: Components.Schemas.PuzzleAndGame.gamePayload.playersPayload
                /// - Remark: Generated from `#/components/schemas/PuzzleAndGame/game/rated`.
                internal var rated: Swift.Bool
                /// Creates a new `gamePayload`.
                ///
                /// - Parameters:
                ///   - clock:
                ///   - id:
                ///   - perf:
                ///   - pgn:
                ///   - players:
                ///   - rated:
                internal init(
                    clock: Swift.String,
                    id: Swift.String,
                    perf: Components.Schemas.PuzzleAndGame.gamePayload.perfPayload,
                    pgn: Swift.String,
                    players: Components.Schemas.PuzzleAndGame.gamePayload.playersPayload,
                    rated: Swift.Bool
                ) {
                    self.clock = clock
                    self.id = id
                    self.perf = perf
                    self.pgn = pgn
                    self.players = players
                    self.rated = rated
                }
                internal enum CodingKeys: String, CodingKey {
                    case clock
                    case id
                    case perf
                    case pgn
                    case players
                    case rated
                }
                internal init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    clock = try container.decode(
                        Swift.String.self,
                        forKey: .clock
                    )
                    id = try container.decode(
                        Swift.String.self,
                        forKey: .id
                    )
                    perf = try container.decode(
                        Components.Schemas.PuzzleAndGame.gamePayload.perfPayload.self,
                        forKey: .perf
                    )
                    pgn = try container.decode(
                        Swift.String.self,
                        forKey: .pgn
                    )
                    players = try container.decode(
                        Components.Schemas.PuzzleAndGame.gamePayload.playersPayload.self,
                        forKey: .players
                    )
                    rated = try container.decode(
                        Swift.Bool.self,
                        forKey: .rated
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "clock",
                        "id",
                        "perf",
                        "pgn",
                        "players",
                        "rated"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/PuzzleAndGame/game`.
            internal var game: Components.Schemas.PuzzleAndGame.gamePayload
            /// - Remark: Generated from `#/components/schemas/PuzzleAndGame/puzzle`.
            internal struct puzzlePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PuzzleAndGame/puzzle/id`.
                internal var id: Swift.String
                /// - Remark: Generated from `#/components/schemas/PuzzleAndGame/puzzle/initialPly`.
                internal var initialPly: Swift.Int
                /// - Remark: Generated from `#/components/schemas/PuzzleAndGame/puzzle/plays`.
                internal var plays: Swift.Int
                /// - Remark: Generated from `#/components/schemas/PuzzleAndGame/puzzle/rating`.
                internal var rating: Swift.Int
                /// - Remark: Generated from `#/components/schemas/PuzzleAndGame/puzzle/solution`.
                internal var solution: [Swift.String]
                /// - Remark: Generated from `#/components/schemas/PuzzleAndGame/puzzle/themes`.
                internal var themes: [Swift.String]
                /// Creates a new `puzzlePayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - initialPly:
                ///   - plays:
                ///   - rating:
                ///   - solution:
                ///   - themes:
                internal init(
                    id: Swift.String,
                    initialPly: Swift.Int,
                    plays: Swift.Int,
                    rating: Swift.Int,
                    solution: [Swift.String],
                    themes: [Swift.String]
                ) {
                    self.id = id
                    self.initialPly = initialPly
                    self.plays = plays
                    self.rating = rating
                    self.solution = solution
                    self.themes = themes
                }
                internal enum CodingKeys: String, CodingKey {
                    case id
                    case initialPly
                    case plays
                    case rating
                    case solution
                    case themes
                }
                internal init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    id = try container.decode(
                        Swift.String.self,
                        forKey: .id
                    )
                    initialPly = try container.decode(
                        Swift.Int.self,
                        forKey: .initialPly
                    )
                    plays = try container.decode(
                        Swift.Int.self,
                        forKey: .plays
                    )
                    rating = try container.decode(
                        Swift.Int.self,
                        forKey: .rating
                    )
                    solution = try container.decode(
                        [Swift.String].self,
                        forKey: .solution
                    )
                    themes = try container.decode(
                        [Swift.String].self,
                        forKey: .themes
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "id",
                        "initialPly",
                        "plays",
                        "rating",
                        "solution",
                        "themes"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/PuzzleAndGame/puzzle`.
            internal var puzzle: Components.Schemas.PuzzleAndGame.puzzlePayload
            /// Creates a new `PuzzleAndGame`.
            ///
            /// - Parameters:
            ///   - game:
            ///   - puzzle:
            internal init(
                game: Components.Schemas.PuzzleAndGame.gamePayload,
                puzzle: Components.Schemas.PuzzleAndGame.puzzlePayload
            ) {
                self.game = game
                self.puzzle = puzzle
            }
            internal enum CodingKeys: String, CodingKey {
                case game
                case puzzle
            }
        }
        /// - Remark: Generated from `#/components/schemas/PuzzleActivity`.
        internal struct PuzzleActivity: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PuzzleActivity/date`.
            internal var date: Swift.Int
            /// - Remark: Generated from `#/components/schemas/PuzzleActivity/puzzle`.
            internal struct puzzlePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PuzzleActivity/puzzle/fen`.
                internal var fen: Swift.String
                /// - Remark: Generated from `#/components/schemas/PuzzleActivity/puzzle/id`.
                internal var id: Swift.String
                /// - Remark: Generated from `#/components/schemas/PuzzleActivity/puzzle/lastMove`.
                internal var lastMove: Swift.String
                /// - Remark: Generated from `#/components/schemas/PuzzleActivity/puzzle/plays`.
                internal var plays: Swift.Int
                /// - Remark: Generated from `#/components/schemas/PuzzleActivity/puzzle/rating`.
                internal var rating: Swift.Int
                /// - Remark: Generated from `#/components/schemas/PuzzleActivity/puzzle/solution`.
                internal var solution: [Swift.String]
                /// - Remark: Generated from `#/components/schemas/PuzzleActivity/puzzle/themes`.
                internal var themes: [Swift.String]
                /// Creates a new `puzzlePayload`.
                ///
                /// - Parameters:
                ///   - fen:
                ///   - id:
                ///   - lastMove:
                ///   - plays:
                ///   - rating:
                ///   - solution:
                ///   - themes:
                internal init(
                    fen: Swift.String,
                    id: Swift.String,
                    lastMove: Swift.String,
                    plays: Swift.Int,
                    rating: Swift.Int,
                    solution: [Swift.String],
                    themes: [Swift.String]
                ) {
                    self.fen = fen
                    self.id = id
                    self.lastMove = lastMove
                    self.plays = plays
                    self.rating = rating
                    self.solution = solution
                    self.themes = themes
                }
                internal enum CodingKeys: String, CodingKey {
                    case fen
                    case id
                    case lastMove
                    case plays
                    case rating
                    case solution
                    case themes
                }
            }
            /// - Remark: Generated from `#/components/schemas/PuzzleActivity/puzzle`.
            internal var puzzle: Components.Schemas.PuzzleActivity.puzzlePayload
            /// - Remark: Generated from `#/components/schemas/PuzzleActivity/win`.
            internal var win: Swift.Bool
            /// Creates a new `PuzzleActivity`.
            ///
            /// - Parameters:
            ///   - date:
            ///   - puzzle:
            ///   - win:
            internal init(
                date: Swift.Int,
                puzzle: Components.Schemas.PuzzleActivity.puzzlePayload,
                win: Swift.Bool
            ) {
                self.date = date
                self.puzzle = puzzle
                self.win = win
            }
            internal enum CodingKeys: String, CodingKey {
                case date
                case puzzle
                case win
            }
        }
        /// - Remark: Generated from `#/components/schemas/PuzzleReplay`.
        internal struct PuzzleReplay: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PuzzleReplay/replay`.
            internal struct replayPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PuzzleReplay/replay/days`.
                internal var days: Swift.Double
                /// - Remark: Generated from `#/components/schemas/PuzzleReplay/replay/theme`.
                internal var theme: Swift.String
                /// - Remark: Generated from `#/components/schemas/PuzzleReplay/replay/nb`.
                internal var nb: Swift.Double
                /// - Remark: Generated from `#/components/schemas/PuzzleReplay/replay/remaining`.
                internal var remaining: [Swift.String]
                /// Creates a new `replayPayload`.
                ///
                /// - Parameters:
                ///   - days:
                ///   - theme:
                ///   - nb:
                ///   - remaining:
                internal init(
                    days: Swift.Double,
                    theme: Swift.String,
                    nb: Swift.Double,
                    remaining: [Swift.String]
                ) {
                    self.days = days
                    self.theme = theme
                    self.nb = nb
                    self.remaining = remaining
                }
                internal enum CodingKeys: String, CodingKey {
                    case days
                    case theme
                    case nb
                    case remaining
                }
            }
            /// - Remark: Generated from `#/components/schemas/PuzzleReplay/replay`.
            internal var replay: Components.Schemas.PuzzleReplay.replayPayload
            /// - Remark: Generated from `#/components/schemas/PuzzleReplay/angle`.
            internal struct anglePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PuzzleReplay/angle/key`.
                internal var key: Swift.String
                /// - Remark: Generated from `#/components/schemas/PuzzleReplay/angle/name`.
                internal var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/PuzzleReplay/angle/desc`.
                internal var desc: Swift.String
                /// Creates a new `anglePayload`.
                ///
                /// - Parameters:
                ///   - key:
                ///   - name:
                ///   - desc:
                internal init(
                    key: Swift.String,
                    name: Swift.String,
                    desc: Swift.String
                ) {
                    self.key = key
                    self.name = name
                    self.desc = desc
                }
                internal enum CodingKeys: String, CodingKey {
                    case key
                    case name
                    case desc
                }
            }
            /// - Remark: Generated from `#/components/schemas/PuzzleReplay/angle`.
            internal var angle: Components.Schemas.PuzzleReplay.anglePayload
            /// Creates a new `PuzzleReplay`.
            ///
            /// - Parameters:
            ///   - replay:
            ///   - angle:
            internal init(
                replay: Components.Schemas.PuzzleReplay.replayPayload,
                angle: Components.Schemas.PuzzleReplay.anglePayload
            ) {
                self.replay = replay
                self.angle = angle
            }
            internal enum CodingKeys: String, CodingKey {
                case replay
                case angle
            }
        }
        /// - Remark: Generated from `#/components/schemas/PuzzlePerformance`.
        internal struct PuzzlePerformance: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PuzzlePerformance/firstWins`.
            internal var firstWins: Swift.Int
            /// - Remark: Generated from `#/components/schemas/PuzzlePerformance/nb`.
            internal var nb: Swift.Int
            /// - Remark: Generated from `#/components/schemas/PuzzlePerformance/performance`.
            internal var performance: Swift.Int
            /// - Remark: Generated from `#/components/schemas/PuzzlePerformance/puzzleRatingAvg`.
            internal var puzzleRatingAvg: Swift.Int
            /// - Remark: Generated from `#/components/schemas/PuzzlePerformance/replayWins`.
            internal var replayWins: Swift.Int
            /// Creates a new `PuzzlePerformance`.
            ///
            /// - Parameters:
            ///   - firstWins:
            ///   - nb:
            ///   - performance:
            ///   - puzzleRatingAvg:
            ///   - replayWins:
            internal init(
                firstWins: Swift.Int,
                nb: Swift.Int,
                performance: Swift.Int,
                puzzleRatingAvg: Swift.Int,
                replayWins: Swift.Int
            ) {
                self.firstWins = firstWins
                self.nb = nb
                self.performance = performance
                self.puzzleRatingAvg = puzzleRatingAvg
                self.replayWins = replayWins
            }
            internal enum CodingKeys: String, CodingKey {
                case firstWins
                case nb
                case performance
                case puzzleRatingAvg
                case replayWins
            }
        }
        /// - Remark: Generated from `#/components/schemas/PuzzleDashboard`.
        internal struct PuzzleDashboard: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PuzzleDashboard/days`.
            internal var days: Swift.Int
            /// - Remark: Generated from `#/components/schemas/PuzzleDashboard/global`.
            internal var global: Components.Schemas.PuzzlePerformance
            /// - Remark: Generated from `#/components/schemas/PuzzleDashboard/themes`.
            internal struct themesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PuzzleDashboard/themes/additionalProperties`.
                internal struct additionalPropertiesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/PuzzleDashboard/themes/additionalProperties/results`.
                    internal var results: Components.Schemas.PuzzlePerformance
                    /// - Remark: Generated from `#/components/schemas/PuzzleDashboard/themes/additionalProperties/theme`.
                    internal var theme: Swift.String
                    /// Creates a new `additionalPropertiesPayload`.
                    ///
                    /// - Parameters:
                    ///   - results:
                    ///   - theme:
                    internal init(
                        results: Components.Schemas.PuzzlePerformance,
                        theme: Swift.String
                    ) {
                        self.results = results
                        self.theme = theme
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case results
                        case theme
                    }
                }
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Components.Schemas.PuzzleDashboard.themesPayload.additionalPropertiesPayload]
                /// Creates a new `themesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Components.Schemas.PuzzleDashboard.themesPayload.additionalPropertiesPayload] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/PuzzleDashboard/themes`.
            internal var themes: Components.Schemas.PuzzleDashboard.themesPayload
            /// Creates a new `PuzzleDashboard`.
            ///
            /// - Parameters:
            ///   - days:
            ///   - global:
            ///   - themes:
            internal init(
                days: Swift.Int,
                global: Components.Schemas.PuzzlePerformance,
                themes: Components.Schemas.PuzzleDashboard.themesPayload
            ) {
                self.days = days
                self.global = global
                self.themes = themes
            }
            internal enum CodingKeys: String, CodingKey {
                case days
                case global
                case themes
            }
        }
        /// - Remark: Generated from `#/components/schemas/PuzzleStormDashboard`.
        internal struct PuzzleStormDashboard: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PuzzleStormDashboard/daysPayload`.
            internal struct daysPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PuzzleStormDashboard/daysPayload/_id`.
                internal var _id: Swift.String
                /// - Remark: Generated from `#/components/schemas/PuzzleStormDashboard/daysPayload/combo`.
                internal var combo: Swift.Int
                /// - Remark: Generated from `#/components/schemas/PuzzleStormDashboard/daysPayload/errors`.
                internal var errors: Swift.Int
                /// - Remark: Generated from `#/components/schemas/PuzzleStormDashboard/daysPayload/highest`.
                internal var highest: Swift.Int
                /// - Remark: Generated from `#/components/schemas/PuzzleStormDashboard/daysPayload/moves`.
                internal var moves: Swift.Int
                /// - Remark: Generated from `#/components/schemas/PuzzleStormDashboard/daysPayload/runs`.
                internal var runs: Swift.Int
                /// - Remark: Generated from `#/components/schemas/PuzzleStormDashboard/daysPayload/score`.
                internal var score: Swift.Int
                /// - Remark: Generated from `#/components/schemas/PuzzleStormDashboard/daysPayload/time`.
                internal var time: Swift.Int
                /// Creates a new `daysPayloadPayload`.
                ///
                /// - Parameters:
                ///   - _id:
                ///   - combo:
                ///   - errors:
                ///   - highest:
                ///   - moves:
                ///   - runs:
                ///   - score:
                ///   - time:
                internal init(
                    _id: Swift.String,
                    combo: Swift.Int,
                    errors: Swift.Int,
                    highest: Swift.Int,
                    moves: Swift.Int,
                    runs: Swift.Int,
                    score: Swift.Int,
                    time: Swift.Int
                ) {
                    self._id = _id
                    self.combo = combo
                    self.errors = errors
                    self.highest = highest
                    self.moves = moves
                    self.runs = runs
                    self.score = score
                    self.time = time
                }
                internal enum CodingKeys: String, CodingKey {
                    case _id
                    case combo
                    case errors
                    case highest
                    case moves
                    case runs
                    case score
                    case time
                }
            }
            /// - Remark: Generated from `#/components/schemas/PuzzleStormDashboard/days`.
            internal typealias daysPayload = [Components.Schemas.PuzzleStormDashboard.daysPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/PuzzleStormDashboard/days`.
            internal var days: Components.Schemas.PuzzleStormDashboard.daysPayload
            /// - Remark: Generated from `#/components/schemas/PuzzleStormDashboard/high`.
            internal struct highPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PuzzleStormDashboard/high/allTime`.
                internal var allTime: Swift.Int
                /// - Remark: Generated from `#/components/schemas/PuzzleStormDashboard/high/day`.
                internal var day: Swift.Int
                /// - Remark: Generated from `#/components/schemas/PuzzleStormDashboard/high/month`.
                internal var month: Swift.Int
                /// - Remark: Generated from `#/components/schemas/PuzzleStormDashboard/high/week`.
                internal var week: Swift.Int
                /// Creates a new `highPayload`.
                ///
                /// - Parameters:
                ///   - allTime:
                ///   - day:
                ///   - month:
                ///   - week:
                internal init(
                    allTime: Swift.Int,
                    day: Swift.Int,
                    month: Swift.Int,
                    week: Swift.Int
                ) {
                    self.allTime = allTime
                    self.day = day
                    self.month = month
                    self.week = week
                }
                internal enum CodingKeys: String, CodingKey {
                    case allTime
                    case day
                    case month
                    case week
                }
            }
            /// - Remark: Generated from `#/components/schemas/PuzzleStormDashboard/high`.
            internal var high: Components.Schemas.PuzzleStormDashboard.highPayload
            /// Creates a new `PuzzleStormDashboard`.
            ///
            /// - Parameters:
            ///   - days:
            ///   - high:
            internal init(
                days: Components.Schemas.PuzzleStormDashboard.daysPayload,
                high: Components.Schemas.PuzzleStormDashboard.highPayload
            ) {
                self.days = days
                self.high = high
            }
            internal enum CodingKeys: String, CodingKey {
                case days
                case high
            }
        }
        /// - Remark: Generated from `#/components/schemas/PuzzleRacer`.
        internal struct PuzzleRacer: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PuzzleRacer/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/PuzzleRacer/url`.
            internal var url: Swift.String
            /// Creates a new `PuzzleRacer`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - url:
            internal init(
                id: Swift.String,
                url: Swift.String
            ) {
                self.id = id
                self.url = url
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case url
            }
        }
        /// - Remark: Generated from `#/components/schemas/PuzzleRaceResults`.
        internal struct PuzzleRaceResults: Codable, Hashable, Sendable {
            /// Unique identifier of the puzzle race
            ///
            /// - Remark: Generated from `#/components/schemas/PuzzleRaceResults/id`.
            internal var id: Swift.String
            /// Owner of the puzzle race
            ///
            /// - Remark: Generated from `#/components/schemas/PuzzleRaceResults/owner`.
            internal var owner: Swift.String
            /// - Remark: Generated from `#/components/schemas/PuzzleRaceResults/playersPayload`.
            internal struct playersPayloadPayload: Codable, Hashable, Sendable {
                /// Player username
                ///
                /// - Remark: Generated from `#/components/schemas/PuzzleRaceResults/playersPayload/name`.
                internal var name: Swift.String
                /// Player's current score in the race
                ///
                /// - Remark: Generated from `#/components/schemas/PuzzleRaceResults/playersPayload/score`.
                internal var score: Swift.Int
                /// User ID. Missing if player is anonymous.
                ///
                /// - Remark: Generated from `#/components/schemas/PuzzleRaceResults/playersPayload/id`.
                internal var id: Swift.String?
                /// User's flair icon
                ///
                /// - Remark: Generated from `#/components/schemas/PuzzleRaceResults/playersPayload/flair`.
                internal var flair: Swift.String?
                /// Whether the player is a Lichess patron
                ///
                /// - Remark: Generated from `#/components/schemas/PuzzleRaceResults/playersPayload/patron`.
                internal var patron: Swift.Bool?
                /// Creates a new `playersPayloadPayload`.
                ///
                /// - Parameters:
                ///   - name: Player username
                ///   - score: Player's current score in the race
                ///   - id: User ID. Missing if player is anonymous.
                ///   - flair: User's flair icon
                ///   - patron: Whether the player is a Lichess patron
                internal init(
                    name: Swift.String,
                    score: Swift.Int,
                    id: Swift.String? = nil,
                    flair: Swift.String? = nil,
                    patron: Swift.Bool? = nil
                ) {
                    self.name = name
                    self.score = score
                    self.id = id
                    self.flair = flair
                    self.patron = patron
                }
                internal enum CodingKeys: String, CodingKey {
                    case name
                    case score
                    case id
                    case flair
                    case patron
                }
            }
            /// List of players participating in the race
            ///
            /// - Remark: Generated from `#/components/schemas/PuzzleRaceResults/players`.
            internal typealias playersPayload = [Components.Schemas.PuzzleRaceResults.playersPayloadPayload]
            /// List of players participating in the race
            ///
            /// - Remark: Generated from `#/components/schemas/PuzzleRaceResults/players`.
            internal var players: Components.Schemas.PuzzleRaceResults.playersPayload
            /// - Remark: Generated from `#/components/schemas/PuzzleRaceResults/puzzlesPayload`.
            internal struct puzzlesPayloadPayload: Codable, Hashable, Sendable {
                /// Puzzle ID
                ///
                /// - Remark: Generated from `#/components/schemas/PuzzleRaceResults/puzzlesPayload/id`.
                internal var id: Swift.String
                /// FEN position of the puzzle
                ///
                /// - Remark: Generated from `#/components/schemas/PuzzleRaceResults/puzzlesPayload/fen`.
                internal var fen: Swift.String
                /// Solution moves sequence
                ///
                /// - Remark: Generated from `#/components/schemas/PuzzleRaceResults/puzzlesPayload/line`.
                internal var line: Swift.String
                /// Puzzle Glicko2 rating
                ///
                /// - Remark: Generated from `#/components/schemas/PuzzleRaceResults/puzzlesPayload/rating`.
                internal var rating: Swift.Int
                /// Creates a new `puzzlesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - id: Puzzle ID
                ///   - fen: FEN position of the puzzle
                ///   - line: Solution moves sequence
                ///   - rating: Puzzle Glicko2 rating
                internal init(
                    id: Swift.String,
                    fen: Swift.String,
                    line: Swift.String,
                    rating: Swift.Int
                ) {
                    self.id = id
                    self.fen = fen
                    self.line = line
                    self.rating = rating
                }
                internal enum CodingKeys: String, CodingKey {
                    case id
                    case fen
                    case line
                    case rating
                }
            }
            /// List of puzzles in the race
            ///
            /// - Remark: Generated from `#/components/schemas/PuzzleRaceResults/puzzles`.
            internal typealias puzzlesPayload = [Components.Schemas.PuzzleRaceResults.puzzlesPayloadPayload]
            /// List of puzzles in the race
            ///
            /// - Remark: Generated from `#/components/schemas/PuzzleRaceResults/puzzles`.
            internal var puzzles: Components.Schemas.PuzzleRaceResults.puzzlesPayload
            /// Timestamp in milliseconds when the race finishes
            ///
            /// - Remark: Generated from `#/components/schemas/PuzzleRaceResults/finishesAt`.
            internal var finishesAt: Swift.Int
            /// Timestamp in milliseconds when the race started
            ///
            /// - Remark: Generated from `#/components/schemas/PuzzleRaceResults/startsAt`.
            internal var startsAt: Swift.Int
            /// Creates a new `PuzzleRaceResults`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the puzzle race
            ///   - owner: Owner of the puzzle race
            ///   - players: List of players participating in the race
            ///   - puzzles: List of puzzles in the race
            ///   - finishesAt: Timestamp in milliseconds when the race finishes
            ///   - startsAt: Timestamp in milliseconds when the race started
            internal init(
                id: Swift.String,
                owner: Swift.String,
                players: Components.Schemas.PuzzleRaceResults.playersPayload,
                puzzles: Components.Schemas.PuzzleRaceResults.puzzlesPayload,
                finishesAt: Swift.Int,
                startsAt: Swift.Int
            ) {
                self.id = id
                self.owner = owner
                self.players = players
                self.puzzles = puzzles
                self.finishesAt = finishesAt
                self.startsAt = startsAt
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case owner
                case players
                case puzzles
                case finishesAt
                case startsAt
            }
        }
        /// - Remark: Generated from `#/components/schemas/NotFound`.
        internal struct NotFound: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NotFound/error`.
            internal var error: Swift.String?
            /// Creates a new `NotFound`.
            ///
            /// - Parameters:
            ///   - error:
            internal init(error: Swift.String? = nil) {
                self.error = error
            }
            internal enum CodingKeys: String, CodingKey {
                case error
            }
        }
        /// - Remark: Generated from `#/components/schemas/UserPreferences`.
        internal struct UserPreferences: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UserPreferences/dark`.
            internal var dark: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserPreferences/transp`.
            internal var transp: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserPreferences/bgImg`.
            internal var bgImg: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UserPreferences/is3d`.
            internal var is3d: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserPreferences/theme`.
            @frozen internal enum themePayload: String, Codable, Hashable, Sendable {
                case blue = "blue"
                case blue2 = "blue2"
                case blue3 = "blue3"
                case blue_hyphen_marble = "blue-marble"
                case canvas = "canvas"
                case wood = "wood"
                case wood2 = "wood2"
                case wood3 = "wood3"
                case wood4 = "wood4"
                case maple = "maple"
                case maple2 = "maple2"
                case brown = "brown"
                case leather = "leather"
                case green = "green"
                case marble = "marble"
                case green_hyphen_plastic = "green-plastic"
                case grey = "grey"
                case metal = "metal"
                case olive = "olive"
                case newspaper = "newspaper"
                case purple = "purple"
                case purple_hyphen_diag = "purple-diag"
                case pink = "pink"
                case ic = "ic"
            }
            /// - Remark: Generated from `#/components/schemas/UserPreferences/theme`.
            internal var theme: Components.Schemas.UserPreferences.themePayload?
            /// - Remark: Generated from `#/components/schemas/UserPreferences/pieceSet`.
            @frozen internal enum pieceSetPayload: String, Codable, Hashable, Sendable {
                case cburnett = "cburnett"
                case merida = "merida"
                case alpha = "alpha"
                case pirouetti = "pirouetti"
                case chessnut = "chessnut"
                case chess7 = "chess7"
                case reillycraig = "reillycraig"
                case companion = "companion"
                case riohacha = "riohacha"
                case kosal = "kosal"
                case leipzig = "leipzig"
                case fantasy = "fantasy"
                case spatial = "spatial"
                case california = "california"
                case pixel = "pixel"
                case maestro = "maestro"
                case fresca = "fresca"
                case cardinal = "cardinal"
                case gioco = "gioco"
                case tatiana = "tatiana"
                case staunty = "staunty"
                case governor = "governor"
                case dubrovny = "dubrovny"
                case icpieces = "icpieces"
                case shapes = "shapes"
                case letter = "letter"
            }
            /// - Remark: Generated from `#/components/schemas/UserPreferences/pieceSet`.
            internal var pieceSet: Components.Schemas.UserPreferences.pieceSetPayload?
            /// - Remark: Generated from `#/components/schemas/UserPreferences/theme3d`.
            @frozen internal enum theme3dPayload: String, Codable, Hashable, Sendable {
                case Black_hyphen_White_hyphen_Aluminium = "Black-White-Aluminium"
                case Brushed_hyphen_Aluminium = "Brushed-Aluminium"
                case China_hyphen_Blue = "China-Blue"
                case China_hyphen_Green = "China-Green"
                case China_hyphen_Grey = "China-Grey"
                case China_hyphen_Scarlet = "China-Scarlet"
                case Classic_hyphen_Blue = "Classic-Blue"
                case Gold_hyphen_Silver = "Gold-Silver"
                case Light_hyphen_Wood = "Light-Wood"
                case Power_hyphen_Coated = "Power-Coated"
                case Rosewood = "Rosewood"
                case Marble = "Marble"
                case Wax = "Wax"
                case Jade = "Jade"
                case Woodi = "Woodi"
            }
            /// - Remark: Generated from `#/components/schemas/UserPreferences/theme3d`.
            internal var theme3d: Components.Schemas.UserPreferences.theme3dPayload?
            /// - Remark: Generated from `#/components/schemas/UserPreferences/pieceSet3d`.
            @frozen internal enum pieceSet3dPayload: String, Codable, Hashable, Sendable {
                case Basic = "Basic"
                case Wood = "Wood"
                case Metal = "Metal"
                case RedVBlue = "RedVBlue"
                case ModernJade = "ModernJade"
                case ModernWood = "ModernWood"
                case Glass = "Glass"
                case Trimmed = "Trimmed"
                case Experimental = "Experimental"
                case Staunton = "Staunton"
                case CubesAndPi = "CubesAndPi"
            }
            /// - Remark: Generated from `#/components/schemas/UserPreferences/pieceSet3d`.
            internal var pieceSet3d: Components.Schemas.UserPreferences.pieceSet3dPayload?
            /// - Remark: Generated from `#/components/schemas/UserPreferences/soundSet`.
            @frozen internal enum soundSetPayload: String, Codable, Hashable, Sendable {
                case silent = "silent"
                case standard = "standard"
                case piano = "piano"
                case nes = "nes"
                case sfx = "sfx"
                case futuristic = "futuristic"
                case robot = "robot"
                case music = "music"
                case speech = "speech"
            }
            /// - Remark: Generated from `#/components/schemas/UserPreferences/soundSet`.
            internal var soundSet: Components.Schemas.UserPreferences.soundSetPayload?
            /// - Remark: Generated from `#/components/schemas/UserPreferences/blindfold`.
            internal var blindfold: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/UserPreferences/autoQueen`.
            internal var autoQueen: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/UserPreferences/autoThreefold`.
            internal var autoThreefold: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/UserPreferences/takeback`.
            internal var takeback: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/UserPreferences/moretime`.
            internal var moretime: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/UserPreferences/clockTenths`.
            internal var clockTenths: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/UserPreferences/clockBar`.
            internal var clockBar: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserPreferences/clockSound`.
            internal var clockSound: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserPreferences/premove`.
            internal var premove: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserPreferences/animation`.
            internal var animation: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/UserPreferences/pieceNotation`.
            internal var pieceNotation: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/UserPreferences/captured`.
            internal var captured: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserPreferences/follow`.
            internal var follow: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserPreferences/highlight`.
            internal var highlight: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserPreferences/destination`.
            internal var destination: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserPreferences/coords`.
            internal var coords: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/UserPreferences/replay`.
            internal var replay: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/UserPreferences/challenge`.
            internal var challenge: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/UserPreferences/message`.
            internal var message: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/UserPreferences/submitMove`.
            internal var submitMove: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/UserPreferences/confirmResign`.
            internal var confirmResign: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/UserPreferences/insightShare`.
            internal var insightShare: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/UserPreferences/keyboardMove`.
            internal var keyboardMove: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/UserPreferences/voiceMove`.
            internal var voiceMove: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserPreferences/zen`.
            internal var zen: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/UserPreferences/ratings`.
            internal var ratings: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/UserPreferences/moveEvent`.
            internal var moveEvent: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/UserPreferences/rookCastle`.
            internal var rookCastle: Swift.Int?
            /// Creates a new `UserPreferences`.
            ///
            /// - Parameters:
            ///   - dark:
            ///   - transp:
            ///   - bgImg:
            ///   - is3d:
            ///   - theme:
            ///   - pieceSet:
            ///   - theme3d:
            ///   - pieceSet3d:
            ///   - soundSet:
            ///   - blindfold:
            ///   - autoQueen:
            ///   - autoThreefold:
            ///   - takeback:
            ///   - moretime:
            ///   - clockTenths:
            ///   - clockBar:
            ///   - clockSound:
            ///   - premove:
            ///   - animation:
            ///   - pieceNotation:
            ///   - captured:
            ///   - follow:
            ///   - highlight:
            ///   - destination:
            ///   - coords:
            ///   - replay:
            ///   - challenge:
            ///   - message:
            ///   - submitMove:
            ///   - confirmResign:
            ///   - insightShare:
            ///   - keyboardMove:
            ///   - voiceMove:
            ///   - zen:
            ///   - ratings:
            ///   - moveEvent:
            ///   - rookCastle:
            internal init(
                dark: Swift.Bool? = nil,
                transp: Swift.Bool? = nil,
                bgImg: Swift.String? = nil,
                is3d: Swift.Bool? = nil,
                theme: Components.Schemas.UserPreferences.themePayload? = nil,
                pieceSet: Components.Schemas.UserPreferences.pieceSetPayload? = nil,
                theme3d: Components.Schemas.UserPreferences.theme3dPayload? = nil,
                pieceSet3d: Components.Schemas.UserPreferences.pieceSet3dPayload? = nil,
                soundSet: Components.Schemas.UserPreferences.soundSetPayload? = nil,
                blindfold: Swift.Int? = nil,
                autoQueen: Swift.Int? = nil,
                autoThreefold: Swift.Int? = nil,
                takeback: Swift.Int? = nil,
                moretime: Swift.Int? = nil,
                clockTenths: Swift.Int? = nil,
                clockBar: Swift.Bool? = nil,
                clockSound: Swift.Bool? = nil,
                premove: Swift.Bool? = nil,
                animation: Swift.Int? = nil,
                pieceNotation: Swift.Int? = nil,
                captured: Swift.Bool? = nil,
                follow: Swift.Bool? = nil,
                highlight: Swift.Bool? = nil,
                destination: Swift.Bool? = nil,
                coords: Swift.Int? = nil,
                replay: Swift.Int? = nil,
                challenge: Swift.Int? = nil,
                message: Swift.Int? = nil,
                submitMove: Swift.Int? = nil,
                confirmResign: Swift.Int? = nil,
                insightShare: Swift.Int? = nil,
                keyboardMove: Swift.Int? = nil,
                voiceMove: Swift.Bool? = nil,
                zen: Swift.Int? = nil,
                ratings: Swift.Int? = nil,
                moveEvent: Swift.Int? = nil,
                rookCastle: Swift.Int? = nil
            ) {
                self.dark = dark
                self.transp = transp
                self.bgImg = bgImg
                self.is3d = is3d
                self.theme = theme
                self.pieceSet = pieceSet
                self.theme3d = theme3d
                self.pieceSet3d = pieceSet3d
                self.soundSet = soundSet
                self.blindfold = blindfold
                self.autoQueen = autoQueen
                self.autoThreefold = autoThreefold
                self.takeback = takeback
                self.moretime = moretime
                self.clockTenths = clockTenths
                self.clockBar = clockBar
                self.clockSound = clockSound
                self.premove = premove
                self.animation = animation
                self.pieceNotation = pieceNotation
                self.captured = captured
                self.follow = follow
                self.highlight = highlight
                self.destination = destination
                self.coords = coords
                self.replay = replay
                self.challenge = challenge
                self.message = message
                self.submitMove = submitMove
                self.confirmResign = confirmResign
                self.insightShare = insightShare
                self.keyboardMove = keyboardMove
                self.voiceMove = voiceMove
                self.zen = zen
                self.ratings = ratings
                self.moveEvent = moveEvent
                self.rookCastle = rookCastle
            }
            internal enum CodingKeys: String, CodingKey {
                case dark
                case transp
                case bgImg
                case is3d
                case theme
                case pieceSet
                case theme3d
                case pieceSet3d
                case soundSet
                case blindfold
                case autoQueen
                case autoThreefold
                case takeback
                case moretime
                case clockTenths
                case clockBar
                case clockSound
                case premove
                case animation
                case pieceNotation
                case captured
                case follow
                case highlight
                case destination
                case coords
                case replay
                case challenge
                case message
                case submitMove
                case confirmResign
                case insightShare
                case keyboardMove
                case voiceMove
                case zen
                case ratings
                case moveEvent
                case rookCastle
            }
        }
        /// - Remark: Generated from `#/components/schemas/Ok`.
        internal struct Ok: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Ok/ok`.
            internal var ok: Swift.Bool?
            /// Creates a new `Ok`.
            ///
            /// - Parameters:
            ///   - ok:
            internal init(ok: Swift.Bool? = nil) {
                self.ok = ok
            }
            internal enum CodingKeys: String, CodingKey {
                case ok
            }
        }
        /// - Remark: Generated from `#/components/schemas/TimelineEntryFollow`.
        internal struct TimelineEntryFollow: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TimelineEntryFollow/type`.
            @frozen internal enum _typePayload: String, Codable, Hashable, Sendable {
                case follow = "follow"
            }
            /// - Remark: Generated from `#/components/schemas/TimelineEntryFollow/type`.
            internal var _type: Components.Schemas.TimelineEntryFollow._typePayload
            /// - Remark: Generated from `#/components/schemas/TimelineEntryFollow/date`.
            internal var date: Swift.Double
            /// - Remark: Generated from `#/components/schemas/TimelineEntryFollow/data`.
            internal struct dataPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/TimelineEntryFollow/data/u1`.
                internal var u1: Swift.String
                /// - Remark: Generated from `#/components/schemas/TimelineEntryFollow/data/u2`.
                internal var u2: Swift.String
                /// Creates a new `dataPayload`.
                ///
                /// - Parameters:
                ///   - u1:
                ///   - u2:
                internal init(
                    u1: Swift.String,
                    u2: Swift.String
                ) {
                    self.u1 = u1
                    self.u2 = u2
                }
                internal enum CodingKeys: String, CodingKey {
                    case u1
                    case u2
                }
            }
            /// - Remark: Generated from `#/components/schemas/TimelineEntryFollow/data`.
            internal var data: Components.Schemas.TimelineEntryFollow.dataPayload
            /// Creates a new `TimelineEntryFollow`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - date:
            ///   - data:
            internal init(
                _type: Components.Schemas.TimelineEntryFollow._typePayload,
                date: Swift.Double,
                data: Components.Schemas.TimelineEntryFollow.dataPayload
            ) {
                self._type = _type
                self.date = date
                self.data = data
            }
            internal enum CodingKeys: String, CodingKey {
                case _type = "type"
                case date
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/TimelineEntryTeamJoin`.
        internal struct TimelineEntryTeamJoin: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TimelineEntryTeamJoin/type`.
            @frozen internal enum _typePayload: String, Codable, Hashable, Sendable {
                case team_hyphen_join = "team-join"
            }
            /// - Remark: Generated from `#/components/schemas/TimelineEntryTeamJoin/type`.
            internal var _type: Components.Schemas.TimelineEntryTeamJoin._typePayload
            /// - Remark: Generated from `#/components/schemas/TimelineEntryTeamJoin/date`.
            internal var date: Swift.Double
            /// - Remark: Generated from `#/components/schemas/TimelineEntryTeamJoin/data`.
            internal struct dataPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/TimelineEntryTeamJoin/data/userId`.
                internal var userId: Swift.String
                /// - Remark: Generated from `#/components/schemas/TimelineEntryTeamJoin/data/teamId`.
                internal var teamId: Swift.String
                /// Creates a new `dataPayload`.
                ///
                /// - Parameters:
                ///   - userId:
                ///   - teamId:
                internal init(
                    userId: Swift.String,
                    teamId: Swift.String
                ) {
                    self.userId = userId
                    self.teamId = teamId
                }
                internal enum CodingKeys: String, CodingKey {
                    case userId
                    case teamId
                }
            }
            /// - Remark: Generated from `#/components/schemas/TimelineEntryTeamJoin/data`.
            internal var data: Components.Schemas.TimelineEntryTeamJoin.dataPayload
            /// Creates a new `TimelineEntryTeamJoin`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - date:
            ///   - data:
            internal init(
                _type: Components.Schemas.TimelineEntryTeamJoin._typePayload,
                date: Swift.Double,
                data: Components.Schemas.TimelineEntryTeamJoin.dataPayload
            ) {
                self._type = _type
                self.date = date
                self.data = data
            }
            internal enum CodingKeys: String, CodingKey {
                case _type = "type"
                case date
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/TimelineEntryTeamCreate`.
        internal struct TimelineEntryTeamCreate: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TimelineEntryTeamCreate/type`.
            @frozen internal enum _typePayload: String, Codable, Hashable, Sendable {
                case team_hyphen_create = "team-create"
            }
            /// - Remark: Generated from `#/components/schemas/TimelineEntryTeamCreate/type`.
            internal var _type: Components.Schemas.TimelineEntryTeamCreate._typePayload
            /// - Remark: Generated from `#/components/schemas/TimelineEntryTeamCreate/date`.
            internal var date: Swift.Double
            /// - Remark: Generated from `#/components/schemas/TimelineEntryTeamCreate/data`.
            internal struct dataPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/TimelineEntryTeamCreate/data/userId`.
                internal var userId: Swift.String
                /// - Remark: Generated from `#/components/schemas/TimelineEntryTeamCreate/data/teamId`.
                internal var teamId: Swift.String
                /// Creates a new `dataPayload`.
                ///
                /// - Parameters:
                ///   - userId:
                ///   - teamId:
                internal init(
                    userId: Swift.String,
                    teamId: Swift.String
                ) {
                    self.userId = userId
                    self.teamId = teamId
                }
                internal enum CodingKeys: String, CodingKey {
                    case userId
                    case teamId
                }
            }
            /// - Remark: Generated from `#/components/schemas/TimelineEntryTeamCreate/data`.
            internal var data: Components.Schemas.TimelineEntryTeamCreate.dataPayload
            /// Creates a new `TimelineEntryTeamCreate`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - date:
            ///   - data:
            internal init(
                _type: Components.Schemas.TimelineEntryTeamCreate._typePayload,
                date: Swift.Double,
                data: Components.Schemas.TimelineEntryTeamCreate.dataPayload
            ) {
                self._type = _type
                self.date = date
                self.data = data
            }
            internal enum CodingKeys: String, CodingKey {
                case _type = "type"
                case date
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/TimelineEntryForumPost`.
        internal struct TimelineEntryForumPost: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TimelineEntryForumPost/type`.
            @frozen internal enum _typePayload: String, Codable, Hashable, Sendable {
                case forum_hyphen_post = "forum-post"
            }
            /// - Remark: Generated from `#/components/schemas/TimelineEntryForumPost/type`.
            internal var _type: Components.Schemas.TimelineEntryForumPost._typePayload
            /// - Remark: Generated from `#/components/schemas/TimelineEntryForumPost/date`.
            internal var date: Swift.Double
            /// - Remark: Generated from `#/components/schemas/TimelineEntryForumPost/data`.
            internal struct dataPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/TimelineEntryForumPost/data/userId`.
                internal var userId: Swift.String
                /// - Remark: Generated from `#/components/schemas/TimelineEntryForumPost/data/topicId`.
                internal var topicId: Swift.String
                /// - Remark: Generated from `#/components/schemas/TimelineEntryForumPost/data/topicName`.
                internal var topicName: Swift.String
                /// - Remark: Generated from `#/components/schemas/TimelineEntryForumPost/data/postId`.
                internal var postId: Swift.String
                /// Creates a new `dataPayload`.
                ///
                /// - Parameters:
                ///   - userId:
                ///   - topicId:
                ///   - topicName:
                ///   - postId:
                internal init(
                    userId: Swift.String,
                    topicId: Swift.String,
                    topicName: Swift.String,
                    postId: Swift.String
                ) {
                    self.userId = userId
                    self.topicId = topicId
                    self.topicName = topicName
                    self.postId = postId
                }
                internal enum CodingKeys: String, CodingKey {
                    case userId
                    case topicId
                    case topicName
                    case postId
                }
            }
            /// - Remark: Generated from `#/components/schemas/TimelineEntryForumPost/data`.
            internal var data: Components.Schemas.TimelineEntryForumPost.dataPayload
            /// Creates a new `TimelineEntryForumPost`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - date:
            ///   - data:
            internal init(
                _type: Components.Schemas.TimelineEntryForumPost._typePayload,
                date: Swift.Double,
                data: Components.Schemas.TimelineEntryForumPost.dataPayload
            ) {
                self._type = _type
                self.date = date
                self.data = data
            }
            internal enum CodingKeys: String, CodingKey {
                case _type = "type"
                case date
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/TimelineEntryBlogPost`.
        internal struct TimelineEntryBlogPost: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TimelineEntryBlogPost/type`.
            @frozen internal enum _typePayload: String, Codable, Hashable, Sendable {
                case blog_hyphen_post = "blog-post"
            }
            /// - Remark: Generated from `#/components/schemas/TimelineEntryBlogPost/type`.
            internal var _type: Components.Schemas.TimelineEntryBlogPost._typePayload
            /// - Remark: Generated from `#/components/schemas/TimelineEntryBlogPost/date`.
            internal var date: Swift.Double
            /// - Remark: Generated from `#/components/schemas/TimelineEntryBlogPost/data`.
            internal struct dataPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/TimelineEntryBlogPost/data/id`.
                internal var id: Swift.String
                /// - Remark: Generated from `#/components/schemas/TimelineEntryBlogPost/data/slug`.
                internal var slug: Swift.String
                /// - Remark: Generated from `#/components/schemas/TimelineEntryBlogPost/data/title`.
                internal var title: Swift.String
                /// Creates a new `dataPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - slug:
                ///   - title:
                internal init(
                    id: Swift.String,
                    slug: Swift.String,
                    title: Swift.String
                ) {
                    self.id = id
                    self.slug = slug
                    self.title = title
                }
                internal enum CodingKeys: String, CodingKey {
                    case id
                    case slug
                    case title
                }
            }
            /// - Remark: Generated from `#/components/schemas/TimelineEntryBlogPost/data`.
            internal var data: Components.Schemas.TimelineEntryBlogPost.dataPayload
            /// Creates a new `TimelineEntryBlogPost`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - date:
            ///   - data:
            internal init(
                _type: Components.Schemas.TimelineEntryBlogPost._typePayload,
                date: Swift.Double,
                data: Components.Schemas.TimelineEntryBlogPost.dataPayload
            ) {
                self._type = _type
                self.date = date
                self.data = data
            }
            internal enum CodingKeys: String, CodingKey {
                case _type = "type"
                case date
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/TimelineEntryUblogPost`.
        internal struct TimelineEntryUblogPost: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TimelineEntryUblogPost/type`.
            @frozen internal enum _typePayload: String, Codable, Hashable, Sendable {
                case ublog_hyphen_post = "ublog-post"
            }
            /// - Remark: Generated from `#/components/schemas/TimelineEntryUblogPost/type`.
            internal var _type: Components.Schemas.TimelineEntryUblogPost._typePayload
            /// - Remark: Generated from `#/components/schemas/TimelineEntryUblogPost/date`.
            internal var date: Swift.Double
            /// - Remark: Generated from `#/components/schemas/TimelineEntryUblogPost/data`.
            internal struct dataPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/TimelineEntryUblogPost/data/userId`.
                internal var userId: Swift.String
                /// - Remark: Generated from `#/components/schemas/TimelineEntryUblogPost/data/id`.
                internal var id: Swift.String
                /// - Remark: Generated from `#/components/schemas/TimelineEntryUblogPost/data/slug`.
                internal var slug: Swift.String
                /// - Remark: Generated from `#/components/schemas/TimelineEntryUblogPost/data/title`.
                internal var title: Swift.String
                /// Creates a new `dataPayload`.
                ///
                /// - Parameters:
                ///   - userId:
                ///   - id:
                ///   - slug:
                ///   - title:
                internal init(
                    userId: Swift.String,
                    id: Swift.String,
                    slug: Swift.String,
                    title: Swift.String
                ) {
                    self.userId = userId
                    self.id = id
                    self.slug = slug
                    self.title = title
                }
                internal enum CodingKeys: String, CodingKey {
                    case userId
                    case id
                    case slug
                    case title
                }
            }
            /// - Remark: Generated from `#/components/schemas/TimelineEntryUblogPost/data`.
            internal var data: Components.Schemas.TimelineEntryUblogPost.dataPayload
            /// Creates a new `TimelineEntryUblogPost`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - date:
            ///   - data:
            internal init(
                _type: Components.Schemas.TimelineEntryUblogPost._typePayload,
                date: Swift.Double,
                data: Components.Schemas.TimelineEntryUblogPost.dataPayload
            ) {
                self._type = _type
                self.date = date
                self.data = data
            }
            internal enum CodingKeys: String, CodingKey {
                case _type = "type"
                case date
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/TimelineEntryTourJoin`.
        internal struct TimelineEntryTourJoin: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TimelineEntryTourJoin/type`.
            @frozen internal enum _typePayload: String, Codable, Hashable, Sendable {
                case tour_hyphen_join = "tour-join"
            }
            /// - Remark: Generated from `#/components/schemas/TimelineEntryTourJoin/type`.
            internal var _type: Components.Schemas.TimelineEntryTourJoin._typePayload
            /// - Remark: Generated from `#/components/schemas/TimelineEntryTourJoin/date`.
            internal var date: Swift.Double
            /// - Remark: Generated from `#/components/schemas/TimelineEntryTourJoin/data`.
            internal struct dataPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/TimelineEntryTourJoin/data/userId`.
                internal var userId: Swift.String
                /// - Remark: Generated from `#/components/schemas/TimelineEntryTourJoin/data/tourId`.
                internal var tourId: Swift.String
                /// - Remark: Generated from `#/components/schemas/TimelineEntryTourJoin/data/tourName`.
                internal var tourName: Swift.String
                /// Creates a new `dataPayload`.
                ///
                /// - Parameters:
                ///   - userId:
                ///   - tourId:
                ///   - tourName:
                internal init(
                    userId: Swift.String,
                    tourId: Swift.String,
                    tourName: Swift.String
                ) {
                    self.userId = userId
                    self.tourId = tourId
                    self.tourName = tourName
                }
                internal enum CodingKeys: String, CodingKey {
                    case userId
                    case tourId
                    case tourName
                }
            }
            /// - Remark: Generated from `#/components/schemas/TimelineEntryTourJoin/data`.
            internal var data: Components.Schemas.TimelineEntryTourJoin.dataPayload
            /// Creates a new `TimelineEntryTourJoin`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - date:
            ///   - data:
            internal init(
                _type: Components.Schemas.TimelineEntryTourJoin._typePayload,
                date: Swift.Double,
                data: Components.Schemas.TimelineEntryTourJoin.dataPayload
            ) {
                self._type = _type
                self.date = date
                self.data = data
            }
            internal enum CodingKeys: String, CodingKey {
                case _type = "type"
                case date
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/TimelineEntryGameEnd`.
        internal struct TimelineEntryGameEnd: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TimelineEntryGameEnd/type`.
            @frozen internal enum _typePayload: String, Codable, Hashable, Sendable {
                case game_hyphen_end = "game-end"
            }
            /// - Remark: Generated from `#/components/schemas/TimelineEntryGameEnd/type`.
            internal var _type: Components.Schemas.TimelineEntryGameEnd._typePayload
            /// - Remark: Generated from `#/components/schemas/TimelineEntryGameEnd/date`.
            internal var date: Swift.Double
            /// - Remark: Generated from `#/components/schemas/TimelineEntryGameEnd/data`.
            internal struct dataPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/TimelineEntryGameEnd/data/fullId`.
                internal var fullId: Swift.String
                /// - Remark: Generated from `#/components/schemas/TimelineEntryGameEnd/data/opponent`.
                internal var opponent: Swift.String
                /// - Remark: Generated from `#/components/schemas/TimelineEntryGameEnd/data/win`.
                internal var win: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/TimelineEntryGameEnd/data/perf`.
                internal var perf: Components.Schemas.PerfType
                /// Creates a new `dataPayload`.
                ///
                /// - Parameters:
                ///   - fullId:
                ///   - opponent:
                ///   - win:
                ///   - perf:
                internal init(
                    fullId: Swift.String,
                    opponent: Swift.String,
                    win: Swift.Bool,
                    perf: Components.Schemas.PerfType
                ) {
                    self.fullId = fullId
                    self.opponent = opponent
                    self.win = win
                    self.perf = perf
                }
                internal enum CodingKeys: String, CodingKey {
                    case fullId
                    case opponent
                    case win
                    case perf
                }
            }
            /// - Remark: Generated from `#/components/schemas/TimelineEntryGameEnd/data`.
            internal var data: Components.Schemas.TimelineEntryGameEnd.dataPayload
            /// Creates a new `TimelineEntryGameEnd`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - date:
            ///   - data:
            internal init(
                _type: Components.Schemas.TimelineEntryGameEnd._typePayload,
                date: Swift.Double,
                data: Components.Schemas.TimelineEntryGameEnd.dataPayload
            ) {
                self._type = _type
                self.date = date
                self.data = data
            }
            internal enum CodingKeys: String, CodingKey {
                case _type = "type"
                case date
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/TimelineEntrySimul`.
        internal struct TimelineEntrySimul: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TimelineEntrySimul/type`.
            @frozen internal enum _typePayload: String, Codable, Hashable, Sendable {
                case simul_hyphen_create = "simul-create"
                case simul_hyphen_join = "simul-join"
            }
            /// - Remark: Generated from `#/components/schemas/TimelineEntrySimul/type`.
            internal var _type: Components.Schemas.TimelineEntrySimul._typePayload
            /// - Remark: Generated from `#/components/schemas/TimelineEntrySimul/date`.
            internal var date: Swift.Double
            /// - Remark: Generated from `#/components/schemas/TimelineEntrySimul/data`.
            internal struct dataPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/TimelineEntrySimul/data/userId`.
                internal var userId: Swift.String
                /// - Remark: Generated from `#/components/schemas/TimelineEntrySimul/data/simulId`.
                internal var simulId: Swift.String
                /// - Remark: Generated from `#/components/schemas/TimelineEntrySimul/data/simulName`.
                internal var simulName: Swift.String
                /// Creates a new `dataPayload`.
                ///
                /// - Parameters:
                ///   - userId:
                ///   - simulId:
                ///   - simulName:
                internal init(
                    userId: Swift.String,
                    simulId: Swift.String,
                    simulName: Swift.String
                ) {
                    self.userId = userId
                    self.simulId = simulId
                    self.simulName = simulName
                }
                internal enum CodingKeys: String, CodingKey {
                    case userId
                    case simulId
                    case simulName
                }
            }
            /// - Remark: Generated from `#/components/schemas/TimelineEntrySimul/data`.
            internal var data: Components.Schemas.TimelineEntrySimul.dataPayload
            /// Creates a new `TimelineEntrySimul`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - date:
            ///   - data:
            internal init(
                _type: Components.Schemas.TimelineEntrySimul._typePayload,
                date: Swift.Double,
                data: Components.Schemas.TimelineEntrySimul.dataPayload
            ) {
                self._type = _type
                self.date = date
                self.data = data
            }
            internal enum CodingKeys: String, CodingKey {
                case _type = "type"
                case date
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/TimelineEntryStudyLike`.
        internal struct TimelineEntryStudyLike: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TimelineEntryStudyLike/type`.
            @frozen internal enum _typePayload: String, Codable, Hashable, Sendable {
                case study_hyphen_like = "study-like"
            }
            /// - Remark: Generated from `#/components/schemas/TimelineEntryStudyLike/type`.
            internal var _type: Components.Schemas.TimelineEntryStudyLike._typePayload
            /// - Remark: Generated from `#/components/schemas/TimelineEntryStudyLike/date`.
            internal var date: Swift.Double
            /// - Remark: Generated from `#/components/schemas/TimelineEntryStudyLike/data`.
            internal struct dataPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/TimelineEntryStudyLike/data/userId`.
                internal var userId: Swift.String
                /// - Remark: Generated from `#/components/schemas/TimelineEntryStudyLike/data/studyId`.
                internal var studyId: Swift.String
                /// - Remark: Generated from `#/components/schemas/TimelineEntryStudyLike/data/studyName`.
                internal var studyName: Swift.String
                /// Creates a new `dataPayload`.
                ///
                /// - Parameters:
                ///   - userId:
                ///   - studyId:
                ///   - studyName:
                internal init(
                    userId: Swift.String,
                    studyId: Swift.String,
                    studyName: Swift.String
                ) {
                    self.userId = userId
                    self.studyId = studyId
                    self.studyName = studyName
                }
                internal enum CodingKeys: String, CodingKey {
                    case userId
                    case studyId
                    case studyName
                }
            }
            /// - Remark: Generated from `#/components/schemas/TimelineEntryStudyLike/data`.
            internal var data: Components.Schemas.TimelineEntryStudyLike.dataPayload
            /// Creates a new `TimelineEntryStudyLike`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - date:
            ///   - data:
            internal init(
                _type: Components.Schemas.TimelineEntryStudyLike._typePayload,
                date: Swift.Double,
                data: Components.Schemas.TimelineEntryStudyLike.dataPayload
            ) {
                self._type = _type
                self.date = date
                self.data = data
            }
            internal enum CodingKeys: String, CodingKey {
                case _type = "type"
                case date
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/TimelineEntryPlanStart`.
        internal struct TimelineEntryPlanStart: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TimelineEntryPlanStart/type`.
            @frozen internal enum _typePayload: String, Codable, Hashable, Sendable {
                case plan_hyphen_start = "plan-start"
            }
            /// - Remark: Generated from `#/components/schemas/TimelineEntryPlanStart/type`.
            internal var _type: Components.Schemas.TimelineEntryPlanStart._typePayload
            /// - Remark: Generated from `#/components/schemas/TimelineEntryPlanStart/date`.
            internal var date: Swift.Double
            /// - Remark: Generated from `#/components/schemas/TimelineEntryPlanStart/data`.
            internal struct dataPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/TimelineEntryPlanStart/data/userId`.
                internal var userId: Swift.String
                /// Creates a new `dataPayload`.
                ///
                /// - Parameters:
                ///   - userId:
                internal init(userId: Swift.String) {
                    self.userId = userId
                }
                internal enum CodingKeys: String, CodingKey {
                    case userId
                }
            }
            /// - Remark: Generated from `#/components/schemas/TimelineEntryPlanStart/data`.
            internal var data: Components.Schemas.TimelineEntryPlanStart.dataPayload
            /// Creates a new `TimelineEntryPlanStart`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - date:
            ///   - data:
            internal init(
                _type: Components.Schemas.TimelineEntryPlanStart._typePayload,
                date: Swift.Double,
                data: Components.Schemas.TimelineEntryPlanStart.dataPayload
            ) {
                self._type = _type
                self.date = date
                self.data = data
            }
            internal enum CodingKeys: String, CodingKey {
                case _type = "type"
                case date
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/TimelineEntryPlanRenew`.
        internal struct TimelineEntryPlanRenew: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TimelineEntryPlanRenew/type`.
            @frozen internal enum _typePayload: String, Codable, Hashable, Sendable {
                case plan_hyphen_renew = "plan-renew"
            }
            /// - Remark: Generated from `#/components/schemas/TimelineEntryPlanRenew/type`.
            internal var _type: Components.Schemas.TimelineEntryPlanRenew._typePayload
            /// - Remark: Generated from `#/components/schemas/TimelineEntryPlanRenew/date`.
            internal var date: Swift.Double
            /// - Remark: Generated from `#/components/schemas/TimelineEntryPlanRenew/data`.
            internal struct dataPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/TimelineEntryPlanRenew/data/userId`.
                internal var userId: Swift.String
                /// - Remark: Generated from `#/components/schemas/TimelineEntryPlanRenew/data/months`.
                internal var months: Swift.Double
                /// Creates a new `dataPayload`.
                ///
                /// - Parameters:
                ///   - userId:
                ///   - months:
                internal init(
                    userId: Swift.String,
                    months: Swift.Double
                ) {
                    self.userId = userId
                    self.months = months
                }
                internal enum CodingKeys: String, CodingKey {
                    case userId
                    case months
                }
            }
            /// - Remark: Generated from `#/components/schemas/TimelineEntryPlanRenew/data`.
            internal var data: Components.Schemas.TimelineEntryPlanRenew.dataPayload
            /// Creates a new `TimelineEntryPlanRenew`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - date:
            ///   - data:
            internal init(
                _type: Components.Schemas.TimelineEntryPlanRenew._typePayload,
                date: Swift.Double,
                data: Components.Schemas.TimelineEntryPlanRenew.dataPayload
            ) {
                self._type = _type
                self.date = date
                self.data = data
            }
            internal enum CodingKeys: String, CodingKey {
                case _type = "type"
                case date
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/TimelineEntryUblogPostLike`.
        internal struct TimelineEntryUblogPostLike: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TimelineEntryUblogPostLike/type`.
            @frozen internal enum _typePayload: String, Codable, Hashable, Sendable {
                case ublog_hyphen_post_hyphen_like = "ublog-post-like"
            }
            /// - Remark: Generated from `#/components/schemas/TimelineEntryUblogPostLike/type`.
            internal var _type: Components.Schemas.TimelineEntryUblogPostLike._typePayload
            /// - Remark: Generated from `#/components/schemas/TimelineEntryUblogPostLike/date`.
            internal var date: Swift.Double
            /// - Remark: Generated from `#/components/schemas/TimelineEntryUblogPostLike/data`.
            internal struct dataPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/TimelineEntryUblogPostLike/data/userId`.
                internal var userId: Swift.String
                /// - Remark: Generated from `#/components/schemas/TimelineEntryUblogPostLike/data/id`.
                internal var id: Swift.String
                /// - Remark: Generated from `#/components/schemas/TimelineEntryUblogPostLike/data/title`.
                internal var title: Swift.String
                /// Creates a new `dataPayload`.
                ///
                /// - Parameters:
                ///   - userId:
                ///   - id:
                ///   - title:
                internal init(
                    userId: Swift.String,
                    id: Swift.String,
                    title: Swift.String
                ) {
                    self.userId = userId
                    self.id = id
                    self.title = title
                }
                internal enum CodingKeys: String, CodingKey {
                    case userId
                    case id
                    case title
                }
            }
            /// - Remark: Generated from `#/components/schemas/TimelineEntryUblogPostLike/data`.
            internal var data: Components.Schemas.TimelineEntryUblogPostLike.dataPayload
            /// Creates a new `TimelineEntryUblogPostLike`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - date:
            ///   - data:
            internal init(
                _type: Components.Schemas.TimelineEntryUblogPostLike._typePayload,
                date: Swift.Double,
                data: Components.Schemas.TimelineEntryUblogPostLike.dataPayload
            ) {
                self._type = _type
                self.date = date
                self.data = data
            }
            internal enum CodingKeys: String, CodingKey {
                case _type = "type"
                case date
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/TimelineEntryStreamStart`.
        internal struct TimelineEntryStreamStart: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TimelineEntryStreamStart/type`.
            @frozen internal enum _typePayload: String, Codable, Hashable, Sendable {
                case stream_hyphen_start = "stream-start"
            }
            /// - Remark: Generated from `#/components/schemas/TimelineEntryStreamStart/type`.
            internal var _type: Components.Schemas.TimelineEntryStreamStart._typePayload
            /// - Remark: Generated from `#/components/schemas/TimelineEntryStreamStart/date`.
            internal var date: Swift.Double
            /// - Remark: Generated from `#/components/schemas/TimelineEntryStreamStart/data`.
            internal struct dataPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/TimelineEntryStreamStart/data/id`.
                internal var id: Swift.String
                /// - Remark: Generated from `#/components/schemas/TimelineEntryStreamStart/data/title`.
                internal var title: Swift.String?
                /// Creates a new `dataPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - title:
                internal init(
                    id: Swift.String,
                    title: Swift.String? = nil
                ) {
                    self.id = id
                    self.title = title
                }
                internal enum CodingKeys: String, CodingKey {
                    case id
                    case title
                }
            }
            /// - Remark: Generated from `#/components/schemas/TimelineEntryStreamStart/data`.
            internal var data: Components.Schemas.TimelineEntryStreamStart.dataPayload
            /// Creates a new `TimelineEntryStreamStart`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - date:
            ///   - data:
            internal init(
                _type: Components.Schemas.TimelineEntryStreamStart._typePayload,
                date: Swift.Double,
                data: Components.Schemas.TimelineEntryStreamStart.dataPayload
            ) {
                self._type = _type
                self.date = date
                self.data = data
            }
            internal enum CodingKeys: String, CodingKey {
                case _type = "type"
                case date
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/Timeline`.
        internal struct Timeline: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Timeline/entriesPayload`.
            internal struct entriesPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Timeline/entriesPayload/value1`.
                internal var value1: Components.Schemas.TimelineEntryFollow?
                /// - Remark: Generated from `#/components/schemas/Timeline/entriesPayload/value2`.
                internal var value2: Components.Schemas.TimelineEntryTeamJoin?
                /// - Remark: Generated from `#/components/schemas/Timeline/entriesPayload/value3`.
                internal var value3: Components.Schemas.TimelineEntryTeamCreate?
                /// - Remark: Generated from `#/components/schemas/Timeline/entriesPayload/value4`.
                internal var value4: Components.Schemas.TimelineEntryForumPost?
                /// - Remark: Generated from `#/components/schemas/Timeline/entriesPayload/value5`.
                internal var value5: Components.Schemas.TimelineEntryBlogPost?
                /// - Remark: Generated from `#/components/schemas/Timeline/entriesPayload/value6`.
                internal var value6: Components.Schemas.TimelineEntryUblogPost?
                /// - Remark: Generated from `#/components/schemas/Timeline/entriesPayload/value7`.
                internal var value7: Components.Schemas.TimelineEntryTourJoin?
                /// - Remark: Generated from `#/components/schemas/Timeline/entriesPayload/value8`.
                internal var value8: Components.Schemas.TimelineEntryGameEnd?
                /// - Remark: Generated from `#/components/schemas/Timeline/entriesPayload/value9`.
                internal var value9: Components.Schemas.TimelineEntrySimul?
                /// - Remark: Generated from `#/components/schemas/Timeline/entriesPayload/value10`.
                internal var value10: Components.Schemas.TimelineEntryStudyLike?
                /// - Remark: Generated from `#/components/schemas/Timeline/entriesPayload/value11`.
                internal var value11: Components.Schemas.TimelineEntryPlanStart?
                /// - Remark: Generated from `#/components/schemas/Timeline/entriesPayload/value12`.
                internal var value12: Components.Schemas.TimelineEntryPlanRenew?
                /// - Remark: Generated from `#/components/schemas/Timeline/entriesPayload/value13`.
                internal var value13: Components.Schemas.TimelineEntryUblogPostLike?
                /// - Remark: Generated from `#/components/schemas/Timeline/entriesPayload/value14`.
                internal var value14: Components.Schemas.TimelineEntryStreamStart?
                /// Creates a new `entriesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                ///   - value3:
                ///   - value4:
                ///   - value5:
                ///   - value6:
                ///   - value7:
                ///   - value8:
                ///   - value9:
                ///   - value10:
                ///   - value11:
                ///   - value12:
                ///   - value13:
                ///   - value14:
                internal init(
                    value1: Components.Schemas.TimelineEntryFollow? = nil,
                    value2: Components.Schemas.TimelineEntryTeamJoin? = nil,
                    value3: Components.Schemas.TimelineEntryTeamCreate? = nil,
                    value4: Components.Schemas.TimelineEntryForumPost? = nil,
                    value5: Components.Schemas.TimelineEntryBlogPost? = nil,
                    value6: Components.Schemas.TimelineEntryUblogPost? = nil,
                    value7: Components.Schemas.TimelineEntryTourJoin? = nil,
                    value8: Components.Schemas.TimelineEntryGameEnd? = nil,
                    value9: Components.Schemas.TimelineEntrySimul? = nil,
                    value10: Components.Schemas.TimelineEntryStudyLike? = nil,
                    value11: Components.Schemas.TimelineEntryPlanStart? = nil,
                    value12: Components.Schemas.TimelineEntryPlanRenew? = nil,
                    value13: Components.Schemas.TimelineEntryUblogPostLike? = nil,
                    value14: Components.Schemas.TimelineEntryStreamStart? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                    self.value3 = value3
                    self.value4 = value4
                    self.value5 = value5
                    self.value6 = value6
                    self.value7 = value7
                    self.value8 = value8
                    self.value9 = value9
                    self.value10 = value10
                    self.value11 = value11
                    self.value12 = value12
                    self.value13 = value13
                    self.value14 = value14
                }
                internal init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        value1 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value2 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value3 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value4 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value5 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value6 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value7 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value8 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value9 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value10 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value11 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value12 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value13 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value14 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            value1,
                            value2,
                            value3,
                            value4,
                            value5,
                            value6,
                            value7,
                            value8,
                            value9,
                            value10,
                            value11,
                            value12,
                            value13,
                            value14
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                internal func encode(to encoder: any Encoder) throws {
                    try value1?.encode(to: encoder)
                    try value2?.encode(to: encoder)
                    try value3?.encode(to: encoder)
                    try value4?.encode(to: encoder)
                    try value5?.encode(to: encoder)
                    try value6?.encode(to: encoder)
                    try value7?.encode(to: encoder)
                    try value8?.encode(to: encoder)
                    try value9?.encode(to: encoder)
                    try value10?.encode(to: encoder)
                    try value11?.encode(to: encoder)
                    try value12?.encode(to: encoder)
                    try value13?.encode(to: encoder)
                    try value14?.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/Timeline/entries`.
            internal typealias entriesPayload = [Components.Schemas.Timeline.entriesPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/Timeline/entries`.
            internal var entries: Components.Schemas.Timeline.entriesPayload
            /// - Remark: Generated from `#/components/schemas/Timeline/users`.
            internal struct usersPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Timeline/users/additionalProperties`.
                internal struct additionalPropertiesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/Timeline/users/additionalProperties/id`.
                    internal var id: Swift.String
                    /// - Remark: Generated from `#/components/schemas/Timeline/users/additionalProperties/name`.
                    internal var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/Timeline/users/additionalProperties/title`.
                    internal var title: Components.Schemas.Title?
                    /// - Remark: Generated from `#/components/schemas/Timeline/users/additionalProperties/flair`.
                    internal var flair: Components.Schemas.Flair?
                    /// - Remark: Generated from `#/components/schemas/Timeline/users/additionalProperties/patron`.
                    internal var patron: Swift.Bool?
                    /// Creates a new `additionalPropertiesPayload`.
                    ///
                    /// - Parameters:
                    ///   - id:
                    ///   - name:
                    ///   - title:
                    ///   - flair:
                    ///   - patron:
                    internal init(
                        id: Swift.String,
                        name: Swift.String,
                        title: Components.Schemas.Title? = nil,
                        flair: Components.Schemas.Flair? = nil,
                        patron: Swift.Bool? = nil
                    ) {
                        self.id = id
                        self.name = name
                        self.title = title
                        self.flair = flair
                        self.patron = patron
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case id
                        case name
                        case title
                        case flair
                        case patron
                    }
                }
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Components.Schemas.Timeline.usersPayload.additionalPropertiesPayload]
                /// Creates a new `usersPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Components.Schemas.Timeline.usersPayload.additionalPropertiesPayload] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/Timeline/users`.
            internal var users: Components.Schemas.Timeline.usersPayload
            /// Creates a new `Timeline`.
            ///
            /// - Parameters:
            ///   - entries:
            ///   - users:
            internal init(
                entries: Components.Schemas.Timeline.entriesPayload,
                users: Components.Schemas.Timeline.usersPayload
            ) {
                self.entries = entries
                self.users = users
            }
            internal enum CodingKeys: String, CodingKey {
                case entries
                case users
            }
        }
        /// - Remark: Generated from `#/components/schemas/GamePgn`.
        internal typealias GamePgn = Swift.String
        /// - Remark: Generated from `#/components/schemas/Speed`.
        @frozen internal enum Speed: String, Codable, Hashable, Sendable {
            case ultraBullet = "ultraBullet"
            case bullet = "bullet"
            case blitz = "blitz"
            case rapid = "rapid"
            case classical = "classical"
            case correspondence = "correspondence"
        }
        /// - Remark: Generated from `#/components/schemas/GameStatusName`.
        @frozen internal enum GameStatusName: String, Codable, Hashable, Sendable {
            case created = "created"
            case started = "started"
            case aborted = "aborted"
            case mate = "mate"
            case resign = "resign"
            case stalemate = "stalemate"
            case timeout = "timeout"
            case draw = "draw"
            case outoftime = "outoftime"
            case cheat = "cheat"
            case noStart = "noStart"
            case unknownFinish = "unknownFinish"
            case insufficientMaterialClaim = "insufficientMaterialClaim"
            case variantEnd = "variantEnd"
        }
        /// - Remark: Generated from `#/components/schemas/LightUser`.
        internal struct LightUser: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/LightUser/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/LightUser/name`.
            internal var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/LightUser/flair`.
            internal var flair: Components.Schemas.Flair?
            /// - Remark: Generated from `#/components/schemas/LightUser/title`.
            internal var title: Components.Schemas.Title?
            /// - Remark: Generated from `#/components/schemas/LightUser/patron`.
            internal var patron: Swift.Bool?
            /// Creates a new `LightUser`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - flair:
            ///   - title:
            ///   - patron:
            internal init(
                id: Swift.String,
                name: Swift.String,
                flair: Components.Schemas.Flair? = nil,
                title: Components.Schemas.Title? = nil,
                patron: Swift.Bool? = nil
            ) {
                self.id = id
                self.name = name
                self.flair = flair
                self.title = title
                self.patron = patron
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case name
                case flair
                case title
                case patron
            }
        }
        /// - Remark: Generated from `#/components/schemas/GameUser`.
        internal struct GameUser: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GameUser/user`.
            internal var user: Components.Schemas.LightUser
            /// - Remark: Generated from `#/components/schemas/GameUser/rating`.
            internal var rating: Swift.Int
            /// - Remark: Generated from `#/components/schemas/GameUser/ratingDiff`.
            internal var ratingDiff: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/GameUser/name`.
            internal var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GameUser/provisional`.
            internal var provisional: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/GameUser/aiLevel`.
            internal var aiLevel: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/GameUser/analysis`.
            internal struct analysisPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/GameUser/analysis/inaccuracy`.
                internal var inaccuracy: Swift.Double
                /// - Remark: Generated from `#/components/schemas/GameUser/analysis/mistake`.
                internal var mistake: Swift.Double
                /// - Remark: Generated from `#/components/schemas/GameUser/analysis/blunder`.
                internal var blunder: Swift.Double
                /// - Remark: Generated from `#/components/schemas/GameUser/analysis/acpl`.
                internal var acpl: Swift.Double
                /// - Remark: Generated from `#/components/schemas/GameUser/analysis/accuracy`.
                internal var accuracy: Swift.Double?
                /// Creates a new `analysisPayload`.
                ///
                /// - Parameters:
                ///   - inaccuracy:
                ///   - mistake:
                ///   - blunder:
                ///   - acpl:
                ///   - accuracy:
                internal init(
                    inaccuracy: Swift.Double,
                    mistake: Swift.Double,
                    blunder: Swift.Double,
                    acpl: Swift.Double,
                    accuracy: Swift.Double? = nil
                ) {
                    self.inaccuracy = inaccuracy
                    self.mistake = mistake
                    self.blunder = blunder
                    self.acpl = acpl
                    self.accuracy = accuracy
                }
                internal enum CodingKeys: String, CodingKey {
                    case inaccuracy
                    case mistake
                    case blunder
                    case acpl
                    case accuracy
                }
            }
            /// - Remark: Generated from `#/components/schemas/GameUser/analysis`.
            internal var analysis: Components.Schemas.GameUser.analysisPayload?
            /// - Remark: Generated from `#/components/schemas/GameUser/team`.
            internal var team: Swift.String?
            /// Creates a new `GameUser`.
            ///
            /// - Parameters:
            ///   - user:
            ///   - rating:
            ///   - ratingDiff:
            ///   - name:
            ///   - provisional:
            ///   - aiLevel:
            ///   - analysis:
            ///   - team:
            internal init(
                user: Components.Schemas.LightUser,
                rating: Swift.Int,
                ratingDiff: Swift.Int? = nil,
                name: Swift.String? = nil,
                provisional: Swift.Bool? = nil,
                aiLevel: Swift.Int? = nil,
                analysis: Components.Schemas.GameUser.analysisPayload? = nil,
                team: Swift.String? = nil
            ) {
                self.user = user
                self.rating = rating
                self.ratingDiff = ratingDiff
                self.name = name
                self.provisional = provisional
                self.aiLevel = aiLevel
                self.analysis = analysis
                self.team = team
            }
            internal enum CodingKeys: String, CodingKey {
                case user
                case rating
                case ratingDiff
                case name
                case provisional
                case aiLevel
                case analysis
                case team
            }
        }
        /// - Remark: Generated from `#/components/schemas/GameUsers`.
        internal struct GameUsers: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GameUsers/white`.
            internal var white: Components.Schemas.GameUser
            /// - Remark: Generated from `#/components/schemas/GameUsers/black`.
            internal var black: Components.Schemas.GameUser
            /// Creates a new `GameUsers`.
            ///
            /// - Parameters:
            ///   - white:
            ///   - black:
            internal init(
                white: Components.Schemas.GameUser,
                black: Components.Schemas.GameUser
            ) {
                self.white = white
                self.black = black
            }
            internal enum CodingKeys: String, CodingKey {
                case white
                case black
            }
        }
        /// - Remark: Generated from `#/components/schemas/GameOpening`.
        internal struct GameOpening: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GameOpening/eco`.
            internal var eco: Swift.String
            /// - Remark: Generated from `#/components/schemas/GameOpening/name`.
            internal var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/GameOpening/ply`.
            internal var ply: Swift.Int
            /// Creates a new `GameOpening`.
            ///
            /// - Parameters:
            ///   - eco:
            ///   - name:
            ///   - ply:
            internal init(
                eco: Swift.String,
                name: Swift.String,
                ply: Swift.Int
            ) {
                self.eco = eco
                self.name = name
                self.ply = ply
            }
            internal enum CodingKeys: String, CodingKey {
                case eco
                case name
                case ply
            }
        }
        /// - Remark: Generated from `#/components/schemas/GameMoveAnalysis`.
        internal struct GameMoveAnalysis: Codable, Hashable, Sendable {
            /// Evaluation in centipawns
            ///
            /// - Remark: Generated from `#/components/schemas/GameMoveAnalysis/eval`.
            internal var eval: Swift.Double?
            /// Number of moves until forced mate
            ///
            /// - Remark: Generated from `#/components/schemas/GameMoveAnalysis/mate`.
            internal var mate: Swift.Double?
            /// Best move in UCI notation (only if played move was inaccurate)
            ///
            /// - Remark: Generated from `#/components/schemas/GameMoveAnalysis/best`.
            internal var best: Swift.String?
            /// Best variation in SAN notation (only if played move was inaccurate)
            ///
            /// - Remark: Generated from `#/components/schemas/GameMoveAnalysis/variation`.
            internal var variation: Swift.String?
            /// Judgment annotation (only if played move was inaccurate)
            ///
            /// - Remark: Generated from `#/components/schemas/GameMoveAnalysis/judgment`.
            internal struct judgmentPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/GameMoveAnalysis/judgment/name`.
                @frozen internal enum namePayload: String, Codable, Hashable, Sendable {
                    case Inaccuracy = "Inaccuracy"
                    case Mistake = "Mistake"
                    case Blunder = "Blunder"
                }
                /// - Remark: Generated from `#/components/schemas/GameMoveAnalysis/judgment/name`.
                internal var name: Components.Schemas.GameMoveAnalysis.judgmentPayload.namePayload?
                /// - Remark: Generated from `#/components/schemas/GameMoveAnalysis/judgment/comment`.
                internal var comment: Swift.String?
                /// Creates a new `judgmentPayload`.
                ///
                /// - Parameters:
                ///   - name:
                ///   - comment:
                internal init(
                    name: Components.Schemas.GameMoveAnalysis.judgmentPayload.namePayload? = nil,
                    comment: Swift.String? = nil
                ) {
                    self.name = name
                    self.comment = comment
                }
                internal enum CodingKeys: String, CodingKey {
                    case name
                    case comment
                }
            }
            /// Judgment annotation (only if played move was inaccurate)
            ///
            /// - Remark: Generated from `#/components/schemas/GameMoveAnalysis/judgment`.
            internal var judgment: Components.Schemas.GameMoveAnalysis.judgmentPayload?
            /// Creates a new `GameMoveAnalysis`.
            ///
            /// - Parameters:
            ///   - eval: Evaluation in centipawns
            ///   - mate: Number of moves until forced mate
            ///   - best: Best move in UCI notation (only if played move was inaccurate)
            ///   - variation: Best variation in SAN notation (only if played move was inaccurate)
            ///   - judgment: Judgment annotation (only if played move was inaccurate)
            internal init(
                eval: Swift.Double? = nil,
                mate: Swift.Double? = nil,
                best: Swift.String? = nil,
                variation: Swift.String? = nil,
                judgment: Components.Schemas.GameMoveAnalysis.judgmentPayload? = nil
            ) {
                self.eval = eval
                self.mate = mate
                self.best = best
                self.variation = variation
                self.judgment = judgment
            }
            internal enum CodingKeys: String, CodingKey {
                case eval
                case mate
                case best
                case variation
                case judgment
            }
        }
        /// - Remark: Generated from `#/components/schemas/GameJson`.
        internal struct GameJson: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GameJson/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/GameJson/rated`.
            internal var rated: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/GameJson/variant`.
            internal var variant: Components.Schemas.VariantKey
            /// - Remark: Generated from `#/components/schemas/GameJson/speed`.
            internal var speed: Components.Schemas.Speed
            /// - Remark: Generated from `#/components/schemas/GameJson/perf`.
            internal var perf: Swift.String
            /// - Remark: Generated from `#/components/schemas/GameJson/createdAt`.
            internal var createdAt: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/GameJson/lastMoveAt`.
            internal var lastMoveAt: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/GameJson/status`.
            internal var status: Components.Schemas.GameStatusName
            /// - Remark: Generated from `#/components/schemas/GameJson/source`.
            internal var source: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GameJson/players`.
            internal var players: Components.Schemas.GameUsers
            /// - Remark: Generated from `#/components/schemas/GameJson/initialFen`.
            internal var initialFen: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GameJson/winner`.
            internal var winner: Components.Schemas.GameColor?
            /// - Remark: Generated from `#/components/schemas/GameJson/opening`.
            internal var opening: Components.Schemas.GameOpening?
            /// - Remark: Generated from `#/components/schemas/GameJson/moves`.
            internal var moves: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GameJson/pgn`.
            internal var pgn: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GameJson/daysPerTurn`.
            internal var daysPerTurn: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/GameJson/analysis`.
            internal var analysis: [Components.Schemas.GameMoveAnalysis]?
            /// - Remark: Generated from `#/components/schemas/GameJson/tournament`.
            internal var tournament: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GameJson/swiss`.
            internal var swiss: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GameJson/clock`.
            internal struct clockPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/GameJson/clock/initial`.
                internal var initial: Swift.Int
                /// - Remark: Generated from `#/components/schemas/GameJson/clock/increment`.
                internal var increment: Swift.Int
                /// - Remark: Generated from `#/components/schemas/GameJson/clock/totalTime`.
                internal var totalTime: Swift.Int
                /// Creates a new `clockPayload`.
                ///
                /// - Parameters:
                ///   - initial:
                ///   - increment:
                ///   - totalTime:
                internal init(
                    initial: Swift.Int,
                    increment: Swift.Int,
                    totalTime: Swift.Int
                ) {
                    self.initial = initial
                    self.increment = increment
                    self.totalTime = totalTime
                }
                internal enum CodingKeys: String, CodingKey {
                    case initial
                    case increment
                    case totalTime
                }
            }
            /// - Remark: Generated from `#/components/schemas/GameJson/clock`.
            internal var clock: Components.Schemas.GameJson.clockPayload?
            /// - Remark: Generated from `#/components/schemas/GameJson/clocks`.
            internal var clocks: [Swift.Int]?
            /// - Remark: Generated from `#/components/schemas/GameJson/division`.
            internal struct divisionPayload: Codable, Hashable, Sendable {
                /// Ply at which the middlegame begins
                ///
                /// - Remark: Generated from `#/components/schemas/GameJson/division/middle`.
                internal var middle: Swift.Int?
                /// Ply at which the endgame begins
                ///
                /// - Remark: Generated from `#/components/schemas/GameJson/division/end`.
                internal var end: Swift.Int?
                /// Creates a new `divisionPayload`.
                ///
                /// - Parameters:
                ///   - middle: Ply at which the middlegame begins
                ///   - end: Ply at which the endgame begins
                internal init(
                    middle: Swift.Int? = nil,
                    end: Swift.Int? = nil
                ) {
                    self.middle = middle
                    self.end = end
                }
                internal enum CodingKeys: String, CodingKey {
                    case middle
                    case end
                }
            }
            /// - Remark: Generated from `#/components/schemas/GameJson/division`.
            internal var division: Components.Schemas.GameJson.divisionPayload?
            /// Creates a new `GameJson`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - rated:
            ///   - variant:
            ///   - speed:
            ///   - perf:
            ///   - createdAt:
            ///   - lastMoveAt:
            ///   - status:
            ///   - source:
            ///   - players:
            ///   - initialFen:
            ///   - winner:
            ///   - opening:
            ///   - moves:
            ///   - pgn:
            ///   - daysPerTurn:
            ///   - analysis:
            ///   - tournament:
            ///   - swiss:
            ///   - clock:
            ///   - clocks:
            ///   - division:
            internal init(
                id: Swift.String,
                rated: Swift.Bool,
                variant: Components.Schemas.VariantKey,
                speed: Components.Schemas.Speed,
                perf: Swift.String,
                createdAt: Swift.Int64,
                lastMoveAt: Swift.Int64,
                status: Components.Schemas.GameStatusName,
                source: Swift.String? = nil,
                players: Components.Schemas.GameUsers,
                initialFen: Swift.String? = nil,
                winner: Components.Schemas.GameColor? = nil,
                opening: Components.Schemas.GameOpening? = nil,
                moves: Swift.String? = nil,
                pgn: Swift.String? = nil,
                daysPerTurn: Swift.Int? = nil,
                analysis: [Components.Schemas.GameMoveAnalysis]? = nil,
                tournament: Swift.String? = nil,
                swiss: Swift.String? = nil,
                clock: Components.Schemas.GameJson.clockPayload? = nil,
                clocks: [Swift.Int]? = nil,
                division: Components.Schemas.GameJson.divisionPayload? = nil
            ) {
                self.id = id
                self.rated = rated
                self.variant = variant
                self.speed = speed
                self.perf = perf
                self.createdAt = createdAt
                self.lastMoveAt = lastMoveAt
                self.status = status
                self.source = source
                self.players = players
                self.initialFen = initialFen
                self.winner = winner
                self.opening = opening
                self.moves = moves
                self.pgn = pgn
                self.daysPerTurn = daysPerTurn
                self.analysis = analysis
                self.tournament = tournament
                self.swiss = swiss
                self.clock = clock
                self.clocks = clocks
                self.division = division
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case rated
                case variant
                case speed
                case perf
                case createdAt
                case lastMoveAt
                case status
                case source
                case players
                case initialFen
                case winner
                case opening
                case moves
                case pgn
                case daysPerTurn
                case analysis
                case tournament
                case swiss
                case clock
                case clocks
                case division
            }
        }
        /// - Remark: Generated from `#/components/schemas/GameStream`.
        internal typealias GameStream = OpenAPIRuntime.OpenAPIValueContainer
        /// - Remark: Generated from `#/components/schemas/GameSource`.
        @frozen internal enum GameSource: String, Codable, Hashable, Sendable {
            case lobby = "lobby"
            case friend = "friend"
            case ai = "ai"
            case api = "api"
            case tournament = "tournament"
            case position = "position"
            case _import = "import"
            case importlive = "importlive"
            case simul = "simul"
            case relay = "relay"
            case pool = "pool"
            case swiss = "swiss"
        }
        /// - Remark: Generated from `#/components/schemas/Variant`.
        internal struct Variant: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Variant/key`.
            internal var key: Components.Schemas.VariantKey
            /// - Remark: Generated from `#/components/schemas/Variant/name`.
            internal var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/Variant/short`.
            internal var short: Swift.String?
            /// Creates a new `Variant`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - short:
            internal init(
                key: Components.Schemas.VariantKey,
                name: Swift.String,
                short: Swift.String? = nil
            ) {
                self.key = key
                self.name = name
                self.short = short
            }
            internal enum CodingKeys: String, CodingKey {
                case key
                case name
                case short
            }
        }
        /// - Remark: Generated from `#/components/schemas/MoveStream`.
        internal typealias MoveStream = OpenAPIRuntime.OpenAPIValueContainer
        /// - Remark: Generated from `#/components/schemas/TvGame`.
        internal struct TvGame: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TvGame/user`.
            internal var user: Components.Schemas.LightUser
            /// - Remark: Generated from `#/components/schemas/TvGame/rating`.
            internal var rating: Swift.Double
            /// - Remark: Generated from `#/components/schemas/TvGame/gameId`.
            internal var gameId: Swift.String
            /// - Remark: Generated from `#/components/schemas/TvGame/color`.
            internal var color: Components.Schemas.GameColor
            /// Creates a new `TvGame`.
            ///
            /// - Parameters:
            ///   - user:
            ///   - rating:
            ///   - gameId:
            ///   - color:
            internal init(
                user: Components.Schemas.LightUser,
                rating: Swift.Double,
                gameId: Swift.String,
                color: Components.Schemas.GameColor
            ) {
                self.user = user
                self.rating = rating
                self.gameId = gameId
                self.color = color
            }
            internal enum CodingKeys: String, CodingKey {
                case user
                case rating
                case gameId
                case color
            }
        }
        /// - Remark: Generated from `#/components/schemas/TvFeed`.
        internal struct TvFeed: Codable, Hashable, Sendable {
            /// The type of message.
            /// A summary of the game is sent as the first message and when the featured game changes.
            /// Subsequent messages are just the FEN, last move, and clocks.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TvFeed/t`.
            @frozen internal enum tPayload: String, Codable, Hashable, Sendable {
                case featured = "featured"
                case fen = "fen"
            }
            /// The type of message.
            /// A summary of the game is sent as the first message and when the featured game changes.
            /// Subsequent messages are just the FEN, last move, and clocks.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TvFeed/t`.
            internal var t: Components.Schemas.TvFeed.tPayload
            /// The data of the message
            ///
            /// - Remark: Generated from `#/components/schemas/TvFeed/d`.
            @frozen internal enum dPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/TvFeed/d/case1`.
                internal struct Case1Payload: Codable, Hashable, Sendable {
                    /// The game ID
                    ///
                    /// - Remark: Generated from `#/components/schemas/TvFeed/d/case1/id`.
                    internal var id: Swift.String
                    /// - Remark: Generated from `#/components/schemas/TvFeed/d/case1/orientation`.
                    @frozen internal enum orientationPayload: String, Codable, Hashable, Sendable {
                        case white = "white"
                        case black = "black"
                    }
                    /// - Remark: Generated from `#/components/schemas/TvFeed/d/case1/orientation`.
                    internal var orientation: Components.Schemas.TvFeed.dPayload.Case1Payload.orientationPayload
                    /// - Remark: Generated from `#/components/schemas/TvFeed/d/case1/playersPayload`.
                    internal struct playersPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/TvFeed/d/case1/playersPayload/color`.
                        @frozen internal enum colorPayload: String, Codable, Hashable, Sendable {
                            case white = "white"
                            case black = "black"
                        }
                        /// - Remark: Generated from `#/components/schemas/TvFeed/d/case1/playersPayload/color`.
                        internal var color: Components.Schemas.TvFeed.dPayload.Case1Payload.playersPayloadPayload.colorPayload
                        /// - Remark: Generated from `#/components/schemas/TvFeed/d/case1/playersPayload/user`.
                        internal var user: Components.Schemas.LightUser
                        /// - Remark: Generated from `#/components/schemas/TvFeed/d/case1/playersPayload/rating`.
                        internal var rating: Swift.Int
                        /// The player's remaining time in seconds
                        ///
                        /// - Remark: Generated from `#/components/schemas/TvFeed/d/case1/playersPayload/seconds`.
                        internal var seconds: Swift.Int
                        /// Creates a new `playersPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - color:
                        ///   - user:
                        ///   - rating:
                        ///   - seconds: The player's remaining time in seconds
                        internal init(
                            color: Components.Schemas.TvFeed.dPayload.Case1Payload.playersPayloadPayload.colorPayload,
                            user: Components.Schemas.LightUser,
                            rating: Swift.Int,
                            seconds: Swift.Int
                        ) {
                            self.color = color
                            self.user = user
                            self.rating = rating
                            self.seconds = seconds
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case color
                            case user
                            case rating
                            case seconds
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/TvFeed/d/case1/players`.
                    internal typealias playersPayload = [Components.Schemas.TvFeed.dPayload.Case1Payload.playersPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/TvFeed/d/case1/players`.
                    internal var players: Components.Schemas.TvFeed.dPayload.Case1Payload.playersPayload
                    /// The FEN of the current position
                    ///
                    /// - Remark: Generated from `#/components/schemas/TvFeed/d/case1/fen`.
                    internal var fen: Swift.String
                    /// Creates a new `Case1Payload`.
                    ///
                    /// - Parameters:
                    ///   - id: The game ID
                    ///   - orientation:
                    ///   - players:
                    ///   - fen: The FEN of the current position
                    internal init(
                        id: Swift.String,
                        orientation: Components.Schemas.TvFeed.dPayload.Case1Payload.orientationPayload,
                        players: Components.Schemas.TvFeed.dPayload.Case1Payload.playersPayload,
                        fen: Swift.String
                    ) {
                        self.id = id
                        self.orientation = orientation
                        self.players = players
                        self.fen = fen
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case id
                        case orientation
                        case players
                        case fen
                    }
                }
                /// - Remark: Generated from `#/components/schemas/TvFeed/d/case1`.
                case case1(Components.Schemas.TvFeed.dPayload.Case1Payload)
                /// - Remark: Generated from `#/components/schemas/TvFeed/d/case2`.
                internal struct Case2Payload: Codable, Hashable, Sendable {
                    /// The FEN of the current position
                    ///
                    /// - Remark: Generated from `#/components/schemas/TvFeed/d/case2/fen`.
                    internal var fen: Swift.String
                    /// The last move in UCI format
                    ///
                    /// - Remark: Generated from `#/components/schemas/TvFeed/d/case2/lm`.
                    internal var lm: Swift.String
                    /// White's clock in seconds
                    ///
                    /// - Remark: Generated from `#/components/schemas/TvFeed/d/case2/wc`.
                    internal var wc: Swift.Int
                    /// Black's clock in seconds
                    ///
                    /// - Remark: Generated from `#/components/schemas/TvFeed/d/case2/bc`.
                    internal var bc: Swift.Int
                    /// Creates a new `Case2Payload`.
                    ///
                    /// - Parameters:
                    ///   - fen: The FEN of the current position
                    ///   - lm: The last move in UCI format
                    ///   - wc: White's clock in seconds
                    ///   - bc: Black's clock in seconds
                    internal init(
                        fen: Swift.String,
                        lm: Swift.String,
                        wc: Swift.Int,
                        bc: Swift.Int
                    ) {
                        self.fen = fen
                        self.lm = lm
                        self.wc = wc
                        self.bc = bc
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case fen
                        case lm
                        case wc
                        case bc
                    }
                }
                /// - Remark: Generated from `#/components/schemas/TvFeed/d/case2`.
                case case2(Components.Schemas.TvFeed.dPayload.Case2Payload)
                internal init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                internal func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try value.encode(to: encoder)
                    case let .case2(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// The data of the message
            ///
            /// - Remark: Generated from `#/components/schemas/TvFeed/d`.
            internal var d: Components.Schemas.TvFeed.dPayload
            /// Creates a new `TvFeed`.
            ///
            /// - Parameters:
            ///   - t: The type of message.
            ///   - d: The data of the message
            internal init(
                t: Components.Schemas.TvFeed.tPayload,
                d: Components.Schemas.TvFeed.dPayload
            ) {
                self.t = t
                self.d = d
            }
            internal enum CodingKeys: String, CodingKey {
                case t
                case d
            }
        }
        /// - Remark: Generated from `#/components/schemas/Clock`.
        internal struct Clock: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Clock/limit`.
            internal var limit: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Clock/increment`.
            internal var increment: Swift.Int
            /// Creates a new `Clock`.
            ///
            /// - Parameters:
            ///   - limit:
            ///   - increment:
            internal init(
                limit: Swift.Int,
                increment: Swift.Int
            ) {
                self.limit = limit
                self.increment = increment
            }
            internal enum CodingKeys: String, CodingKey {
                case limit
                case increment
            }
        }
        /// 10: created, 20: started, 30: finished
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ArenaStatus`.
        @frozen internal enum ArenaStatus: Int, Codable, Hashable, Sendable {
            case _10 = 10
            case _20 = 20
            case _30 = 30
        }
        /// - Remark: Generated from `#/components/schemas/ArenaPerf`.
        internal struct ArenaPerf: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ArenaPerf/key`.
            internal var key: Components.Schemas.PerfType
            /// - Remark: Generated from `#/components/schemas/ArenaPerf/name`.
            internal var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/ArenaPerf/position`.
            internal var position: Swift.Int
            /// - Remark: Generated from `#/components/schemas/ArenaPerf/icon`.
            internal var icon: Swift.String?
            /// Creates a new `ArenaPerf`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - position:
            ///   - icon:
            internal init(
                key: Components.Schemas.PerfType,
                name: Swift.String,
                position: Swift.Int,
                icon: Swift.String? = nil
            ) {
                self.key = key
                self.name = name
                self.position = position
                self.icon = icon
            }
            internal enum CodingKeys: String, CodingKey {
                case key
                case name
                case position
                case icon
            }
        }
        /// - Remark: Generated from `#/components/schemas/ArenaRatingObj`.
        internal struct ArenaRatingObj: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ArenaRatingObj/perf`.
            internal var perf: Components.Schemas.PerfType?
            /// - Remark: Generated from `#/components/schemas/ArenaRatingObj/rating`.
            internal var rating: Swift.Int
            /// Creates a new `ArenaRatingObj`.
            ///
            /// - Parameters:
            ///   - perf:
            ///   - rating:
            internal init(
                perf: Components.Schemas.PerfType? = nil,
                rating: Swift.Int
            ) {
                self.perf = perf
                self.rating = rating
            }
            internal enum CodingKeys: String, CodingKey {
                case perf
                case rating
            }
        }
        /// - Remark: Generated from `#/components/schemas/ArenaPosition`.
        @frozen internal enum ArenaPosition: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ArenaPosition/case1`.
            internal struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ArenaPosition/case1/eco`.
                internal var eco: Swift.String?
                /// - Remark: Generated from `#/components/schemas/ArenaPosition/case1/name`.
                internal var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/ArenaPosition/case1/fen`.
                internal var fen: Swift.String?
                /// - Remark: Generated from `#/components/schemas/ArenaPosition/case1/url`.
                internal var url: Swift.String?
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - eco:
                ///   - name:
                ///   - fen:
                ///   - url:
                internal init(
                    eco: Swift.String? = nil,
                    name: Swift.String? = nil,
                    fen: Swift.String? = nil,
                    url: Swift.String? = nil
                ) {
                    self.eco = eco
                    self.name = name
                    self.fen = fen
                    self.url = url
                }
                internal enum CodingKeys: String, CodingKey {
                    case eco
                    case name
                    case fen
                    case url
                }
            }
            /// - Remark: Generated from `#/components/schemas/ArenaPosition/case1`.
            case case1(Components.Schemas.ArenaPosition.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/ArenaPosition/case2`.
            internal struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ArenaPosition/case2/name`.
                @frozen internal enum namePayload: String, Codable, Hashable, Sendable {
                    case Custom_space_position = "Custom position"
                }
                /// - Remark: Generated from `#/components/schemas/ArenaPosition/case2/name`.
                internal var name: Components.Schemas.ArenaPosition.Case2Payload.namePayload?
                /// - Remark: Generated from `#/components/schemas/ArenaPosition/case2/fen`.
                internal var fen: Swift.String?
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - name:
                ///   - fen:
                internal init(
                    name: Components.Schemas.ArenaPosition.Case2Payload.namePayload? = nil,
                    fen: Swift.String? = nil
                ) {
                    self.name = name
                    self.fen = fen
                }
                internal enum CodingKeys: String, CodingKey {
                    case name
                    case fen
                }
            }
            /// - Remark: Generated from `#/components/schemas/ArenaPosition/case2`.
            case case2(Components.Schemas.ArenaPosition.Case2Payload)
            internal init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            internal func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/ArenaTournament`.
        internal struct ArenaTournament: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ArenaTournament/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/ArenaTournament/createdBy`.
            internal var createdBy: Swift.String
            /// - Remark: Generated from `#/components/schemas/ArenaTournament/system`.
            @frozen internal enum systemPayload: String, Codable, Hashable, Sendable {
                case arena = "arena"
            }
            /// - Remark: Generated from `#/components/schemas/ArenaTournament/system`.
            internal var system: Components.Schemas.ArenaTournament.systemPayload
            /// - Remark: Generated from `#/components/schemas/ArenaTournament/minutes`.
            internal var minutes: Swift.Int
            /// - Remark: Generated from `#/components/schemas/ArenaTournament/clock`.
            internal var clock: Components.Schemas.Clock
            /// - Remark: Generated from `#/components/schemas/ArenaTournament/rated`.
            internal var rated: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ArenaTournament/fullName`.
            internal var fullName: Swift.String
            /// - Remark: Generated from `#/components/schemas/ArenaTournament/nbPlayers`.
            internal var nbPlayers: Swift.Int
            /// - Remark: Generated from `#/components/schemas/ArenaTournament/variant`.
            internal var variant: Components.Schemas.Variant
            /// - Remark: Generated from `#/components/schemas/ArenaTournament/startsAt`.
            internal var startsAt: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/ArenaTournament/finishesAt`.
            internal var finishesAt: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/ArenaTournament/status`.
            internal var status: Components.Schemas.ArenaStatus
            /// - Remark: Generated from `#/components/schemas/ArenaTournament/perf`.
            internal var perf: Components.Schemas.ArenaPerf
            /// - Remark: Generated from `#/components/schemas/ArenaTournament/secondsToStart`.
            internal var secondsToStart: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ArenaTournament/hasMaxRating`.
            internal var hasMaxRating: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ArenaTournament/maxRating`.
            internal var maxRating: Components.Schemas.ArenaRatingObj?
            /// - Remark: Generated from `#/components/schemas/ArenaTournament/minRating`.
            internal var minRating: Components.Schemas.ArenaRatingObj?
            /// - Remark: Generated from `#/components/schemas/ArenaTournament/minRatedGames`.
            internal struct minRatedGamesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ArenaTournament/minRatedGames/nb`.
                internal var nb: Swift.Int?
                /// Creates a new `minRatedGamesPayload`.
                ///
                /// - Parameters:
                ///   - nb:
                internal init(nb: Swift.Int? = nil) {
                    self.nb = nb
                }
                internal enum CodingKeys: String, CodingKey {
                    case nb
                }
            }
            /// - Remark: Generated from `#/components/schemas/ArenaTournament/minRatedGames`.
            internal var minRatedGames: Components.Schemas.ArenaTournament.minRatedGamesPayload?
            /// - Remark: Generated from `#/components/schemas/ArenaTournament/botsAllowed`.
            internal var botsAllowed: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ArenaTournament/minAccountAgeInDays`.
            internal var minAccountAgeInDays: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ArenaTournament/onlyTitled`.
            internal var onlyTitled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ArenaTournament/teamMember`.
            internal var teamMember: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ArenaTournament/private`.
            internal var _private: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ArenaTournament/position`.
            internal var position: Components.Schemas.ArenaPosition?
            /// - Remark: Generated from `#/components/schemas/ArenaTournament/schedule`.
            internal struct schedulePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ArenaTournament/schedule/freq`.
                internal var freq: Swift.String?
                /// - Remark: Generated from `#/components/schemas/ArenaTournament/schedule/speed`.
                internal var speed: Swift.String?
                /// Creates a new `schedulePayload`.
                ///
                /// - Parameters:
                ///   - freq:
                ///   - speed:
                internal init(
                    freq: Swift.String? = nil,
                    speed: Swift.String? = nil
                ) {
                    self.freq = freq
                    self.speed = speed
                }
                internal enum CodingKeys: String, CodingKey {
                    case freq
                    case speed
                }
            }
            /// - Remark: Generated from `#/components/schemas/ArenaTournament/schedule`.
            internal var schedule: Components.Schemas.ArenaTournament.schedulePayload?
            /// - Remark: Generated from `#/components/schemas/ArenaTournament/teamBattle`.
            internal struct teamBattlePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ArenaTournament/teamBattle/teams`.
                internal var teams: [Swift.String]?
                /// - Remark: Generated from `#/components/schemas/ArenaTournament/teamBattle/nbLeaders`.
                internal var nbLeaders: Swift.Int?
                /// Creates a new `teamBattlePayload`.
                ///
                /// - Parameters:
                ///   - teams:
                ///   - nbLeaders:
                internal init(
                    teams: [Swift.String]? = nil,
                    nbLeaders: Swift.Int? = nil
                ) {
                    self.teams = teams
                    self.nbLeaders = nbLeaders
                }
                internal enum CodingKeys: String, CodingKey {
                    case teams
                    case nbLeaders
                }
            }
            /// - Remark: Generated from `#/components/schemas/ArenaTournament/teamBattle`.
            internal var teamBattle: Components.Schemas.ArenaTournament.teamBattlePayload?
            /// - Remark: Generated from `#/components/schemas/ArenaTournament/winner`.
            internal var winner: Components.Schemas.LightUser?
            /// Creates a new `ArenaTournament`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - createdBy:
            ///   - system:
            ///   - minutes:
            ///   - clock:
            ///   - rated:
            ///   - fullName:
            ///   - nbPlayers:
            ///   - variant:
            ///   - startsAt:
            ///   - finishesAt:
            ///   - status:
            ///   - perf:
            ///   - secondsToStart:
            ///   - hasMaxRating:
            ///   - maxRating:
            ///   - minRating:
            ///   - minRatedGames:
            ///   - botsAllowed:
            ///   - minAccountAgeInDays:
            ///   - onlyTitled:
            ///   - teamMember:
            ///   - _private:
            ///   - position:
            ///   - schedule:
            ///   - teamBattle:
            ///   - winner:
            internal init(
                id: Swift.String,
                createdBy: Swift.String,
                system: Components.Schemas.ArenaTournament.systemPayload,
                minutes: Swift.Int,
                clock: Components.Schemas.Clock,
                rated: Swift.Bool,
                fullName: Swift.String,
                nbPlayers: Swift.Int,
                variant: Components.Schemas.Variant,
                startsAt: Swift.Int64,
                finishesAt: Swift.Int64,
                status: Components.Schemas.ArenaStatus,
                perf: Components.Schemas.ArenaPerf,
                secondsToStart: Swift.Int? = nil,
                hasMaxRating: Swift.Bool? = nil,
                maxRating: Components.Schemas.ArenaRatingObj? = nil,
                minRating: Components.Schemas.ArenaRatingObj? = nil,
                minRatedGames: Components.Schemas.ArenaTournament.minRatedGamesPayload? = nil,
                botsAllowed: Swift.Bool? = nil,
                minAccountAgeInDays: Swift.Int? = nil,
                onlyTitled: Swift.Bool? = nil,
                teamMember: Swift.String? = nil,
                _private: Swift.Bool? = nil,
                position: Components.Schemas.ArenaPosition? = nil,
                schedule: Components.Schemas.ArenaTournament.schedulePayload? = nil,
                teamBattle: Components.Schemas.ArenaTournament.teamBattlePayload? = nil,
                winner: Components.Schemas.LightUser? = nil
            ) {
                self.id = id
                self.createdBy = createdBy
                self.system = system
                self.minutes = minutes
                self.clock = clock
                self.rated = rated
                self.fullName = fullName
                self.nbPlayers = nbPlayers
                self.variant = variant
                self.startsAt = startsAt
                self.finishesAt = finishesAt
                self.status = status
                self.perf = perf
                self.secondsToStart = secondsToStart
                self.hasMaxRating = hasMaxRating
                self.maxRating = maxRating
                self.minRating = minRating
                self.minRatedGames = minRatedGames
                self.botsAllowed = botsAllowed
                self.minAccountAgeInDays = minAccountAgeInDays
                self.onlyTitled = onlyTitled
                self.teamMember = teamMember
                self._private = _private
                self.position = position
                self.schedule = schedule
                self.teamBattle = teamBattle
                self.winner = winner
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case createdBy
                case system
                case minutes
                case clock
                case rated
                case fullName
                case nbPlayers
                case variant
                case startsAt
                case finishesAt
                case status
                case perf
                case secondsToStart
                case hasMaxRating
                case maxRating
                case minRating
                case minRatedGames
                case botsAllowed
                case minAccountAgeInDays
                case onlyTitled
                case teamMember
                case _private = "private"
                case position
                case schedule
                case teamBattle
                case winner
            }
        }
        /// - Remark: Generated from `#/components/schemas/ArenaTournaments`.
        internal struct ArenaTournaments: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ArenaTournaments/created`.
            internal var created: [Components.Schemas.ArenaTournament]?
            /// - Remark: Generated from `#/components/schemas/ArenaTournaments/started`.
            internal var started: [Components.Schemas.ArenaTournament]?
            /// - Remark: Generated from `#/components/schemas/ArenaTournaments/finished`.
            internal var finished: [Components.Schemas.ArenaTournament]?
            /// Creates a new `ArenaTournaments`.
            ///
            /// - Parameters:
            ///   - created:
            ///   - started:
            ///   - finished:
            internal init(
                created: [Components.Schemas.ArenaTournament]? = nil,
                started: [Components.Schemas.ArenaTournament]? = nil,
                finished: [Components.Schemas.ArenaTournament]? = nil
            ) {
                self.created = created
                self.started = started
                self.finished = finished
            }
            internal enum CodingKeys: String, CodingKey {
                case created
                case started
                case finished
            }
        }
        /// Custom initial position (in FEN). Variant must be standard, fromPosition, or chess960 (if a valid 960 starting position), and the game cannot be rated.
        ///
        /// - Remark: Generated from `#/components/schemas/FromPositionFEN`.
        internal typealias FromPositionFEN = Swift.String
        /// - Remark: Generated from `#/components/schemas/Verdict`.
        internal struct Verdict: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Verdict/condition`.
            internal var condition: Swift.String
            /// - Remark: Generated from `#/components/schemas/Verdict/verdict`.
            internal var verdict: Swift.String
            /// Creates a new `Verdict`.
            ///
            /// - Parameters:
            ///   - condition:
            ///   - verdict:
            internal init(
                condition: Swift.String,
                verdict: Swift.String
            ) {
                self.condition = condition
                self.verdict = verdict
            }
            internal enum CodingKeys: String, CodingKey {
                case condition
                case verdict
            }
        }
        /// - Remark: Generated from `#/components/schemas/Verdicts`.
        internal struct Verdicts: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Verdicts/accepted`.
            internal var accepted: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/Verdicts/list`.
            internal var list: [Components.Schemas.Verdict]
            /// Creates a new `Verdicts`.
            ///
            /// - Parameters:
            ///   - accepted:
            ///   - list:
            internal init(
                accepted: Swift.Bool,
                list: [Components.Schemas.Verdict]
            ) {
                self.accepted = accepted
                self.list = list
            }
            internal enum CodingKeys: String, CodingKey {
                case accepted
                case list
            }
        }
        /// - Remark: Generated from `#/components/schemas/ArenaSheet`.
        internal struct ArenaSheet: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ArenaSheet/scores`.
            internal var scores: Swift.String
            /// - Remark: Generated from `#/components/schemas/ArenaSheet/fire`.
            internal var fire: Swift.Bool?
            /// Creates a new `ArenaSheet`.
            ///
            /// - Parameters:
            ///   - scores:
            ///   - fire:
            internal init(
                scores: Swift.String,
                fire: Swift.Bool? = nil
            ) {
                self.scores = scores
                self.fire = fire
            }
            internal enum CodingKeys: String, CodingKey {
                case scores
                case fire
            }
        }
        /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull`.
        internal struct ArenaTournamentFull: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/fullName`.
            internal var fullName: Swift.String
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/rated`.
            internal var rated: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/spotlight`.
            internal struct spotlightPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/spotlight/headline`.
                internal var headline: Swift.String?
                /// Creates a new `spotlightPayload`.
                ///
                /// - Parameters:
                ///   - headline:
                internal init(headline: Swift.String? = nil) {
                    self.headline = headline
                }
                internal enum CodingKeys: String, CodingKey {
                    case headline
                }
            }
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/spotlight`.
            internal var spotlight: Components.Schemas.ArenaTournamentFull.spotlightPayload?
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/berserkable`.
            internal var berserkable: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/onlyTitled`.
            internal var onlyTitled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/clock`.
            internal var clock: Components.Schemas.Clock
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/minutes`.
            internal var minutes: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/createdBy`.
            internal var createdBy: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/system`.
            internal var system: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/secondsToStart`.
            internal var secondsToStart: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/secondsToFinish`.
            internal var secondsToFinish: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/isFinished`.
            internal var isFinished: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/isRecentlyFinished`.
            internal var isRecentlyFinished: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/pairingsClosed`.
            internal var pairingsClosed: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/startsAt`.
            internal var startsAt: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/nbPlayers`.
            internal var nbPlayers: Swift.Double
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/verdicts`.
            internal var verdicts: Components.Schemas.Verdicts?
            /// The quote displayed on the tournament page
            ///
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/quote`.
            internal struct quotePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/quote/text`.
                internal var text: Swift.String?
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/quote/author`.
                internal var author: Swift.String?
                /// Creates a new `quotePayload`.
                ///
                /// - Parameters:
                ///   - text:
                ///   - author:
                internal init(
                    text: Swift.String? = nil,
                    author: Swift.String? = nil
                ) {
                    self.text = text
                    self.author = author
                }
                internal enum CodingKeys: String, CodingKey {
                    case text
                    case author
                }
            }
            /// The quote displayed on the tournament page
            ///
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/quote`.
            internal var quote: Components.Schemas.ArenaTournamentFull.quotePayload?
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/greatPlayer`.
            internal struct greatPlayerPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/greatPlayer/name`.
                internal var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/greatPlayer/url`.
                internal var url: Swift.String?
                /// Creates a new `greatPlayerPayload`.
                ///
                /// - Parameters:
                ///   - name:
                ///   - url:
                internal init(
                    name: Swift.String? = nil,
                    url: Swift.String? = nil
                ) {
                    self.name = name
                    self.url = url
                }
                internal enum CodingKeys: String, CodingKey {
                    case name
                    case url
                }
            }
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/greatPlayer`.
            internal var greatPlayer: Components.Schemas.ArenaTournamentFull.greatPlayerPayload?
            /// List of usernames allowed to join the tournament
            ///
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/allowList`.
            internal var allowList: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/hasMaxRating`.
            internal var hasMaxRating: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/maxRating`.
            internal var maxRating: Components.Schemas.ArenaRatingObj?
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/minRating`.
            internal var minRating: Components.Schemas.ArenaRatingObj?
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/minRatedGames`.
            internal struct minRatedGamesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/minRatedGames/nb`.
                internal var nb: Swift.Int?
                /// Creates a new `minRatedGamesPayload`.
                ///
                /// - Parameters:
                ///   - nb:
                internal init(nb: Swift.Int? = nil) {
                    self.nb = nb
                }
                internal enum CodingKeys: String, CodingKey {
                    case nb
                }
            }
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/minRatedGames`.
            internal var minRatedGames: Components.Schemas.ArenaTournamentFull.minRatedGamesPayload?
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/botsAllowed`.
            internal var botsAllowed: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/minAccountAgeInDays`.
            internal var minAccountAgeInDays: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/perf`.
            internal struct perfPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/perf/icon`.
                internal var icon: Swift.String
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/perf/key`.
                internal var key: Swift.String
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/perf/name`.
                internal var name: Swift.String
                /// Creates a new `perfPayload`.
                ///
                /// - Parameters:
                ///   - icon:
                ///   - key:
                ///   - name:
                internal init(
                    icon: Swift.String,
                    key: Swift.String,
                    name: Swift.String
                ) {
                    self.icon = icon
                    self.key = key
                    self.name = name
                }
                internal enum CodingKeys: String, CodingKey {
                    case icon
                    case key
                    case name
                }
            }
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/perf`.
            internal var perf: Components.Schemas.ArenaTournamentFull.perfPayload?
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/schedule`.
            internal struct schedulePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/schedule/freq`.
                internal var freq: Swift.String
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/schedule/speed`.
                internal var speed: Swift.String
                /// Creates a new `schedulePayload`.
                ///
                /// - Parameters:
                ///   - freq:
                ///   - speed:
                internal init(
                    freq: Swift.String,
                    speed: Swift.String
                ) {
                    self.freq = freq
                    self.speed = speed
                }
                internal enum CodingKeys: String, CodingKey {
                    case freq
                    case speed
                }
            }
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/schedule`.
            internal var schedule: Components.Schemas.ArenaTournamentFull.schedulePayload?
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/description`.
            internal var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/variant`.
            internal var variant: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/duelsPayload`.
            internal struct duelsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/duelsPayload/id`.
                internal var id: Swift.String?
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/duelsPayload/pPayload`.
                internal struct pPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/duelsPayload/pPayload/n`.
                    internal var n: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/duelsPayload/pPayload/r`.
                    internal var r: Swift.Double?
                    /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/duelsPayload/pPayload/k`.
                    internal var k: Swift.Double?
                    /// Creates a new `pPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - n:
                    ///   - r:
                    ///   - k:
                    internal init(
                        n: Swift.String? = nil,
                        r: Swift.Double? = nil,
                        k: Swift.Double? = nil
                    ) {
                        self.n = n
                        self.r = r
                        self.k = k
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case n
                        case r
                        case k
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/duelsPayload/p`.
                internal typealias pPayload = [Components.Schemas.ArenaTournamentFull.duelsPayloadPayload.pPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/duelsPayload/p`.
                internal var p: Components.Schemas.ArenaTournamentFull.duelsPayloadPayload.pPayload?
                /// Creates a new `duelsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - p:
                internal init(
                    id: Swift.String? = nil,
                    p: Components.Schemas.ArenaTournamentFull.duelsPayloadPayload.pPayload? = nil
                ) {
                    self.id = id
                    self.p = p
                }
                internal enum CodingKeys: String, CodingKey {
                    case id
                    case p
                }
            }
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/duels`.
            internal typealias duelsPayload = [Components.Schemas.ArenaTournamentFull.duelsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/duels`.
            internal var duels: Components.Schemas.ArenaTournamentFull.duelsPayload?
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/standing`.
            internal struct standingPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/standing/page`.
                internal var page: Swift.Double?
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/standing/playersPayload`.
                internal struct playersPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/standing/playersPayload/name`.
                    internal var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/standing/playersPayload/title`.
                    internal var title: Components.Schemas.Title?
                    /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/standing/playersPayload/patron`.
                    internal var patron: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/standing/playersPayload/flair`.
                    internal var flair: Components.Schemas.Flair?
                    /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/standing/playersPayload/rank`.
                    internal var rank: Swift.Double?
                    /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/standing/playersPayload/rating`.
                    internal var rating: Swift.Double?
                    /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/standing/playersPayload/score`.
                    internal var score: Swift.Double?
                    /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/standing/playersPayload/sheet`.
                    internal var sheet: Components.Schemas.ArenaSheet?
                    /// Creates a new `playersPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - name:
                    ///   - title:
                    ///   - patron:
                    ///   - flair:
                    ///   - rank:
                    ///   - rating:
                    ///   - score:
                    ///   - sheet:
                    internal init(
                        name: Swift.String? = nil,
                        title: Components.Schemas.Title? = nil,
                        patron: Swift.Bool? = nil,
                        flair: Components.Schemas.Flair? = nil,
                        rank: Swift.Double? = nil,
                        rating: Swift.Double? = nil,
                        score: Swift.Double? = nil,
                        sheet: Components.Schemas.ArenaSheet? = nil
                    ) {
                        self.name = name
                        self.title = title
                        self.patron = patron
                        self.flair = flair
                        self.rank = rank
                        self.rating = rating
                        self.score = score
                        self.sheet = sheet
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case name
                        case title
                        case patron
                        case flair
                        case rank
                        case rating
                        case score
                        case sheet
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/standing/players`.
                internal typealias playersPayload = [Components.Schemas.ArenaTournamentFull.standingPayload.playersPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/standing/players`.
                internal var players: Components.Schemas.ArenaTournamentFull.standingPayload.playersPayload?
                /// Creates a new `standingPayload`.
                ///
                /// - Parameters:
                ///   - page:
                ///   - players:
                internal init(
                    page: Swift.Double? = nil,
                    players: Components.Schemas.ArenaTournamentFull.standingPayload.playersPayload? = nil
                ) {
                    self.page = page
                    self.players = players
                }
                internal enum CodingKeys: String, CodingKey {
                    case page
                    case players
                }
            }
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/standing`.
            internal var standing: Components.Schemas.ArenaTournamentFull.standingPayload?
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/featured`.
            internal struct featuredPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/featured/id`.
                internal var id: Swift.String?
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/featured/fen`.
                internal var fen: Swift.String?
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/featured/orientation`.
                internal var orientation: Swift.String?
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/featured/color`.
                internal var color: Swift.String?
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/featured/lastMove`.
                internal var lastMove: Swift.String?
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/featured/white`.
                internal struct whitePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/featured/white/name`.
                    internal var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/featured/white/id`.
                    internal var id: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/featured/white/rank`.
                    internal var rank: Swift.Double?
                    /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/featured/white/rating`.
                    internal var rating: Swift.Double?
                    /// Creates a new `whitePayload`.
                    ///
                    /// - Parameters:
                    ///   - name:
                    ///   - id:
                    ///   - rank:
                    ///   - rating:
                    internal init(
                        name: Swift.String? = nil,
                        id: Swift.String? = nil,
                        rank: Swift.Double? = nil,
                        rating: Swift.Double? = nil
                    ) {
                        self.name = name
                        self.id = id
                        self.rank = rank
                        self.rating = rating
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case name
                        case id
                        case rank
                        case rating
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/featured/white`.
                internal var white: Components.Schemas.ArenaTournamentFull.featuredPayload.whitePayload?
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/featured/black`.
                internal struct blackPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/featured/black/name`.
                    internal var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/featured/black/id`.
                    internal var id: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/featured/black/rank`.
                    internal var rank: Swift.Double?
                    /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/featured/black/rating`.
                    internal var rating: Swift.Double?
                    /// Creates a new `blackPayload`.
                    ///
                    /// - Parameters:
                    ///   - name:
                    ///   - id:
                    ///   - rank:
                    ///   - rating:
                    internal init(
                        name: Swift.String? = nil,
                        id: Swift.String? = nil,
                        rank: Swift.Double? = nil,
                        rating: Swift.Double? = nil
                    ) {
                        self.name = name
                        self.id = id
                        self.rank = rank
                        self.rating = rating
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case name
                        case id
                        case rank
                        case rating
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/featured/black`.
                internal var black: Components.Schemas.ArenaTournamentFull.featuredPayload.blackPayload?
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/featured/c`.
                internal struct cPayload: Codable, Hashable, Sendable {
                    /// white's clock in seconds
                    ///
                    /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/featured/c/white`.
                    internal var white: Swift.Double?
                    /// black's clock in seconds
                    ///
                    /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/featured/c/black`.
                    internal var black: Swift.Double?
                    /// Creates a new `cPayload`.
                    ///
                    /// - Parameters:
                    ///   - white: white's clock in seconds
                    ///   - black: black's clock in seconds
                    internal init(
                        white: Swift.Double? = nil,
                        black: Swift.Double? = nil
                    ) {
                        self.white = white
                        self.black = black
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case white
                        case black
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/featured/c`.
                internal var c: Components.Schemas.ArenaTournamentFull.featuredPayload.cPayload?
                /// Creates a new `featuredPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - fen:
                ///   - orientation:
                ///   - color:
                ///   - lastMove:
                ///   - white:
                ///   - black:
                ///   - c:
                internal init(
                    id: Swift.String? = nil,
                    fen: Swift.String? = nil,
                    orientation: Swift.String? = nil,
                    color: Swift.String? = nil,
                    lastMove: Swift.String? = nil,
                    white: Components.Schemas.ArenaTournamentFull.featuredPayload.whitePayload? = nil,
                    black: Components.Schemas.ArenaTournamentFull.featuredPayload.blackPayload? = nil,
                    c: Components.Schemas.ArenaTournamentFull.featuredPayload.cPayload? = nil
                ) {
                    self.id = id
                    self.fen = fen
                    self.orientation = orientation
                    self.color = color
                    self.lastMove = lastMove
                    self.white = white
                    self.black = black
                    self.c = c
                }
                internal enum CodingKeys: String, CodingKey {
                    case id
                    case fen
                    case orientation
                    case color
                    case lastMove
                    case white
                    case black
                    case c
                }
            }
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/featured`.
            internal var featured: Components.Schemas.ArenaTournamentFull.featuredPayload?
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/podiumPayload`.
            internal struct podiumPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/podiumPayload/name`.
                internal var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/podiumPayload/title`.
                internal var title: Components.Schemas.Title?
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/podiumPayload/patron`.
                internal var patron: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/podiumPayload/flair`.
                internal var flair: Components.Schemas.Flair?
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/podiumPayload/rank`.
                internal var rank: Swift.Double?
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/podiumPayload/rating`.
                internal var rating: Swift.Double?
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/podiumPayload/score`.
                internal var score: Swift.Double?
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/podiumPayload/nb`.
                internal struct nbPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/podiumPayload/nb/game`.
                    internal var game: Swift.Double?
                    /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/podiumPayload/nb/berserk`.
                    internal var berserk: Swift.Double?
                    /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/podiumPayload/nb/win`.
                    internal var win: Swift.Double?
                    /// Creates a new `nbPayload`.
                    ///
                    /// - Parameters:
                    ///   - game:
                    ///   - berserk:
                    ///   - win:
                    internal init(
                        game: Swift.Double? = nil,
                        berserk: Swift.Double? = nil,
                        win: Swift.Double? = nil
                    ) {
                        self.game = game
                        self.berserk = berserk
                        self.win = win
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case game
                        case berserk
                        case win
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/podiumPayload/nb`.
                internal var nb: Components.Schemas.ArenaTournamentFull.podiumPayloadPayload.nbPayload?
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/podiumPayload/performance`.
                internal var performance: Swift.Double?
                /// Creates a new `podiumPayloadPayload`.
                ///
                /// - Parameters:
                ///   - name:
                ///   - title:
                ///   - patron:
                ///   - flair:
                ///   - rank:
                ///   - rating:
                ///   - score:
                ///   - nb:
                ///   - performance:
                internal init(
                    name: Swift.String? = nil,
                    title: Components.Schemas.Title? = nil,
                    patron: Swift.Bool? = nil,
                    flair: Components.Schemas.Flair? = nil,
                    rank: Swift.Double? = nil,
                    rating: Swift.Double? = nil,
                    score: Swift.Double? = nil,
                    nb: Components.Schemas.ArenaTournamentFull.podiumPayloadPayload.nbPayload? = nil,
                    performance: Swift.Double? = nil
                ) {
                    self.name = name
                    self.title = title
                    self.patron = patron
                    self.flair = flair
                    self.rank = rank
                    self.rating = rating
                    self.score = score
                    self.nb = nb
                    self.performance = performance
                }
                internal enum CodingKeys: String, CodingKey {
                    case name
                    case title
                    case patron
                    case flair
                    case rank
                    case rating
                    case score
                    case nb
                    case performance
                }
            }
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/podium`.
            internal typealias podiumPayload = [Components.Schemas.ArenaTournamentFull.podiumPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/podium`.
            internal var podium: Components.Schemas.ArenaTournamentFull.podiumPayload?
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/stats`.
            internal struct statsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/stats/games`.
                internal var games: Swift.Double
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/stats/moves`.
                internal var moves: Swift.Double
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/stats/whiteWins`.
                internal var whiteWins: Swift.Double
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/stats/blackWins`.
                internal var blackWins: Swift.Double
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/stats/draws`.
                internal var draws: Swift.Double
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/stats/berserks`.
                internal var berserks: Swift.Double
                /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/stats/averageRating`.
                internal var averageRating: Swift.Double
                /// Creates a new `statsPayload`.
                ///
                /// - Parameters:
                ///   - games:
                ///   - moves:
                ///   - whiteWins:
                ///   - blackWins:
                ///   - draws:
                ///   - berserks:
                ///   - averageRating:
                internal init(
                    games: Swift.Double,
                    moves: Swift.Double,
                    whiteWins: Swift.Double,
                    blackWins: Swift.Double,
                    draws: Swift.Double,
                    berserks: Swift.Double,
                    averageRating: Swift.Double
                ) {
                    self.games = games
                    self.moves = moves
                    self.whiteWins = whiteWins
                    self.blackWins = blackWins
                    self.draws = draws
                    self.berserks = berserks
                    self.averageRating = averageRating
                }
                internal enum CodingKeys: String, CodingKey {
                    case games
                    case moves
                    case whiteWins
                    case blackWins
                    case draws
                    case berserks
                    case averageRating
                }
            }
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/stats`.
            internal var stats: Components.Schemas.ArenaTournamentFull.statsPayload?
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentFull/myUsername`.
            internal var myUsername: Swift.String?
            /// Creates a new `ArenaTournamentFull`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - fullName:
            ///   - rated:
            ///   - spotlight:
            ///   - berserkable:
            ///   - onlyTitled:
            ///   - clock:
            ///   - minutes:
            ///   - createdBy:
            ///   - system:
            ///   - secondsToStart:
            ///   - secondsToFinish:
            ///   - isFinished:
            ///   - isRecentlyFinished:
            ///   - pairingsClosed:
            ///   - startsAt:
            ///   - nbPlayers:
            ///   - verdicts:
            ///   - quote: The quote displayed on the tournament page
            ///   - greatPlayer:
            ///   - allowList: List of usernames allowed to join the tournament
            ///   - hasMaxRating:
            ///   - maxRating:
            ///   - minRating:
            ///   - minRatedGames:
            ///   - botsAllowed:
            ///   - minAccountAgeInDays:
            ///   - perf:
            ///   - schedule:
            ///   - description:
            ///   - variant:
            ///   - duels:
            ///   - standing:
            ///   - featured:
            ///   - podium:
            ///   - stats:
            ///   - myUsername:
            internal init(
                id: Swift.String,
                fullName: Swift.String,
                rated: Swift.Bool? = nil,
                spotlight: Components.Schemas.ArenaTournamentFull.spotlightPayload? = nil,
                berserkable: Swift.Bool? = nil,
                onlyTitled: Swift.Bool? = nil,
                clock: Components.Schemas.Clock,
                minutes: Swift.Double? = nil,
                createdBy: Swift.String? = nil,
                system: Swift.String? = nil,
                secondsToStart: Swift.Double? = nil,
                secondsToFinish: Swift.Double? = nil,
                isFinished: Swift.Bool? = nil,
                isRecentlyFinished: Swift.Bool? = nil,
                pairingsClosed: Swift.Bool? = nil,
                startsAt: Swift.String? = nil,
                nbPlayers: Swift.Double,
                verdicts: Components.Schemas.Verdicts? = nil,
                quote: Components.Schemas.ArenaTournamentFull.quotePayload? = nil,
                greatPlayer: Components.Schemas.ArenaTournamentFull.greatPlayerPayload? = nil,
                allowList: [Swift.String]? = nil,
                hasMaxRating: Swift.Bool? = nil,
                maxRating: Components.Schemas.ArenaRatingObj? = nil,
                minRating: Components.Schemas.ArenaRatingObj? = nil,
                minRatedGames: Components.Schemas.ArenaTournamentFull.minRatedGamesPayload? = nil,
                botsAllowed: Swift.Bool? = nil,
                minAccountAgeInDays: Swift.Int? = nil,
                perf: Components.Schemas.ArenaTournamentFull.perfPayload? = nil,
                schedule: Components.Schemas.ArenaTournamentFull.schedulePayload? = nil,
                description: Swift.String? = nil,
                variant: Swift.String? = nil,
                duels: Components.Schemas.ArenaTournamentFull.duelsPayload? = nil,
                standing: Components.Schemas.ArenaTournamentFull.standingPayload? = nil,
                featured: Components.Schemas.ArenaTournamentFull.featuredPayload? = nil,
                podium: Components.Schemas.ArenaTournamentFull.podiumPayload? = nil,
                stats: Components.Schemas.ArenaTournamentFull.statsPayload? = nil,
                myUsername: Swift.String? = nil
            ) {
                self.id = id
                self.fullName = fullName
                self.rated = rated
                self.spotlight = spotlight
                self.berserkable = berserkable
                self.onlyTitled = onlyTitled
                self.clock = clock
                self.minutes = minutes
                self.createdBy = createdBy
                self.system = system
                self.secondsToStart = secondsToStart
                self.secondsToFinish = secondsToFinish
                self.isFinished = isFinished
                self.isRecentlyFinished = isRecentlyFinished
                self.pairingsClosed = pairingsClosed
                self.startsAt = startsAt
                self.nbPlayers = nbPlayers
                self.verdicts = verdicts
                self.quote = quote
                self.greatPlayer = greatPlayer
                self.allowList = allowList
                self.hasMaxRating = hasMaxRating
                self.maxRating = maxRating
                self.minRating = minRating
                self.minRatedGames = minRatedGames
                self.botsAllowed = botsAllowed
                self.minAccountAgeInDays = minAccountAgeInDays
                self.perf = perf
                self.schedule = schedule
                self.description = description
                self.variant = variant
                self.duels = duels
                self.standing = standing
                self.featured = featured
                self.podium = podium
                self.stats = stats
                self.myUsername = myUsername
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case fullName
                case rated
                case spotlight
                case berserkable
                case onlyTitled
                case clock
                case minutes
                case createdBy
                case system
                case secondsToStart
                case secondsToFinish
                case isFinished
                case isRecentlyFinished
                case pairingsClosed
                case startsAt
                case nbPlayers
                case verdicts
                case quote
                case greatPlayer
                case allowList
                case hasMaxRating
                case maxRating
                case minRating
                case minRatedGames
                case botsAllowed
                case minAccountAgeInDays
                case perf
                case schedule
                case description
                case variant
                case duels
                case standing
                case featured
                case podium
                case stats
                case myUsername
            }
        }
        /// - Remark: Generated from `#/components/schemas/Error`.
        internal struct _Error: Codable, Hashable, Sendable {
            /// The cause of the error.
            ///
            /// - Remark: Generated from `#/components/schemas/Error/error`.
            internal var error: Swift.String?
            /// Creates a new `_Error`.
            ///
            /// - Parameters:
            ///   - error: The cause of the error.
            internal init(error: Swift.String? = nil) {
                self.error = error
            }
            internal enum CodingKeys: String, CodingKey {
                case error
            }
        }
        /// - Remark: Generated from `#/components/schemas/ArenaTournamentPlayer`.
        internal struct ArenaTournamentPlayer: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentPlayer/games`.
            internal var games: Swift.Int
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentPlayer/score`.
            internal var score: Swift.Int
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentPlayer/rank`.
            internal var rank: Swift.Int
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentPlayer/performance`.
            internal var performance: Swift.Int?
            /// Creates a new `ArenaTournamentPlayer`.
            ///
            /// - Parameters:
            ///   - games:
            ///   - score:
            ///   - rank:
            ///   - performance:
            internal init(
                games: Swift.Int,
                score: Swift.Int,
                rank: Swift.Int,
                performance: Swift.Int? = nil
            ) {
                self.games = games
                self.score = score
                self.rank = rank
                self.performance = performance
            }
            internal enum CodingKeys: String, CodingKey {
                case games
                case score
                case rank
                case performance
            }
        }
        /// - Remark: Generated from `#/components/schemas/ArenaTournamentPlayed`.
        internal struct ArenaTournamentPlayed: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentPlayed/tournament`.
            internal var tournament: Components.Schemas.ArenaTournament?
            /// - Remark: Generated from `#/components/schemas/ArenaTournamentPlayed/player`.
            internal var player: Components.Schemas.ArenaTournamentPlayer?
            /// Creates a new `ArenaTournamentPlayed`.
            ///
            /// - Parameters:
            ///   - tournament:
            ///   - player:
            internal init(
                tournament: Components.Schemas.ArenaTournament? = nil,
                player: Components.Schemas.ArenaTournamentPlayer? = nil
            ) {
                self.tournament = tournament
                self.player = player
            }
            internal enum CodingKeys: String, CodingKey {
                case tournament
                case player
            }
        }
        /// Custom initial position (in FEN). Variant must be standard and the game cannot be rated.
        ///
        /// - Remark: Generated from `#/components/schemas/SwissFromPositionFEN`.
        internal typealias SwissFromPositionFEN = Swift.String
        /// The current state of the swiss tournament
        ///
        /// - Remark: Generated from `#/components/schemas/SwissStatus`.
        @frozen internal enum SwissStatus: String, Codable, Hashable, Sendable {
            case created = "created"
            case started = "started"
            case finished = "finished"
        }
        /// - Remark: Generated from `#/components/schemas/SwissTournament`.
        internal struct SwissTournament: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SwissTournament/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/SwissTournament/createdBy`.
            internal var createdBy: Swift.String
            /// - Remark: Generated from `#/components/schemas/SwissTournament/startsAt`.
            internal var startsAt: Swift.String
            /// - Remark: Generated from `#/components/schemas/SwissTournament/name`.
            internal var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/SwissTournament/clock`.
            internal struct clockPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/SwissTournament/clock/limit`.
                internal var limit: Swift.Double
                /// - Remark: Generated from `#/components/schemas/SwissTournament/clock/increment`.
                internal var increment: Swift.Double
                /// Creates a new `clockPayload`.
                ///
                /// - Parameters:
                ///   - limit:
                ///   - increment:
                internal init(
                    limit: Swift.Double,
                    increment: Swift.Double
                ) {
                    self.limit = limit
                    self.increment = increment
                }
                internal enum CodingKeys: String, CodingKey {
                    case limit
                    case increment
                }
            }
            /// - Remark: Generated from `#/components/schemas/SwissTournament/clock`.
            internal var clock: Components.Schemas.SwissTournament.clockPayload
            /// - Remark: Generated from `#/components/schemas/SwissTournament/variant`.
            internal var variant: Swift.String
            /// - Remark: Generated from `#/components/schemas/SwissTournament/round`.
            internal var round: Swift.Double
            /// - Remark: Generated from `#/components/schemas/SwissTournament/nbRounds`.
            internal var nbRounds: Swift.Double
            /// - Remark: Generated from `#/components/schemas/SwissTournament/nbPlayers`.
            internal var nbPlayers: Swift.Double
            /// - Remark: Generated from `#/components/schemas/SwissTournament/nbOngoing`.
            internal var nbOngoing: Swift.Double
            /// - Remark: Generated from `#/components/schemas/SwissTournament/status`.
            internal var status: Components.Schemas.SwissStatus
            /// - Remark: Generated from `#/components/schemas/SwissTournament/stats`.
            internal struct statsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/SwissTournament/stats/games`.
                internal var games: Swift.Double
                /// - Remark: Generated from `#/components/schemas/SwissTournament/stats/whiteWins`.
                internal var whiteWins: Swift.Double
                /// - Remark: Generated from `#/components/schemas/SwissTournament/stats/blackWins`.
                internal var blackWins: Swift.Double
                /// - Remark: Generated from `#/components/schemas/SwissTournament/stats/draws`.
                internal var draws: Swift.Double
                /// - Remark: Generated from `#/components/schemas/SwissTournament/stats/byes`.
                internal var byes: Swift.Double
                /// - Remark: Generated from `#/components/schemas/SwissTournament/stats/absences`.
                internal var absences: Swift.Double
                /// - Remark: Generated from `#/components/schemas/SwissTournament/stats/averageRating`.
                internal var averageRating: Swift.Double
                /// Creates a new `statsPayload`.
                ///
                /// - Parameters:
                ///   - games:
                ///   - whiteWins:
                ///   - blackWins:
                ///   - draws:
                ///   - byes:
                ///   - absences:
                ///   - averageRating:
                internal init(
                    games: Swift.Double,
                    whiteWins: Swift.Double,
                    blackWins: Swift.Double,
                    draws: Swift.Double,
                    byes: Swift.Double,
                    absences: Swift.Double,
                    averageRating: Swift.Double
                ) {
                    self.games = games
                    self.whiteWins = whiteWins
                    self.blackWins = blackWins
                    self.draws = draws
                    self.byes = byes
                    self.absences = absences
                    self.averageRating = averageRating
                }
                internal enum CodingKeys: String, CodingKey {
                    case games
                    case whiteWins
                    case blackWins
                    case draws
                    case byes
                    case absences
                    case averageRating
                }
            }
            /// - Remark: Generated from `#/components/schemas/SwissTournament/stats`.
            internal var stats: Components.Schemas.SwissTournament.statsPayload?
            /// - Remark: Generated from `#/components/schemas/SwissTournament/rated`.
            internal var rated: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/SwissTournament/verdicts`.
            internal var verdicts: Components.Schemas.Verdicts
            /// - Remark: Generated from `#/components/schemas/SwissTournament/nextRound`.
            internal struct nextRoundPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/SwissTournament/nextRound/at`.
                internal var at: Foundation.Date?
                /// The number of seconds until the next round starts.
                ///
                /// - Remark: Generated from `#/components/schemas/SwissTournament/nextRound/in`.
                internal var _in: Swift.Int?
                /// Creates a new `nextRoundPayload`.
                ///
                /// - Parameters:
                ///   - at:
                ///   - _in: The number of seconds until the next round starts.
                internal init(
                    at: Foundation.Date? = nil,
                    _in: Swift.Int? = nil
                ) {
                    self.at = at
                    self._in = _in
                }
                internal enum CodingKeys: String, CodingKey {
                    case at
                    case _in = "in"
                }
            }
            /// - Remark: Generated from `#/components/schemas/SwissTournament/nextRound`.
            internal var nextRound: Components.Schemas.SwissTournament.nextRoundPayload?
            /// Creates a new `SwissTournament`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - createdBy:
            ///   - startsAt:
            ///   - name:
            ///   - clock:
            ///   - variant:
            ///   - round:
            ///   - nbRounds:
            ///   - nbPlayers:
            ///   - nbOngoing:
            ///   - status:
            ///   - stats:
            ///   - rated:
            ///   - verdicts:
            ///   - nextRound:
            internal init(
                id: Swift.String,
                createdBy: Swift.String,
                startsAt: Swift.String,
                name: Swift.String,
                clock: Components.Schemas.SwissTournament.clockPayload,
                variant: Swift.String,
                round: Swift.Double,
                nbRounds: Swift.Double,
                nbPlayers: Swift.Double,
                nbOngoing: Swift.Double,
                status: Components.Schemas.SwissStatus,
                stats: Components.Schemas.SwissTournament.statsPayload? = nil,
                rated: Swift.Bool,
                verdicts: Components.Schemas.Verdicts,
                nextRound: Components.Schemas.SwissTournament.nextRoundPayload? = nil
            ) {
                self.id = id
                self.createdBy = createdBy
                self.startsAt = startsAt
                self.name = name
                self.clock = clock
                self.variant = variant
                self.round = round
                self.nbRounds = nbRounds
                self.nbPlayers = nbPlayers
                self.nbOngoing = nbOngoing
                self.status = status
                self.stats = stats
                self.rated = rated
                self.verdicts = verdicts
                self.nextRound = nextRound
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case createdBy
                case startsAt
                case name
                case clock
                case variant
                case round
                case nbRounds
                case nbPlayers
                case nbOngoing
                case status
                case stats
                case rated
                case verdicts
                case nextRound
            }
        }
        /// - Remark: Generated from `#/components/schemas/SwissUnauthorisedEdit`.
        internal struct SwissUnauthorisedEdit: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SwissUnauthorisedEdit/error`.
            internal var error: Swift.String?
            /// Creates a new `SwissUnauthorisedEdit`.
            ///
            /// - Parameters:
            ///   - error:
            internal init(error: Swift.String? = nil) {
                self.error = error
            }
            internal enum CodingKeys: String, CodingKey {
                case error
            }
        }
        /// - Remark: Generated from `#/components/schemas/StudyPgn`.
        internal typealias StudyPgn = OpenAPIRuntime.OpenAPIValueContainer
        /// - Remark: Generated from `#/components/schemas/StudyImportPgnChapters`.
        internal struct StudyImportPgnChapters: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/StudyImportPgnChapters/chaptersPayload`.
            internal struct chaptersPayloadPayload: Codable, Hashable, Sendable {
                /// The chapter ID
                ///
                /// - Remark: Generated from `#/components/schemas/StudyImportPgnChapters/chaptersPayload/id`.
                internal var id: Swift.String?
                /// The chapter name
                ///
                /// - Remark: Generated from `#/components/schemas/StudyImportPgnChapters/chaptersPayload/name`.
                internal var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/StudyImportPgnChapters/chaptersPayload/playersPayload`.
                internal struct playersPayloadPayload: Codable, Hashable, Sendable {
                    /// The player name
                    ///
                    /// - Remark: Generated from `#/components/schemas/StudyImportPgnChapters/chaptersPayload/playersPayload/name`.
                    internal var name: Swift.String?
                    /// The player rating
                    ///
                    /// - Remark: Generated from `#/components/schemas/StudyImportPgnChapters/chaptersPayload/playersPayload/rating`.
                    internal var rating: Swift.Int?
                    /// Creates a new `playersPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: The player name
                    ///   - rating: The player rating
                    internal init(
                        name: Swift.String? = nil,
                        rating: Swift.Int? = nil
                    ) {
                        self.name = name
                        self.rating = rating
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case name
                        case rating
                    }
                }
                /// - Remark: Generated from `#/components/schemas/StudyImportPgnChapters/chaptersPayload/players`.
                internal typealias playersPayload = [Components.Schemas.StudyImportPgnChapters.chaptersPayloadPayload.playersPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/StudyImportPgnChapters/chaptersPayload/players`.
                internal var players: Components.Schemas.StudyImportPgnChapters.chaptersPayloadPayload.playersPayload?
                /// The chapter status
                ///
                /// - Remark: Generated from `#/components/schemas/StudyImportPgnChapters/chaptersPayload/status`.
                internal var status: Swift.String?
                /// Creates a new `chaptersPayloadPayload`.
                ///
                /// - Parameters:
                ///   - id: The chapter ID
                ///   - name: The chapter name
                ///   - players:
                ///   - status: The chapter status
                internal init(
                    id: Swift.String? = nil,
                    name: Swift.String? = nil,
                    players: Components.Schemas.StudyImportPgnChapters.chaptersPayloadPayload.playersPayload? = nil,
                    status: Swift.String? = nil
                ) {
                    self.id = id
                    self.name = name
                    self.players = players
                    self.status = status
                }
                internal enum CodingKeys: String, CodingKey {
                    case id
                    case name
                    case players
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/StudyImportPgnChapters/chapters`.
            internal typealias chaptersPayload = [Components.Schemas.StudyImportPgnChapters.chaptersPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/StudyImportPgnChapters/chapters`.
            internal var chapters: Components.Schemas.StudyImportPgnChapters.chaptersPayload?
            /// Creates a new `StudyImportPgnChapters`.
            ///
            /// - Parameters:
            ///   - chapters:
            internal init(chapters: Components.Schemas.StudyImportPgnChapters.chaptersPayload? = nil) {
                self.chapters = chapters
            }
            internal enum CodingKeys: String, CodingKey {
                case chapters
            }
        }
        /// - Remark: Generated from `#/components/schemas/StudyMetadata`.
        internal struct StudyMetadata: Codable, Hashable, Sendable {
            /// The study ID
            ///
            /// - Remark: Generated from `#/components/schemas/StudyMetadata/id`.
            internal var id: Swift.String
            /// The study name
            ///
            /// - Remark: Generated from `#/components/schemas/StudyMetadata/name`.
            internal var name: Swift.String
            /// The study creation date
            ///
            /// - Remark: Generated from `#/components/schemas/StudyMetadata/createdAt`.
            internal var createdAt: Swift.Int64
            /// The study last update date
            ///
            /// - Remark: Generated from `#/components/schemas/StudyMetadata/updatedAt`.
            internal var updatedAt: Swift.Int64
            /// Creates a new `StudyMetadata`.
            ///
            /// - Parameters:
            ///   - id: The study ID
            ///   - name: The study name
            ///   - createdAt: The study creation date
            ///   - updatedAt: The study last update date
            internal init(
                id: Swift.String,
                name: Swift.String,
                createdAt: Swift.Int64,
                updatedAt: Swift.Int64
            ) {
                self.id = id
                self.name = name
                self.createdAt = createdAt
                self.updatedAt = updatedAt
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case name
                case createdAt
                case updatedAt
            }
        }
        /// - Remark: Generated from `#/components/schemas/BroadcastTour`.
        internal struct BroadcastTour: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BroadcastTour/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/BroadcastTour/name`.
            internal var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/BroadcastTour/slug`.
            internal var slug: Swift.String
            /// - Remark: Generated from `#/components/schemas/BroadcastTour/createdAt`.
            internal var createdAt: Swift.Int
            /// Start and end dates of the tournament, as Unix timestamps in milliseconds
            ///
            /// - Remark: Generated from `#/components/schemas/BroadcastTour/dates`.
            internal var dates: [Swift.Int64]?
            /// Additional display information about the tournament
            ///
            /// - Remark: Generated from `#/components/schemas/BroadcastTour/info`.
            internal struct infoPayload: Codable, Hashable, Sendable {
                /// Official website. External website URL
                ///
                /// - Remark: Generated from `#/components/schemas/BroadcastTour/info/website`.
                internal var website: Swift.String?
                /// Featured players
                ///
                /// - Remark: Generated from `#/components/schemas/BroadcastTour/info/players`.
                internal var players: Swift.String?
                /// Tournament location
                ///
                /// - Remark: Generated from `#/components/schemas/BroadcastTour/info/location`.
                internal var location: Swift.String?
                /// Time control
                ///
                /// - Remark: Generated from `#/components/schemas/BroadcastTour/info/tc`.
                internal var tc: Swift.String?
                /// FIDE rating category
                ///
                /// - Remark: Generated from `#/components/schemas/BroadcastTour/info/fideTc`.
                @frozen internal enum fideTcPayload: String, Codable, Hashable, Sendable {
                    case standard = "standard"
                    case rapid = "rapid"
                    case blitz = "blitz"
                }
                /// FIDE rating category
                ///
                /// - Remark: Generated from `#/components/schemas/BroadcastTour/info/fideTc`.
                internal var fideTc: Components.Schemas.BroadcastTour.infoPayload.fideTcPayload?
                /// Timezone of the tournament. Example: `America/New_York`.
                /// See [list of possible timezone identifiers](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) for more.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/BroadcastTour/info/timeZone`.
                internal var timeZone: Swift.String?
                /// Official standings website. External website URL
                ///
                /// - Remark: Generated from `#/components/schemas/BroadcastTour/info/standings`.
                internal var standings: Swift.String?
                /// Tournament format
                ///
                /// - Remark: Generated from `#/components/schemas/BroadcastTour/info/format`.
                internal var format: Swift.String?
                /// Creates a new `infoPayload`.
                ///
                /// - Parameters:
                ///   - website: Official website. External website URL
                ///   - players: Featured players
                ///   - location: Tournament location
                ///   - tc: Time control
                ///   - fideTc: FIDE rating category
                ///   - timeZone: Timezone of the tournament. Example: `America/New_York`.
                ///   - standings: Official standings website. External website URL
                ///   - format: Tournament format
                internal init(
                    website: Swift.String? = nil,
                    players: Swift.String? = nil,
                    location: Swift.String? = nil,
                    tc: Swift.String? = nil,
                    fideTc: Components.Schemas.BroadcastTour.infoPayload.fideTcPayload? = nil,
                    timeZone: Swift.String? = nil,
                    standings: Swift.String? = nil,
                    format: Swift.String? = nil
                ) {
                    self.website = website
                    self.players = players
                    self.location = location
                    self.tc = tc
                    self.fideTc = fideTc
                    self.timeZone = timeZone
                    self.standings = standings
                    self.format = format
                }
                internal enum CodingKeys: String, CodingKey {
                    case website
                    case players
                    case location
                    case tc
                    case fideTc
                    case timeZone
                    case standings
                    case format
                }
            }
            /// Additional display information about the tournament
            ///
            /// - Remark: Generated from `#/components/schemas/BroadcastTour/info`.
            internal var info: Components.Schemas.BroadcastTour.infoPayload?
            /// Used to designate featured tournaments on Lichess
            ///
            /// - Remark: Generated from `#/components/schemas/BroadcastTour/tier`.
            internal var tier: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/BroadcastTour/image`.
            internal var image: Swift.String?
            /// Full tournament description in markdown format, or in HTML if the html=1 query parameter is set.
            ///
            /// - Remark: Generated from `#/components/schemas/BroadcastTour/description`.
            internal var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BroadcastTour/leaderboard`.
            internal var leaderboard: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/BroadcastTour/teamTable`.
            internal var teamTable: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/BroadcastTour/url`.
            internal var url: Swift.String
            /// Creates a new `BroadcastTour`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - slug:
            ///   - createdAt:
            ///   - dates: Start and end dates of the tournament, as Unix timestamps in milliseconds
            ///   - info: Additional display information about the tournament
            ///   - tier: Used to designate featured tournaments on Lichess
            ///   - image:
            ///   - description: Full tournament description in markdown format, or in HTML if the html=1 query parameter is set.
            ///   - leaderboard:
            ///   - teamTable:
            ///   - url:
            internal init(
                id: Swift.String,
                name: Swift.String,
                slug: Swift.String,
                createdAt: Swift.Int,
                dates: [Swift.Int64]? = nil,
                info: Components.Schemas.BroadcastTour.infoPayload? = nil,
                tier: Swift.Double? = nil,
                image: Swift.String? = nil,
                description: Swift.String? = nil,
                leaderboard: Swift.Bool? = nil,
                teamTable: Swift.Bool? = nil,
                url: Swift.String
            ) {
                self.id = id
                self.name = name
                self.slug = slug
                self.createdAt = createdAt
                self.dates = dates
                self.info = info
                self.tier = tier
                self.image = image
                self.description = description
                self.leaderboard = leaderboard
                self.teamTable = teamTable
                self.url = url
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case name
                case slug
                case createdAt
                case dates
                case info
                case tier
                case image
                case description
                case leaderboard
                case teamTable
                case url
            }
        }
        /// - Remark: Generated from `#/components/schemas/BroadcastGroupTour`.
        internal struct BroadcastGroupTour: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BroadcastGroupTour/name`.
            internal var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/BroadcastGroupTour/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/BroadcastGroupTour/live`.
            internal var live: Swift.Bool?
            /// Creates a new `BroadcastGroupTour`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - id:
            ///   - live:
            internal init(
                name: Swift.String,
                id: Swift.String,
                live: Swift.Bool? = nil
            ) {
                self.name = name
                self.id = id
                self.live = live
            }
            internal enum CodingKeys: String, CodingKey {
                case name
                case id
                case live
            }
        }
        /// - Remark: Generated from `#/components/schemas/BroadcastGroup`.
        internal struct BroadcastGroup: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BroadcastGroup/name`.
            internal var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BroadcastGroup/tours`.
            internal var tours: [Components.Schemas.BroadcastGroupTour]?
            /// Creates a new `BroadcastGroup`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - tours:
            internal init(
                name: Swift.String? = nil,
                tours: [Components.Schemas.BroadcastGroupTour]? = nil
            ) {
                self.name = name
                self.tours = tours
            }
            internal enum CodingKeys: String, CodingKey {
                case name
                case tours
            }
        }
        /// - Remark: Generated from `#/components/schemas/BroadcastCustomPoints`.
        internal struct BroadcastCustomPoints: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BroadcastCustomPoints/win`.
            internal var win: Swift.Double
            /// - Remark: Generated from `#/components/schemas/BroadcastCustomPoints/draw`.
            internal var draw: Swift.Double
            /// Creates a new `BroadcastCustomPoints`.
            ///
            /// - Parameters:
            ///   - win:
            ///   - draw:
            internal init(
                win: Swift.Double,
                draw: Swift.Double
            ) {
                self.win = win
                self.draw = draw
            }
            internal enum CodingKeys: String, CodingKey {
                case win
                case draw
            }
        }
        /// Scoring overrides for wins or draws.
        ///
        /// - Remark: Generated from `#/components/schemas/BroadcastCustomScoring`.
        internal struct BroadcastCustomScoring: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BroadcastCustomScoring/white`.
            internal var white: Components.Schemas.BroadcastCustomPoints
            /// - Remark: Generated from `#/components/schemas/BroadcastCustomScoring/black`.
            internal var black: Components.Schemas.BroadcastCustomPoints
            /// Creates a new `BroadcastCustomScoring`.
            ///
            /// - Parameters:
            ///   - white:
            ///   - black:
            internal init(
                white: Components.Schemas.BroadcastCustomPoints,
                black: Components.Schemas.BroadcastCustomPoints
            ) {
                self.white = white
                self.black = black
            }
            internal enum CodingKeys: String, CodingKey {
                case white
                case black
            }
        }
        /// - Remark: Generated from `#/components/schemas/BroadcastRoundInfo`.
        internal struct BroadcastRoundInfo: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BroadcastRoundInfo/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/BroadcastRoundInfo/name`.
            internal var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/BroadcastRoundInfo/slug`.
            internal var slug: Swift.String
            /// - Remark: Generated from `#/components/schemas/BroadcastRoundInfo/createdAt`.
            internal var createdAt: Swift.Int64
            /// Whether the round is used for rating calculations
            ///
            /// - Remark: Generated from `#/components/schemas/BroadcastRoundInfo/rated`.
            internal var rated: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/BroadcastRoundInfo/ongoing`.
            internal var ongoing: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/BroadcastRoundInfo/startsAt`.
            internal var startsAt: Swift.Int64?
            /// The start date/time is unknown and the round will start automatically when the previous round completes
            ///
            /// - Remark: Generated from `#/components/schemas/BroadcastRoundInfo/startsAfterPrevious`.
            internal var startsAfterPrevious: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/BroadcastRoundInfo/finishedAt`.
            internal var finishedAt: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/BroadcastRoundInfo/finished`.
            internal var finished: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/BroadcastRoundInfo/url`.
            internal var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/BroadcastRoundInfo/delay`.
            internal var delay: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/BroadcastRoundInfo/customScoring`.
            internal var customScoring: Components.Schemas.BroadcastCustomScoring?
            /// Creates a new `BroadcastRoundInfo`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - slug:
            ///   - createdAt:
            ///   - rated: Whether the round is used for rating calculations
            ///   - ongoing:
            ///   - startsAt:
            ///   - startsAfterPrevious: The start date/time is unknown and the round will start automatically when the previous round completes
            ///   - finishedAt:
            ///   - finished:
            ///   - url:
            ///   - delay:
            ///   - customScoring:
            internal init(
                id: Swift.String,
                name: Swift.String,
                slug: Swift.String,
                createdAt: Swift.Int64,
                rated: Swift.Bool,
                ongoing: Swift.Bool? = nil,
                startsAt: Swift.Int64? = nil,
                startsAfterPrevious: Swift.Bool? = nil,
                finishedAt: Swift.Int64? = nil,
                finished: Swift.Bool? = nil,
                url: Swift.String,
                delay: Swift.Int64? = nil,
                customScoring: Components.Schemas.BroadcastCustomScoring? = nil
            ) {
                self.id = id
                self.name = name
                self.slug = slug
                self.createdAt = createdAt
                self.rated = rated
                self.ongoing = ongoing
                self.startsAt = startsAt
                self.startsAfterPrevious = startsAfterPrevious
                self.finishedAt = finishedAt
                self.finished = finished
                self.url = url
                self.delay = delay
                self.customScoring = customScoring
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case name
                case slug
                case createdAt
                case rated
                case ongoing
                case startsAt
                case startsAfterPrevious
                case finishedAt
                case finished
                case url
                case delay
                case customScoring
            }
        }
        /// - Remark: Generated from `#/components/schemas/BroadcastWithRounds`.
        internal struct BroadcastWithRounds: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BroadcastWithRounds/tour`.
            internal var tour: Components.Schemas.BroadcastTour
            /// - Remark: Generated from `#/components/schemas/BroadcastWithRounds/group`.
            internal var group: Components.Schemas.BroadcastGroup?
            /// - Remark: Generated from `#/components/schemas/BroadcastWithRounds/rounds`.
            internal var rounds: [Components.Schemas.BroadcastRoundInfo]
            /// - Remark: Generated from `#/components/schemas/BroadcastWithRounds/defaultRoundId`.
            internal var defaultRoundId: Swift.String?
            /// Creates a new `BroadcastWithRounds`.
            ///
            /// - Parameters:
            ///   - tour:
            ///   - group:
            ///   - rounds:
            ///   - defaultRoundId:
            internal init(
                tour: Components.Schemas.BroadcastTour,
                group: Components.Schemas.BroadcastGroup? = nil,
                rounds: [Components.Schemas.BroadcastRoundInfo],
                defaultRoundId: Swift.String? = nil
            ) {
                self.tour = tour
                self.group = group
                self.rounds = rounds
                self.defaultRoundId = defaultRoundId
            }
            internal enum CodingKeys: String, CodingKey {
                case tour
                case group
                case rounds
                case defaultRoundId
            }
        }
        /// - Remark: Generated from `#/components/schemas/BroadcastWithLastRound`.
        internal struct BroadcastWithLastRound: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BroadcastWithLastRound/group`.
            internal var group: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BroadcastWithLastRound/tour`.
            internal var tour: Components.Schemas.BroadcastTour?
            /// - Remark: Generated from `#/components/schemas/BroadcastWithLastRound/round`.
            internal var round: Components.Schemas.BroadcastRoundInfo?
            /// Creates a new `BroadcastWithLastRound`.
            ///
            /// - Parameters:
            ///   - group:
            ///   - tour:
            ///   - round:
            internal init(
                group: Swift.String? = nil,
                tour: Components.Schemas.BroadcastTour? = nil,
                round: Components.Schemas.BroadcastRoundInfo? = nil
            ) {
                self.group = group
                self.tour = tour
                self.round = round
            }
            internal enum CodingKeys: String, CodingKey {
                case group
                case tour
                case round
            }
        }
        /// - Remark: Generated from `#/components/schemas/BroadcastTop`.
        internal struct BroadcastTop: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BroadcastTop/active`.
            internal var active: [Components.Schemas.BroadcastWithLastRound]?
            /// - Remark: Generated from `#/components/schemas/BroadcastTop/upcoming`.
            internal var upcoming: [Components.Schemas.BroadcastWithLastRound]?
            /// - Remark: Generated from `#/components/schemas/BroadcastTop/past`.
            internal struct pastPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BroadcastTop/past/currentPage`.
                internal var currentPage: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/BroadcastTop/past/maxPerPage`.
                internal var maxPerPage: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/BroadcastTop/past/currentPageResults`.
                internal var currentPageResults: [Components.Schemas.BroadcastWithLastRound]?
                /// - Remark: Generated from `#/components/schemas/BroadcastTop/past/previousPage`.
                internal var previousPage: Swift.Double?
                /// - Remark: Generated from `#/components/schemas/BroadcastTop/past/nextPage`.
                internal var nextPage: Swift.Double?
                /// Creates a new `pastPayload`.
                ///
                /// - Parameters:
                ///   - currentPage:
                ///   - maxPerPage:
                ///   - currentPageResults:
                ///   - previousPage:
                ///   - nextPage:
                internal init(
                    currentPage: Swift.Int? = nil,
                    maxPerPage: Swift.Int? = nil,
                    currentPageResults: [Components.Schemas.BroadcastWithLastRound]? = nil,
                    previousPage: Swift.Double? = nil,
                    nextPage: Swift.Double? = nil
                ) {
                    self.currentPage = currentPage
                    self.maxPerPage = maxPerPage
                    self.currentPageResults = currentPageResults
                    self.previousPage = previousPage
                    self.nextPage = nextPage
                }
                internal enum CodingKeys: String, CodingKey {
                    case currentPage
                    case maxPerPage
                    case currentPageResults
                    case previousPage
                    case nextPage
                }
            }
            /// - Remark: Generated from `#/components/schemas/BroadcastTop/past`.
            internal var past: Components.Schemas.BroadcastTop.pastPayload?
            /// Creates a new `BroadcastTop`.
            ///
            /// - Parameters:
            ///   - active:
            ///   - upcoming:
            ///   - past:
            internal init(
                active: [Components.Schemas.BroadcastWithLastRound]? = nil,
                upcoming: [Components.Schemas.BroadcastWithLastRound]? = nil,
                past: Components.Schemas.BroadcastTop.pastPayload? = nil
            ) {
                self.active = active
                self.upcoming = upcoming
                self.past = past
            }
            internal enum CodingKeys: String, CodingKey {
                case active
                case upcoming
                case past
            }
        }
        /// - Remark: Generated from `#/components/schemas/BroadcastByUser`.
        internal struct BroadcastByUser: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BroadcastByUser/tour`.
            internal var tour: Components.Schemas.BroadcastTour
            /// Creates a new `BroadcastByUser`.
            ///
            /// - Parameters:
            ///   - tour:
            internal init(tour: Components.Schemas.BroadcastTour) {
                self.tour = tour
            }
            internal enum CodingKeys: String, CodingKey {
                case tour
            }
        }
        /// Extended tiebreak code
        ///
        /// - Remark: Generated from `#/components/schemas/BroadcastTiebreakExtendedCode`.
        @frozen internal enum BroadcastTiebreakExtendedCode: String, Codable, Hashable, Sendable {
            case AOB = "AOB"
            case APPO = "APPO"
            case APRO = "APRO"
            case ARO = "ARO"
            case ARO_hyphen_C1 = "ARO-C1"
            case ARO_hyphen_C2 = "ARO-C2"
            case ARO_hyphen_M1 = "ARO-M1"
            case ARO_hyphen_M2 = "ARO-M2"
            case BH = "BH"
            case BH_hyphen_C1 = "BH-C1"
            case BH_hyphen_C2 = "BH-C2"
            case BH_hyphen_M1 = "BH-M1"
            case BH_hyphen_M2 = "BH-M2"
            case BPG = "BPG"
            case BWG = "BWG"
            case DE = "DE"
            case FB = "FB"
            case FB_hyphen_C1 = "FB-C1"
            case FB_hyphen_C2 = "FB-C2"
            case FB_hyphen_M1 = "FB-M1"
            case FB_hyphen_M2 = "FB-M2"
            case KS = "KS"
            case PS = "PS"
            case PS_hyphen_C1 = "PS-C1"
            case PS_hyphen_C2 = "PS-C2"
            case PS_hyphen_M1 = "PS-M1"
            case PS_hyphen_M2 = "PS-M2"
            case PTP = "PTP"
            case SB = "SB"
            case SB_hyphen_C1 = "SB-C1"
            case SB_hyphen_C2 = "SB-C2"
            case SB_hyphen_M1 = "SB-M1"
            case SB_hyphen_M2 = "SB-M2"
            case TPR = "TPR"
            case WON = "WON"
        }
        /// - Remark: Generated from `#/components/schemas/BroadcastForm`.
        internal struct BroadcastForm: Codable, Hashable, Sendable {
            /// Name of the broadcast tournament.
            ///
            /// Example: `Sinquefield Cup`
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/BroadcastForm/name`.
            internal var name: Swift.String
            /// Tournament format.
            /// Example: `"8-player round-robin" or "5-round Swiss"`
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/BroadcastForm/info.format`.
            internal var info_period_format: Swift.String?
            /// Tournament Location
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/BroadcastForm/info.location`.
            internal var info_period_location: Swift.String?
            /// Time control.
            /// Example: `"Classical" or "Rapid" or "Rapid & Blitz"`
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/BroadcastForm/info.tc`.
            internal var info_period_tc: Swift.String?
            /// FIDE rating category. Which FIDE ratings to use
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/BroadcastForm/info.fideTc`.
            @frozen internal enum info_period_fideTcPayload: String, Codable, Hashable, Sendable {
                case standard = "standard"
                case rapid = "rapid"
                case blitz = "blitz"
            }
            /// FIDE rating category. Which FIDE ratings to use
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/BroadcastForm/info.fideTc`.
            internal var info_period_fideTc: Components.Schemas.BroadcastForm.info_period_fideTcPayload?
            /// Timezone of the tournament. Example: `America/New_York`.
            /// See [list of possible timezone identifiers](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) for more.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/BroadcastForm/info.timeZone`.
            internal var info_period_timeZone: Swift.String?
            /// Mention up to 4 of the best players participating.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/BroadcastForm/info.players`.
            internal var info_period_players: Swift.String?
            /// Official website. External website URL
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/BroadcastForm/info.website`.
            internal var info_period_website: Swift.String?
            /// Official Standings. External website URL, e.g. chess-results.com, info64.org
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/BroadcastForm/info.standings`.
            internal var info_period_standings: Swift.String?
            /// Optional long description of the broadcast. Markdown is supported.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/BroadcastForm/markdown`.
            internal var markdown: Swift.String?
            /// Show players scores based on game results
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/BroadcastForm/showScores`.
            internal var showScores: Swift.Bool?
            /// Show player's rating diffs
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/BroadcastForm/showRatingDiffs`.
            internal var showRatingDiffs: Swift.Bool?
            /// Show a team leaderboard. Requires WhiteTeam and BlackTeam PGN tags.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/BroadcastForm/teamTable`.
            internal var teamTable: Swift.Bool?
            /// Who can view the broadcast.
            /// * `public`: Default. Anyone can view the broadcast
            /// * `unlisted`: Only people with the link can view the broadcast
            /// * `private`: Only the broadcast owner(s) can view the broadcast
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/BroadcastForm/visibility`.
            @frozen internal enum visibilityPayload: String, Codable, Hashable, Sendable {
                case _public = "public"
                case unlisted = "unlisted"
                case _private = "private"
            }
            /// Who can view the broadcast.
            /// * `public`: Default. Anyone can view the broadcast
            /// * `unlisted`: Only people with the link can view the broadcast
            /// * `private`: Only the broadcast owner(s) can view the broadcast
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/BroadcastForm/visibility`.
            internal var visibility: Components.Schemas.BroadcastForm.visibilityPayload?
            /// Optional replace player names, ratings and titles.
            ///
            /// One line per player, formatted as such:
            ///
            /// ```txt
            /// player name = FIDE ID
            /// ```
            ///
            /// Example:
            ///
            /// ```txt
            /// Magnus Carlsen = 1503014
            /// ```
            ///
            /// Player names ignore case and punctuation, and match all possible combinations of 2 words: "Jorge Rick Vito" will match "Jorge Rick", "jorge vito", "Rick, Vito", etc.
            ///
            /// If the player is NM or WNM, you can:
            ///
            /// ```txt
            /// Player Name = FIDE ID / Title
            /// ```
            ///
            /// Alternatively, you may set tags manually, like so:
            ///
            /// ```txt
            /// player name / rating / title / new name
            /// ```
            ///
            /// All values are optional. Example:
            /// ```txt
            /// Magnus Carlsen / 2863 / GM
            /// YouGotLittUp / 1890 / / Louis Litt
            /// ```
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/BroadcastForm/players`.
            internal var players: Swift.String?
            /// Optional: assign players to teams
            ///
            /// One line per player, formatted as such:
            /// ```txt
            /// Team name; Fide Id or Player name
            /// ```
            ///
            /// Example:
            /// ```txt
            /// Team Cats ; 3408230
            /// Team Dogs ; Scooby Doo
            /// ```
            ///
            /// By default the PGN tags WhiteTeam and BlackTeam are used.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/BroadcastForm/teams`.
            internal var teams: Swift.String?
            /// Optional, for Lichess admins only, used to feature on /broadcast.
            ///
            /// * `3` for Official: normal tier
            /// * `4` for Official: high tier
            /// * `5` for Official: best tier
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/BroadcastForm/tier`.
            @frozen internal enum tierPayload: Int, Codable, Hashable, Sendable {
                case _3 = 3
                case _4 = 4
                case _5 = 5
            }
            /// Optional, for Lichess admins only, used to feature on /broadcast.
            ///
            /// * `3` for Official: normal tier
            /// * `4` for Official: high tier
            /// * `5` for Official: best tier
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/BroadcastForm/tier`.
            internal var tier: Components.Schemas.BroadcastForm.tierPayload?
            /// - Remark: Generated from `#/components/schemas/BroadcastForm/tiebreaks[]`.
            internal var tiebreaks_lbrack__rbrack_: [Components.Schemas.BroadcastTiebreakExtendedCode]?
            /// Creates a new `BroadcastForm`.
            ///
            /// - Parameters:
            ///   - name: Name of the broadcast tournament.
            ///   - info_period_format: Tournament format.
            ///   - info_period_location: Tournament Location
            ///   - info_period_tc: Time control.
            ///   - info_period_fideTc: FIDE rating category. Which FIDE ratings to use
            ///   - info_period_timeZone: Timezone of the tournament. Example: `America/New_York`.
            ///   - info_period_players: Mention up to 4 of the best players participating.
            ///   - info_period_website: Official website. External website URL
            ///   - info_period_standings: Official Standings. External website URL, e.g. chess-results.com, info64.org
            ///   - markdown: Optional long description of the broadcast. Markdown is supported.
            ///   - showScores: Show players scores based on game results
            ///   - showRatingDiffs: Show player's rating diffs
            ///   - teamTable: Show a team leaderboard. Requires WhiteTeam and BlackTeam PGN tags.
            ///   - visibility: Who can view the broadcast.
            ///   - players: Optional replace player names, ratings and titles.
            ///   - teams: Optional: assign players to teams
            ///   - tier: Optional, for Lichess admins only, used to feature on /broadcast.
            ///   - tiebreaks_lbrack__rbrack_:
            internal init(
                name: Swift.String,
                info_period_format: Swift.String? = nil,
                info_period_location: Swift.String? = nil,
                info_period_tc: Swift.String? = nil,
                info_period_fideTc: Components.Schemas.BroadcastForm.info_period_fideTcPayload? = nil,
                info_period_timeZone: Swift.String? = nil,
                info_period_players: Swift.String? = nil,
                info_period_website: Swift.String? = nil,
                info_period_standings: Swift.String? = nil,
                markdown: Swift.String? = nil,
                showScores: Swift.Bool? = nil,
                showRatingDiffs: Swift.Bool? = nil,
                teamTable: Swift.Bool? = nil,
                visibility: Components.Schemas.BroadcastForm.visibilityPayload? = nil,
                players: Swift.String? = nil,
                teams: Swift.String? = nil,
                tier: Components.Schemas.BroadcastForm.tierPayload? = nil,
                tiebreaks_lbrack__rbrack_: [Components.Schemas.BroadcastTiebreakExtendedCode]? = nil
            ) {
                self.name = name
                self.info_period_format = info_period_format
                self.info_period_location = info_period_location
                self.info_period_tc = info_period_tc
                self.info_period_fideTc = info_period_fideTc
                self.info_period_timeZone = info_period_timeZone
                self.info_period_players = info_period_players
                self.info_period_website = info_period_website
                self.info_period_standings = info_period_standings
                self.markdown = markdown
                self.showScores = showScores
                self.showRatingDiffs = showRatingDiffs
                self.teamTable = teamTable
                self.visibility = visibility
                self.players = players
                self.teams = teams
                self.tier = tier
                self.tiebreaks_lbrack__rbrack_ = tiebreaks_lbrack__rbrack_
            }
            internal enum CodingKeys: String, CodingKey {
                case name
                case info_period_format = "info.format"
                case info_period_location = "info.location"
                case info_period_tc = "info.tc"
                case info_period_fideTc = "info.fideTc"
                case info_period_timeZone = "info.timeZone"
                case info_period_players = "info.players"
                case info_period_website = "info.website"
                case info_period_standings = "info.standings"
                case markdown
                case showScores
                case showRatingDiffs
                case teamTable
                case visibility
                case players
                case teams
                case tier
                case tiebreaks_lbrack__rbrack_ = "tiebreaks[]"
            }
        }
        /// - Remark: Generated from `#/components/schemas/BroadcastPlayerTiebreak`.
        internal struct BroadcastPlayerTiebreak: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BroadcastPlayerTiebreak/extendedCode`.
            internal var extendedCode: Components.Schemas.BroadcastTiebreakExtendedCode?
            /// - Remark: Generated from `#/components/schemas/BroadcastPlayerTiebreak/description`.
            internal var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BroadcastPlayerTiebreak/points`.
            internal var points: Swift.Double?
            /// Creates a new `BroadcastPlayerTiebreak`.
            ///
            /// - Parameters:
            ///   - extendedCode:
            ///   - description:
            ///   - points:
            internal init(
                extendedCode: Components.Schemas.BroadcastTiebreakExtendedCode? = nil,
                description: Swift.String? = nil,
                points: Swift.Double? = nil
            ) {
                self.extendedCode = extendedCode
                self.description = description
                self.points = points
            }
            internal enum CodingKeys: String, CodingKey {
                case extendedCode
                case description
                case points
            }
        }
        /// - Remark: Generated from `#/components/schemas/BroadcastPlayerEntry`.
        internal struct BroadcastPlayerEntry: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BroadcastPlayerEntry/name`.
            internal var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BroadcastPlayerEntry/score`.
            internal var score: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/BroadcastPlayerEntry/played`.
            internal var played: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/BroadcastPlayerEntry/rating`.
            internal var rating: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/BroadcastPlayerEntry/ratingDiff`.
            internal var ratingDiff: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/BroadcastPlayerEntry/performance`.
            internal var performance: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/BroadcastPlayerEntry/title`.
            internal var title: Components.Schemas.Title?
            /// - Remark: Generated from `#/components/schemas/BroadcastPlayerEntry/fideId`.
            internal var fideId: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/BroadcastPlayerEntry/fed`.
            internal var fed: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BroadcastPlayerEntry/tiebreaks`.
            internal var tiebreaks: [Components.Schemas.BroadcastPlayerTiebreak]?
            /// - Remark: Generated from `#/components/schemas/BroadcastPlayerEntry/rank`.
            internal var rank: Swift.Int?
            /// Creates a new `BroadcastPlayerEntry`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - score:
            ///   - played:
            ///   - rating:
            ///   - ratingDiff:
            ///   - performance:
            ///   - title:
            ///   - fideId:
            ///   - fed:
            ///   - tiebreaks:
            ///   - rank:
            internal init(
                name: Swift.String? = nil,
                score: Swift.Double? = nil,
                played: Swift.Int? = nil,
                rating: Swift.Int? = nil,
                ratingDiff: Swift.Int? = nil,
                performance: Swift.Int? = nil,
                title: Components.Schemas.Title? = nil,
                fideId: Swift.Int? = nil,
                fed: Swift.String? = nil,
                tiebreaks: [Components.Schemas.BroadcastPlayerTiebreak]? = nil,
                rank: Swift.Int? = nil
            ) {
                self.name = name
                self.score = score
                self.played = played
                self.rating = rating
                self.ratingDiff = ratingDiff
                self.performance = performance
                self.title = title
                self.fideId = fideId
                self.fed = fed
                self.tiebreaks = tiebreaks
                self.rank = rank
            }
            internal enum CodingKeys: String, CodingKey {
                case name
                case score
                case played
                case rating
                case ratingDiff
                case performance
                case title
                case fideId
                case fed
                case tiebreaks
                case rank
            }
        }
        /// Name of the broadcast round.
        /// Example: `Round 1`
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/BroadcastRoundFormName`.
        internal typealias BroadcastRoundFormName = Swift.String
        /// - Remark: Generated from `#/components/schemas/win`.
        internal typealias win = Swift.Double
        /// - Remark: Generated from `#/components/schemas/draw`.
        internal typealias draw = Swift.Double
        /// - Remark: Generated from `#/components/schemas/BroadcastRoundForm`.
        internal struct BroadcastRoundForm: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BroadcastRoundForm/value1`.
            @frozen internal enum Value1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BroadcastRoundForm/value1/case1`.
                internal struct Case1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/BroadcastRoundForm/value1/case1/name`.
                    internal var name: Components.Schemas.BroadcastRoundFormName
                    /// Creates a new `Case1Payload`.
                    ///
                    /// - Parameters:
                    ///   - name:
                    internal init(name: Components.Schemas.BroadcastRoundFormName) {
                        self.name = name
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case name
                    }
                }
                /// - Remark: Generated from `#/components/schemas/BroadcastRoundForm/value1/case1`.
                case case1(Components.Schemas.BroadcastRoundForm.Value1Payload.Case1Payload)
                /// - Remark: Generated from `#/components/schemas/BroadcastRoundForm/value1/case2`.
                internal struct Case2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/BroadcastRoundForm/value1/case2/name`.
                    internal var name: Components.Schemas.BroadcastRoundFormName
                    /// URL that Lichess will poll to get updates about the games. It must be publicly accessible from the Internet.
                    ///
                    /// Example:
                    /// ```txt
                    /// https://myserver.org/myevent/round-10/games.pgn
                    /// ```
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/BroadcastRoundForm/value1/case2/syncUrl`.
                    internal var syncUrl: Swift.String
                    /// Filter games by round number
                    ///
                    /// Optional, only keep games from the source that match a round number.
                    /// It uses the PGN **Round** tag. These would match round 3:
                    /// ```txt
                    /// [Round "3"]
                    /// [Round "3.1"]
                    /// ```
                    /// If you set a round number, then games without a **Round** tag are dropped.
                    ///
                    /// It only works if you chose `syncUrl` or `syncUrls` as the source.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/BroadcastRoundForm/value1/case2/onlyRound`.
                    internal var onlyRound: Swift.Int?
                    /// Select slices of the games
                    ///
                    /// Optional. Select games based on their position in the source.
                    /// ```txt
                    /// 1           only select the first board
                    /// 1-4         only select the first 4 boards
                    /// 1,2,3,4     same as above, first 4 boards
                    /// 11-15,21-25 boards 11 to 15, and boards 21 to 25
                    /// 2,3,7-9     boards 2, 3, 7, 8, and 9
                    /// ```
                    /// Slicing is done after filtering by round number.
                    ///
                    /// It only works if you chose `syncUrl` or `syncUrls` as the source.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/BroadcastRoundForm/value1/case2/slices`.
                    internal var slices: Swift.String?
                    /// Creates a new `Case2Payload`.
                    ///
                    /// - Parameters:
                    ///   - name:
                    ///   - syncUrl: URL that Lichess will poll to get updates about the games. It must be publicly accessible from the Internet.
                    ///   - onlyRound: Filter games by round number
                    ///   - slices: Select slices of the games
                    internal init(
                        name: Components.Schemas.BroadcastRoundFormName,
                        syncUrl: Swift.String,
                        onlyRound: Swift.Int? = nil,
                        slices: Swift.String? = nil
                    ) {
                        self.name = name
                        self.syncUrl = syncUrl
                        self.onlyRound = onlyRound
                        self.slices = slices
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case name
                        case syncUrl
                        case onlyRound
                        case slices
                    }
                }
                /// - Remark: Generated from `#/components/schemas/BroadcastRoundForm/value1/case2`.
                case case2(Components.Schemas.BroadcastRoundForm.Value1Payload.Case2Payload)
                /// - Remark: Generated from `#/components/schemas/BroadcastRoundForm/value1/case3`.
                internal struct Case3Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/BroadcastRoundForm/value1/case3/name`.
                    internal var name: Components.Schemas.BroadcastRoundFormName
                    /// URLs that Lichess will poll to get updates about the games, separated by newlines. They must be publicly accessible from the Internet.
                    ///
                    /// Example:
                    /// ```txt
                    /// https://myserver.org/myevent/round-10/game-1.pgn
                    /// https://myserver.org/myevent/round-10/game-2.pgn
                    /// ```
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/BroadcastRoundForm/value1/case3/syncUrls`.
                    internal var syncUrls: Swift.String
                    /// Filter games by round number
                    ///
                    /// Optional, only keep games from the source that match a round number.
                    /// It uses the PGN **Round** tag. These would match round 3:
                    /// ```txt
                    /// [Round "3"]
                    /// [Round "3.1"]
                    /// ```
                    /// If you set a round number, then games without a **Round** tag are dropped.
                    ///
                    /// It only works if you chose `syncUrl` or `syncUrls` as the source.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/BroadcastRoundForm/value1/case3/onlyRound`.
                    internal var onlyRound: Swift.Int?
                    /// Select slices of the games
                    ///
                    /// Optional. Select games based on their position in the source.
                    /// ```txt
                    /// 1           only select the first board
                    /// 1-4         only select the first 4 boards
                    /// 1,2,3,4     same as above, first 4 boards
                    /// 11-15,21-25 boards 11 to 15, and boards 21 to 25
                    /// 2,3,7-9     boards 2, 3, 7, 8, and 9
                    /// ```
                    /// Slicing is done after filtering by round number.
                    ///
                    /// It only works if you chose `syncUrl` or `syncUrls` as the source.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/BroadcastRoundForm/value1/case3/slices`.
                    internal var slices: Swift.String?
                    /// Creates a new `Case3Payload`.
                    ///
                    /// - Parameters:
                    ///   - name:
                    ///   - syncUrls: URLs that Lichess will poll to get updates about the games, separated by newlines. They must be publicly accessible from the Internet.
                    ///   - onlyRound: Filter games by round number
                    ///   - slices: Select slices of the games
                    internal init(
                        name: Components.Schemas.BroadcastRoundFormName,
                        syncUrls: Swift.String,
                        onlyRound: Swift.Int? = nil,
                        slices: Swift.String? = nil
                    ) {
                        self.name = name
                        self.syncUrls = syncUrls
                        self.onlyRound = onlyRound
                        self.slices = slices
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case name
                        case syncUrls
                        case onlyRound
                        case slices
                    }
                }
                /// - Remark: Generated from `#/components/schemas/BroadcastRoundForm/value1/case3`.
                case case3(Components.Schemas.BroadcastRoundForm.Value1Payload.Case3Payload)
                /// - Remark: Generated from `#/components/schemas/BroadcastRoundForm/value1/case4`.
                internal struct Case4Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/BroadcastRoundForm/value1/case4/name`.
                    internal var name: Components.Schemas.BroadcastRoundFormName
                    /// Lichess game IDs - Up to 100 Lichess game IDs, separated by spaces.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/BroadcastRoundForm/value1/case4/syncIds`.
                    internal var syncIds: Swift.String
                    /// Creates a new `Case4Payload`.
                    ///
                    /// - Parameters:
                    ///   - name:
                    ///   - syncIds: Lichess game IDs - Up to 100 Lichess game IDs, separated by spaces.
                    internal init(
                        name: Components.Schemas.BroadcastRoundFormName,
                        syncIds: Swift.String
                    ) {
                        self.name = name
                        self.syncIds = syncIds
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case name
                        case syncIds
                    }
                }
                /// - Remark: Generated from `#/components/schemas/BroadcastRoundForm/value1/case4`.
                case case4(Components.Schemas.BroadcastRoundForm.Value1Payload.Case4Payload)
                /// - Remark: Generated from `#/components/schemas/BroadcastRoundForm/value1/case5`.
                internal struct Case5Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/BroadcastRoundForm/value1/case5/name`.
                    internal var name: Components.Schemas.BroadcastRoundFormName
                    /// Up to 100 Lichess usernames, separated by spaces
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/BroadcastRoundForm/value1/case5/syncUsers`.
                    internal var syncUsers: Swift.String
                    /// Creates a new `Case5Payload`.
                    ///
                    /// - Parameters:
                    ///   - name:
                    ///   - syncUsers: Up to 100 Lichess usernames, separated by spaces
                    internal init(
                        name: Components.Schemas.BroadcastRoundFormName,
                        syncUsers: Swift.String
                    ) {
                        self.name = name
                        self.syncUsers = syncUsers
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case name
                        case syncUsers
                    }
                }
                /// - Remark: Generated from `#/components/schemas/BroadcastRoundForm/value1/case5`.
                case case5(Components.Schemas.BroadcastRoundForm.Value1Payload.Case5Payload)
                internal init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case3(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case4(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case5(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                internal func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try value.encode(to: encoder)
                    case let .case2(value):
                        try value.encode(to: encoder)
                    case let .case3(value):
                        try value.encode(to: encoder)
                    case let .case4(value):
                        try value.encode(to: encoder)
                    case let .case5(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/BroadcastRoundForm/value1`.
            internal var value1: Components.Schemas.BroadcastRoundForm.Value1Payload
            /// - Remark: Generated from `#/components/schemas/BroadcastRoundForm/value2`.
            internal struct Value2Payload: Codable, Hashable, Sendable {
                /// Timestamp in milliseconds of broadcast round start. Leave empty to manually start the broadcast round.
                /// Example: `1356998400070`
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/BroadcastRoundForm/value2/startsAt`.
                internal var startsAt: Swift.Int64?
                /// The start date is unknown, and the round will start automatically when the previous round completes.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/BroadcastRoundForm/value2/startsAfterPrevious`.
                internal var startsAfterPrevious: Swift.Bool?
                /// Delay in seconds for movements to appear on the broadcast. Leave it empty if you don't need it.
                /// Example: `900` (15 min)
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/BroadcastRoundForm/value2/delay`.
                internal var delay: Swift.Int?
                /// Lichess can usually detect the round status, but you can also set it manually if needed.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/BroadcastRoundForm/value2/status`.
                @frozen internal enum statusPayload: String, Codable, Hashable, Sendable {
                    case new = "new"
                    case started = "started"
                    case finished = "finished"
                }
                /// Lichess can usually detect the round status, but you can also set it manually if needed.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/BroadcastRoundForm/value2/status`.
                internal var status: Components.Schemas.BroadcastRoundForm.Value2Payload.statusPayload?
                /// Whether the round is used when calculating players' rating changes.
                ///
                /// - Remark: Generated from `#/components/schemas/BroadcastRoundForm/value2/rated`.
                internal var rated: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/BroadcastRoundForm/value2/customScoring.white.win`.
                internal var customScoring_period_white_period_win: Components.Schemas.win?
                /// - Remark: Generated from `#/components/schemas/BroadcastRoundForm/value2/customScoring.white.draw`.
                internal var customScoring_period_white_period_draw: Components.Schemas.draw?
                /// - Remark: Generated from `#/components/schemas/BroadcastRoundForm/value2/customScoring.black.win`.
                internal var customScoring_period_black_period_win: Components.Schemas.win?
                /// - Remark: Generated from `#/components/schemas/BroadcastRoundForm/value2/customScoring.black.draw`.
                internal var customScoring_period_black_period_draw: Components.Schemas.draw?
                /// (Only for Admins) Waiting time for each poll.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/BroadcastRoundForm/value2/period`.
                internal var period: Swift.Int?
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - startsAt: Timestamp in milliseconds of broadcast round start. Leave empty to manually start the broadcast round.
                ///   - startsAfterPrevious: The start date is unknown, and the round will start automatically when the previous round completes.
                ///   - delay: Delay in seconds for movements to appear on the broadcast. Leave it empty if you don't need it.
                ///   - status: Lichess can usually detect the round status, but you can also set it manually if needed.
                ///   - rated: Whether the round is used when calculating players' rating changes.
                ///   - customScoring_period_white_period_win:
                ///   - customScoring_period_white_period_draw:
                ///   - customScoring_period_black_period_win:
                ///   - customScoring_period_black_period_draw:
                ///   - period: (Only for Admins) Waiting time for each poll.
                internal init(
                    startsAt: Swift.Int64? = nil,
                    startsAfterPrevious: Swift.Bool? = nil,
                    delay: Swift.Int? = nil,
                    status: Components.Schemas.BroadcastRoundForm.Value2Payload.statusPayload? = nil,
                    rated: Swift.Bool? = nil,
                    customScoring_period_white_period_win: Components.Schemas.win? = nil,
                    customScoring_period_white_period_draw: Components.Schemas.draw? = nil,
                    customScoring_period_black_period_win: Components.Schemas.win? = nil,
                    customScoring_period_black_period_draw: Components.Schemas.draw? = nil,
                    period: Swift.Int? = nil
                ) {
                    self.startsAt = startsAt
                    self.startsAfterPrevious = startsAfterPrevious
                    self.delay = delay
                    self.status = status
                    self.rated = rated
                    self.customScoring_period_white_period_win = customScoring_period_white_period_win
                    self.customScoring_period_white_period_draw = customScoring_period_white_period_draw
                    self.customScoring_period_black_period_win = customScoring_period_black_period_win
                    self.customScoring_period_black_period_draw = customScoring_period_black_period_draw
                    self.period = period
                }
                internal enum CodingKeys: String, CodingKey {
                    case startsAt
                    case startsAfterPrevious
                    case delay
                    case status
                    case rated
                    case customScoring_period_white_period_win = "customScoring.white.win"
                    case customScoring_period_white_period_draw = "customScoring.white.draw"
                    case customScoring_period_black_period_win = "customScoring.black.win"
                    case customScoring_period_black_period_draw = "customScoring.black.draw"
                    case period
                }
            }
            /// - Remark: Generated from `#/components/schemas/BroadcastRoundForm/value2`.
            internal var value2: Components.Schemas.BroadcastRoundForm.Value2Payload
            /// Creates a new `BroadcastRoundForm`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            internal init(
                value1: Components.Schemas.BroadcastRoundForm.Value1Payload,
                value2: Components.Schemas.BroadcastRoundForm.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            internal init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            internal func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/BroadcastRoundStudyInfo`.
        internal struct BroadcastRoundStudyInfo: Codable, Hashable, Sendable {
            /// Whether the currently authenticated user has permission to update the study
            ///
            /// - Remark: Generated from `#/components/schemas/BroadcastRoundStudyInfo/writeable`.
            internal var writeable: Swift.Bool?
            /// Creates a new `BroadcastRoundStudyInfo`.
            ///
            /// - Parameters:
            ///   - writeable: Whether the currently authenticated user has permission to update the study
            internal init(writeable: Swift.Bool? = nil) {
                self.writeable = writeable
            }
            internal enum CodingKeys: String, CodingKey {
                case writeable
            }
        }
        /// - Remark: Generated from `#/components/schemas/BroadcastRoundNew`.
        internal struct BroadcastRoundNew: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BroadcastRoundNew/round`.
            internal var round: Components.Schemas.BroadcastRoundInfo
            /// - Remark: Generated from `#/components/schemas/BroadcastRoundNew/tour`.
            internal var tour: Components.Schemas.BroadcastTour
            /// - Remark: Generated from `#/components/schemas/BroadcastRoundNew/study`.
            internal var study: Components.Schemas.BroadcastRoundStudyInfo
            /// Creates a new `BroadcastRoundNew`.
            ///
            /// - Parameters:
            ///   - round:
            ///   - tour:
            ///   - study:
            internal init(
                round: Components.Schemas.BroadcastRoundInfo,
                tour: Components.Schemas.BroadcastTour,
                study: Components.Schemas.BroadcastRoundStudyInfo
            ) {
                self.round = round
                self.tour = tour
                self.study = study
            }
            internal enum CodingKeys: String, CodingKey {
                case round
                case tour
                case study
            }
        }
        /// - Remark: Generated from `#/components/schemas/BroadcastRoundGame`.
        internal struct BroadcastRoundGame: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BroadcastRoundGame/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/BroadcastRoundGame/name`.
            internal var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/BroadcastRoundGame/fen`.
            internal var fen: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BroadcastRoundGame/playersPayload`.
            internal struct playersPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BroadcastRoundGame/playersPayload/name`.
                internal var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/BroadcastRoundGame/playersPayload/title`.
                internal var title: Components.Schemas.Title?
                /// - Remark: Generated from `#/components/schemas/BroadcastRoundGame/playersPayload/rating`.
                internal var rating: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/BroadcastRoundGame/playersPayload/fideId`.
                internal var fideId: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/BroadcastRoundGame/playersPayload/fed`.
                internal var fed: Swift.String?
                /// - Remark: Generated from `#/components/schemas/BroadcastRoundGame/playersPayload/clock`.
                internal var clock: Swift.Int?
                /// Creates a new `playersPayloadPayload`.
                ///
                /// - Parameters:
                ///   - name:
                ///   - title:
                ///   - rating:
                ///   - fideId:
                ///   - fed:
                ///   - clock:
                internal init(
                    name: Swift.String? = nil,
                    title: Components.Schemas.Title? = nil,
                    rating: Swift.Int? = nil,
                    fideId: Swift.Int? = nil,
                    fed: Swift.String? = nil,
                    clock: Swift.Int? = nil
                ) {
                    self.name = name
                    self.title = title
                    self.rating = rating
                    self.fideId = fideId
                    self.fed = fed
                    self.clock = clock
                }
                internal enum CodingKeys: String, CodingKey {
                    case name
                    case title
                    case rating
                    case fideId
                    case fed
                    case clock
                }
            }
            /// - Remark: Generated from `#/components/schemas/BroadcastRoundGame/players`.
            internal typealias playersPayload = [Components.Schemas.BroadcastRoundGame.playersPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/BroadcastRoundGame/players`.
            internal var players: Components.Schemas.BroadcastRoundGame.playersPayload?
            /// - Remark: Generated from `#/components/schemas/BroadcastRoundGame/lastMove`.
            internal var lastMove: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BroadcastRoundGame/check`.
            @frozen internal enum checkPayload: String, Codable, Hashable, Sendable {
                case _plus_ = "+"
                case _num_ = "#"
            }
            /// - Remark: Generated from `#/components/schemas/BroadcastRoundGame/check`.
            internal var check: Components.Schemas.BroadcastRoundGame.checkPayload?
            /// - Remark: Generated from `#/components/schemas/BroadcastRoundGame/thinkTime`.
            internal var thinkTime: Swift.Int?
            /// The result of the game
            ///
            /// - Remark: Generated from `#/components/schemas/BroadcastRoundGame/status`.
            @frozen internal enum statusPayload: String, Codable, Hashable, Sendable {
                case _ast_ = "*"
                case _1_hyphen_0 = "1-0"
                case _0_hyphen_1 = "0-1"
                case _xBD__hyphen_½ = "½-½"
            }
            /// The result of the game
            ///
            /// - Remark: Generated from `#/components/schemas/BroadcastRoundGame/status`.
            internal var status: Components.Schemas.BroadcastRoundGame.statusPayload?
            /// Creates a new `BroadcastRoundGame`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - fen:
            ///   - players:
            ///   - lastMove:
            ///   - check:
            ///   - thinkTime:
            ///   - status: The result of the game
            internal init(
                id: Swift.String,
                name: Swift.String,
                fen: Swift.String? = nil,
                players: Components.Schemas.BroadcastRoundGame.playersPayload? = nil,
                lastMove: Swift.String? = nil,
                check: Components.Schemas.BroadcastRoundGame.checkPayload? = nil,
                thinkTime: Swift.Int? = nil,
                status: Components.Schemas.BroadcastRoundGame.statusPayload? = nil
            ) {
                self.id = id
                self.name = name
                self.fen = fen
                self.players = players
                self.lastMove = lastMove
                self.check = check
                self.thinkTime = thinkTime
                self.status = status
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case name
                case fen
                case players
                case lastMove
                case check
                case thinkTime
                case status
            }
        }
        /// - Remark: Generated from `#/components/schemas/BroadcastRound`.
        internal struct BroadcastRound: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BroadcastRound/round`.
            internal var round: Components.Schemas.BroadcastRoundInfo
            /// - Remark: Generated from `#/components/schemas/BroadcastRound/tour`.
            internal var tour: Components.Schemas.BroadcastTour
            /// - Remark: Generated from `#/components/schemas/BroadcastRound/study`.
            internal var study: Components.Schemas.BroadcastRoundStudyInfo
            /// - Remark: Generated from `#/components/schemas/BroadcastRound/games`.
            internal var games: [Components.Schemas.BroadcastRoundGame]
            /// - Remark: Generated from `#/components/schemas/BroadcastRound/group`.
            internal var group: Components.Schemas.BroadcastGroup?
            /// Creates a new `BroadcastRound`.
            ///
            /// - Parameters:
            ///   - round:
            ///   - tour:
            ///   - study:
            ///   - games:
            ///   - group:
            internal init(
                round: Components.Schemas.BroadcastRoundInfo,
                tour: Components.Schemas.BroadcastTour,
                study: Components.Schemas.BroadcastRoundStudyInfo,
                games: [Components.Schemas.BroadcastRoundGame],
                group: Components.Schemas.BroadcastGroup? = nil
            ) {
                self.round = round
                self.tour = tour
                self.study = study
                self.games = games
                self.group = group
            }
            internal enum CodingKeys: String, CodingKey {
                case round
                case tour
                case study
                case games
                case group
            }
        }
        /// - Remark: Generated from `#/components/schemas/BroadcastPgnPushTags`.
        internal struct BroadcastPgnPushTags: Codable, Hashable, Sendable {
            /// A container of undocumented properties.
            internal var additionalProperties: [String: Swift.String]
            /// Creates a new `BroadcastPgnPushTags`.
            ///
            /// - Parameters:
            ///   - additionalProperties: A container of undocumented properties.
            internal init(additionalProperties: [String: Swift.String] = .init()) {
                self.additionalProperties = additionalProperties
            }
            internal init(from decoder: any Decoder) throws {
                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
            }
            internal func encode(to encoder: any Encoder) throws {
                try encoder.encodeAdditionalProperties(additionalProperties)
            }
        }
        /// - Remark: Generated from `#/components/schemas/BroadcastPgnPush`.
        internal struct BroadcastPgnPush: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BroadcastPgnPush/gamesPayload`.
            internal struct gamesPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BroadcastPgnPush/gamesPayload/tags`.
                internal var tags: Components.Schemas.BroadcastPgnPushTags
                /// - Remark: Generated from `#/components/schemas/BroadcastPgnPush/gamesPayload/moves`.
                internal var moves: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/BroadcastPgnPush/gamesPayload/error`.
                internal var error: Swift.String?
                /// Creates a new `gamesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - tags:
                ///   - moves:
                ///   - error:
                internal init(
                    tags: Components.Schemas.BroadcastPgnPushTags,
                    moves: Swift.Int? = nil,
                    error: Swift.String? = nil
                ) {
                    self.tags = tags
                    self.moves = moves
                    self.error = error
                }
                internal enum CodingKeys: String, CodingKey {
                    case tags
                    case moves
                    case error
                }
            }
            /// - Remark: Generated from `#/components/schemas/BroadcastPgnPush/games`.
            internal typealias gamesPayload = [Components.Schemas.BroadcastPgnPush.gamesPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/BroadcastPgnPush/games`.
            internal var games: Components.Schemas.BroadcastPgnPush.gamesPayload
            /// Creates a new `BroadcastPgnPush`.
            ///
            /// - Parameters:
            ///   - games:
            internal init(games: Components.Schemas.BroadcastPgnPush.gamesPayload) {
                self.games = games
            }
            internal enum CodingKeys: String, CodingKey {
                case games
            }
        }
        /// - Remark: Generated from `#/components/schemas/BroadcastMyRound`.
        internal struct BroadcastMyRound: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BroadcastMyRound/round`.
            internal var round: Components.Schemas.BroadcastRoundInfo
            /// - Remark: Generated from `#/components/schemas/BroadcastMyRound/tour`.
            internal var tour: Components.Schemas.BroadcastTour
            /// - Remark: Generated from `#/components/schemas/BroadcastMyRound/study`.
            internal var study: Components.Schemas.BroadcastRoundStudyInfo
            /// Creates a new `BroadcastMyRound`.
            ///
            /// - Parameters:
            ///   - round:
            ///   - tour:
            ///   - study:
            internal init(
                round: Components.Schemas.BroadcastRoundInfo,
                tour: Components.Schemas.BroadcastTour,
                study: Components.Schemas.BroadcastRoundStudyInfo
            ) {
                self.round = round
                self.tour = tour
                self.study = study
            }
            internal enum CodingKeys: String, CodingKey {
                case round
                case tour
                case study
            }
        }
        /// - Remark: Generated from `#/components/schemas/FIDEPlayer`.
        internal struct FIDEPlayer: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FIDEPlayer/id`.
            internal var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/FIDEPlayer/name`.
            internal var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/FIDEPlayer/title`.
            internal var title: Components.Schemas.Title?
            /// - Remark: Generated from `#/components/schemas/FIDEPlayer/federation`.
            internal var federation: Swift.String
            /// - Remark: Generated from `#/components/schemas/FIDEPlayer/year`.
            internal var year: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/FIDEPlayer/inactive`.
            internal var inactive: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FIDEPlayer/standard`.
            internal var standard: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FIDEPlayer/rapid`.
            internal var rapid: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FIDEPlayer/blitz`.
            internal var blitz: Swift.Int?
            /// Creates a new `FIDEPlayer`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - title:
            ///   - federation:
            ///   - year:
            ///   - inactive:
            ///   - standard:
            ///   - rapid:
            ///   - blitz:
            internal init(
                id: Swift.Int,
                name: Swift.String,
                title: Components.Schemas.Title? = nil,
                federation: Swift.String,
                year: Swift.Double? = nil,
                inactive: Swift.Int? = nil,
                standard: Swift.Int? = nil,
                rapid: Swift.Int? = nil,
                blitz: Swift.Int? = nil
            ) {
                self.id = id
                self.name = name
                self.title = title
                self.federation = federation
                self.year = year
                self.inactive = inactive
                self.standard = standard
                self.rapid = rapid
                self.blitz = blitz
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case name
                case title
                case federation
                case year
                case inactive
                case standard
                case rapid
                case blitz
            }
        }
        /// - Remark: Generated from `#/components/schemas/Simul`.
        internal struct Simul: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Simul/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/Simul/host`.
            internal struct hostPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Simul/host/value1`.
                internal var value1: Components.Schemas.LightUser
                /// - Remark: Generated from `#/components/schemas/Simul/host/value2`.
                internal struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/Simul/host/value2/rating`.
                    internal var rating: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/Simul/host/value2/provisional`.
                    internal var provisional: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/Simul/host/value2/gameId`.
                    internal var gameId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/Simul/host/value2/online`.
                    internal var online: Swift.Bool?
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - rating:
                    ///   - provisional:
                    ///   - gameId:
                    ///   - online:
                    internal init(
                        rating: Swift.Int? = nil,
                        provisional: Swift.Bool? = nil,
                        gameId: Swift.String? = nil,
                        online: Swift.Bool? = nil
                    ) {
                        self.rating = rating
                        self.provisional = provisional
                        self.gameId = gameId
                        self.online = online
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case rating
                        case provisional
                        case gameId
                        case online
                    }
                }
                /// - Remark: Generated from `#/components/schemas/Simul/host/value2`.
                internal var value2: Components.Schemas.Simul.hostPayload.Value2Payload
                /// Creates a new `hostPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                internal init(
                    value1: Components.Schemas.LightUser,
                    value2: Components.Schemas.Simul.hostPayload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                internal init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                    value2 = try .init(from: decoder)
                }
                internal func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                    try value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/Simul/host`.
            internal var host: Components.Schemas.Simul.hostPayload
            /// - Remark: Generated from `#/components/schemas/Simul/name`.
            internal var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/Simul/fullName`.
            internal var fullName: Swift.String
            /// - Remark: Generated from `#/components/schemas/Simul/variantsPayload`.
            internal struct variantsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Simul/variantsPayload/key`.
                internal var key: Components.Schemas.VariantKey?
                /// - Remark: Generated from `#/components/schemas/Simul/variantsPayload/icon`.
                internal var icon: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Simul/variantsPayload/name`.
                internal var name: Swift.String?
                /// Creates a new `variantsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - key:
                ///   - icon:
                ///   - name:
                internal init(
                    key: Components.Schemas.VariantKey? = nil,
                    icon: Swift.String? = nil,
                    name: Swift.String? = nil
                ) {
                    self.key = key
                    self.icon = icon
                    self.name = name
                }
                internal enum CodingKeys: String, CodingKey {
                    case key
                    case icon
                    case name
                }
            }
            /// - Remark: Generated from `#/components/schemas/Simul/variants`.
            internal typealias variantsPayload = [Components.Schemas.Simul.variantsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/Simul/variants`.
            internal var variants: Components.Schemas.Simul.variantsPayload
            /// - Remark: Generated from `#/components/schemas/Simul/isCreated`.
            internal var isCreated: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/Simul/isFinished`.
            internal var isFinished: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/Simul/isRunning`.
            internal var isRunning: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/Simul/text`.
            internal var text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Simul/estimatedStartAt`.
            internal var estimatedStartAt: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Simul/startedAt`.
            internal var startedAt: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Simul/finishedAt`.
            internal var finishedAt: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Simul/nbApplicants`.
            internal var nbApplicants: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Simul/nbPairings`.
            internal var nbPairings: Swift.Int
            /// Creates a new `Simul`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - host:
            ///   - name:
            ///   - fullName:
            ///   - variants:
            ///   - isCreated:
            ///   - isFinished:
            ///   - isRunning:
            ///   - text:
            ///   - estimatedStartAt:
            ///   - startedAt:
            ///   - finishedAt:
            ///   - nbApplicants:
            ///   - nbPairings:
            internal init(
                id: Swift.String,
                host: Components.Schemas.Simul.hostPayload,
                name: Swift.String,
                fullName: Swift.String,
                variants: Components.Schemas.Simul.variantsPayload,
                isCreated: Swift.Bool,
                isFinished: Swift.Bool,
                isRunning: Swift.Bool,
                text: Swift.String? = nil,
                estimatedStartAt: Swift.Int? = nil,
                startedAt: Swift.Int? = nil,
                finishedAt: Swift.Int? = nil,
                nbApplicants: Swift.Int,
                nbPairings: Swift.Int
            ) {
                self.id = id
                self.host = host
                self.name = name
                self.fullName = fullName
                self.variants = variants
                self.isCreated = isCreated
                self.isFinished = isFinished
                self.isRunning = isRunning
                self.text = text
                self.estimatedStartAt = estimatedStartAt
                self.startedAt = startedAt
                self.finishedAt = finishedAt
                self.nbApplicants = nbApplicants
                self.nbPairings = nbPairings
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case host
                case name
                case fullName
                case variants
                case isCreated
                case isFinished
                case isRunning
                case text
                case estimatedStartAt
                case startedAt
                case finishedAt
                case nbApplicants
                case nbPairings
            }
        }
        /// - Remark: Generated from `#/components/schemas/Team`.
        internal struct Team: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Team/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/Team/name`.
            internal var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/Team/description`.
            internal var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Team/flair`.
            internal var flair: Components.Schemas.Flair?
            /// - Remark: Generated from `#/components/schemas/Team/leader`.
            internal var leader: Components.Schemas.LightUser?
            /// - Remark: Generated from `#/components/schemas/Team/leaders`.
            internal var leaders: [Components.Schemas.LightUser]?
            /// - Remark: Generated from `#/components/schemas/Team/nbMembers`.
            internal var nbMembers: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Team/open`.
            internal var open: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Team/joined`.
            internal var joined: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Team/requested`.
            internal var requested: Swift.Bool?
            /// Creates a new `Team`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - description:
            ///   - flair:
            ///   - leader:
            ///   - leaders:
            ///   - nbMembers:
            ///   - open:
            ///   - joined:
            ///   - requested:
            internal init(
                id: Swift.String,
                name: Swift.String,
                description: Swift.String? = nil,
                flair: Components.Schemas.Flair? = nil,
                leader: Components.Schemas.LightUser? = nil,
                leaders: [Components.Schemas.LightUser]? = nil,
                nbMembers: Swift.Int? = nil,
                open: Swift.Bool? = nil,
                joined: Swift.Bool? = nil,
                requested: Swift.Bool? = nil
            ) {
                self.id = id
                self.name = name
                self.description = description
                self.flair = flair
                self.leader = leader
                self.leaders = leaders
                self.nbMembers = nbMembers
                self.open = open
                self.joined = joined
                self.requested = requested
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case name
                case description
                case flair
                case leader
                case leaders
                case nbMembers
                case open
                case joined
                case requested
            }
        }
        /// - Remark: Generated from `#/components/schemas/TeamPaginatorJson`.
        internal struct TeamPaginatorJson: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TeamPaginatorJson/currentPage`.
            internal var currentPage: Swift.Double
            /// - Remark: Generated from `#/components/schemas/TeamPaginatorJson/maxPerPage`.
            internal var maxPerPage: Swift.Double
            /// - Remark: Generated from `#/components/schemas/TeamPaginatorJson/currentPageResults`.
            internal var currentPageResults: [Components.Schemas.Team]
            /// - Remark: Generated from `#/components/schemas/TeamPaginatorJson/previousPage`.
            internal var previousPage: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/TeamPaginatorJson/nextPage`.
            internal var nextPage: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/TeamPaginatorJson/nbResults`.
            internal var nbResults: Swift.Double
            /// - Remark: Generated from `#/components/schemas/TeamPaginatorJson/nbPages`.
            internal var nbPages: Swift.Double
            /// Creates a new `TeamPaginatorJson`.
            ///
            /// - Parameters:
            ///   - currentPage:
            ///   - maxPerPage:
            ///   - currentPageResults:
            ///   - previousPage:
            ///   - nextPage:
            ///   - nbResults:
            ///   - nbPages:
            internal init(
                currentPage: Swift.Double,
                maxPerPage: Swift.Double,
                currentPageResults: [Components.Schemas.Team],
                previousPage: Swift.Double? = nil,
                nextPage: Swift.Double? = nil,
                nbResults: Swift.Double,
                nbPages: Swift.Double
            ) {
                self.currentPage = currentPage
                self.maxPerPage = maxPerPage
                self.currentPageResults = currentPageResults
                self.previousPage = previousPage
                self.nextPage = nextPage
                self.nbResults = nbResults
                self.nbPages = nbPages
            }
            internal enum CodingKeys: String, CodingKey {
                case currentPage
                case maxPerPage
                case currentPageResults
                case previousPage
                case nextPage
                case nbResults
                case nbPages
            }
        }
        /// The current state of the arena tournament
        ///
        /// - Remark: Generated from `#/components/schemas/ArenaStatusName`.
        @frozen internal enum ArenaStatusName: String, Codable, Hashable, Sendable {
            case created = "created"
            case started = "started"
            case finished = "finished"
        }
        /// - Remark: Generated from `#/components/schemas/TeamRequest`.
        internal struct TeamRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TeamRequest/teamId`.
            internal var teamId: Swift.String
            /// - Remark: Generated from `#/components/schemas/TeamRequest/userId`.
            internal var userId: Swift.String
            /// - Remark: Generated from `#/components/schemas/TeamRequest/date`.
            internal var date: Swift.Double
            /// - Remark: Generated from `#/components/schemas/TeamRequest/message`.
            internal var message: Swift.String?
            /// Creates a new `TeamRequest`.
            ///
            /// - Parameters:
            ///   - teamId:
            ///   - userId:
            ///   - date:
            ///   - message:
            internal init(
                teamId: Swift.String,
                userId: Swift.String,
                date: Swift.Double,
                message: Swift.String? = nil
            ) {
                self.teamId = teamId
                self.userId = userId
                self.date = date
                self.message = message
            }
            internal enum CodingKeys: String, CodingKey {
                case teamId
                case userId
                case date
                case message
            }
        }
        /// - Remark: Generated from `#/components/schemas/TeamRequestWithUser`.
        internal struct TeamRequestWithUser: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TeamRequestWithUser/request`.
            internal var request: Components.Schemas.TeamRequest
            /// - Remark: Generated from `#/components/schemas/TeamRequestWithUser/user`.
            internal var user: Components.Schemas.User
            /// Creates a new `TeamRequestWithUser`.
            ///
            /// - Parameters:
            ///   - request:
            ///   - user:
            internal init(
                request: Components.Schemas.TeamRequest,
                user: Components.Schemas.User
            ) {
                self.request = request
                self.user = user
            }
            internal enum CodingKeys: String, CodingKey {
                case request
                case user
            }
        }
        /// - Remark: Generated from `#/components/schemas/Crosstable`.
        internal struct Crosstable: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Crosstable/users`.
            internal struct usersPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.Double]
                /// Creates a new `usersPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.Double] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/Crosstable/users`.
            internal var users: Components.Schemas.Crosstable.usersPayload
            /// - Remark: Generated from `#/components/schemas/Crosstable/nbGames`.
            internal var nbGames: Swift.Int
            /// Creates a new `Crosstable`.
            ///
            /// - Parameters:
            ///   - users:
            ///   - nbGames:
            internal init(
                users: Components.Schemas.Crosstable.usersPayload,
                nbGames: Swift.Int
            ) {
                self.users = users
                self.nbGames = nbGames
            }
            internal enum CodingKeys: String, CodingKey {
                case users
                case nbGames
            }
        }
        /// - Remark: Generated from `#/components/schemas/LightUserOnline`.
        internal struct LightUserOnline: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/LightUserOnline/value1`.
            internal var value1: Components.Schemas.LightUser
            /// - Remark: Generated from `#/components/schemas/LightUserOnline/value2`.
            internal struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/LightUserOnline/value2/online`.
                internal var online: Swift.Bool?
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - online:
                internal init(online: Swift.Bool? = nil) {
                    self.online = online
                }
                internal enum CodingKeys: String, CodingKey {
                    case online
                }
            }
            /// - Remark: Generated from `#/components/schemas/LightUserOnline/value2`.
            internal var value2: Components.Schemas.LightUserOnline.Value2Payload
            /// Creates a new `LightUserOnline`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            internal init(
                value1: Components.Schemas.LightUser,
                value2: Components.Schemas.LightUserOnline.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            internal init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            internal func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/UserNote`.
        internal struct UserNote: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UserNote/from`.
            internal var from: Components.Schemas.LightUser?
            /// - Remark: Generated from `#/components/schemas/UserNote/to`.
            internal var to: Components.Schemas.LightUser?
            /// - Remark: Generated from `#/components/schemas/UserNote/text`.
            internal var text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UserNote/date`.
            internal var date: Swift.Int64?
            /// Creates a new `UserNote`.
            ///
            /// - Parameters:
            ///   - from:
            ///   - to:
            ///   - text:
            ///   - date:
            internal init(
                from: Components.Schemas.LightUser? = nil,
                to: Components.Schemas.LightUser? = nil,
                text: Swift.String? = nil,
                date: Swift.Int64? = nil
            ) {
                self.from = from
                self.to = to
                self.text = text
                self.date = date
            }
            internal enum CodingKeys: String, CodingKey {
                case from
                case to
                case text
                case date
            }
        }
        /// - Remark: Generated from `#/components/schemas/GameStatusId`.
        @frozen internal enum GameStatusId: Int, Codable, Hashable, Sendable {
            case _10 = 10
            case _20 = 20
            case _25 = 25
            case _30 = 30
            case _31 = 31
            case _32 = 32
            case _33 = 33
            case _34 = 34
            case _35 = 35
            case _36 = 36
            case _37 = 37
            case _38 = 38
            case _39 = 39
            case _60 = 60
        }
        /// - Remark: Generated from `#/components/schemas/GameStatus`.
        internal struct GameStatus: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GameStatus/id`.
            internal var id: Components.Schemas.GameStatusId
            /// - Remark: Generated from `#/components/schemas/GameStatus/name`.
            internal var name: Components.Schemas.GameStatusName
            /// Creates a new `GameStatus`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            internal init(
                id: Components.Schemas.GameStatusId,
                name: Components.Schemas.GameStatusName
            ) {
                self.id = id
                self.name = name
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case name
            }
        }
        /// - Remark: Generated from `#/components/schemas/GameEventOpponent`.
        @frozen internal enum GameEventOpponent: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GameEventOpponent/case1`.
            internal struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/GameEventOpponent/case1/id`.
                internal var id: Swift.String
                /// - Remark: Generated from `#/components/schemas/GameEventOpponent/case1/username`.
                internal var username: Swift.String
                /// - Remark: Generated from `#/components/schemas/GameEventOpponent/case1/rating`.
                internal var rating: Swift.Int
                /// - Remark: Generated from `#/components/schemas/GameEventOpponent/case1/ratingDiff`.
                internal var ratingDiff: Swift.Int?
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - username:
                ///   - rating:
                ///   - ratingDiff:
                internal init(
                    id: Swift.String,
                    username: Swift.String,
                    rating: Swift.Int,
                    ratingDiff: Swift.Int? = nil
                ) {
                    self.id = id
                    self.username = username
                    self.rating = rating
                    self.ratingDiff = ratingDiff
                }
                internal enum CodingKeys: String, CodingKey {
                    case id
                    case username
                    case rating
                    case ratingDiff
                }
            }
            /// - Remark: Generated from `#/components/schemas/GameEventOpponent/case1`.
            case case1(Components.Schemas.GameEventOpponent.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/GameEventOpponent/case2`.
            internal struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/GameEventOpponent/case2/username`.
                internal var username: Swift.String
                /// AI level, from 1 to 8, where 1 is the weakest and 8 is the strongest.
                ///
                /// - Remark: Generated from `#/components/schemas/GameEventOpponent/case2/ai`.
                internal var ai: Swift.Int
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - username:
                ///   - ai: AI level, from 1 to 8, where 1 is the weakest and 8 is the strongest.
                internal init(
                    username: Swift.String,
                    ai: Swift.Int
                ) {
                    self.username = username
                    self.ai = ai
                }
                internal enum CodingKeys: String, CodingKey {
                    case username
                    case ai
                }
            }
            /// - Remark: Generated from `#/components/schemas/GameEventOpponent/case2`.
            case case2(Components.Schemas.GameEventOpponent.Case2Payload)
            internal init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            internal func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/GameCompat`.
        internal struct GameCompat: Codable, Hashable, Sendable {
            /// Compatible with Bot API
            ///
            /// - Remark: Generated from `#/components/schemas/GameCompat/bot`.
            internal var bot: Swift.Bool?
            /// Compatible with Board API
            ///
            /// - Remark: Generated from `#/components/schemas/GameCompat/board`.
            internal var board: Swift.Bool?
            /// Creates a new `GameCompat`.
            ///
            /// - Parameters:
            ///   - bot: Compatible with Bot API
            ///   - board: Compatible with Board API
            internal init(
                bot: Swift.Bool? = nil,
                board: Swift.Bool? = nil
            ) {
                self.bot = bot
                self.board = board
            }
            internal enum CodingKeys: String, CodingKey {
                case bot
                case board
            }
        }
        /// - Remark: Generated from `#/components/schemas/GameEventInfo`.
        internal struct GameEventInfo: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GameEventInfo/fullId`.
            internal var fullId: Swift.String
            /// - Remark: Generated from `#/components/schemas/GameEventInfo/gameId`.
            internal var gameId: Swift.String
            /// - Remark: Generated from `#/components/schemas/GameEventInfo/fen`.
            internal var fen: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GameEventInfo/color`.
            internal var color: Components.Schemas.GameColor?
            /// - Remark: Generated from `#/components/schemas/GameEventInfo/lastMove`.
            internal var lastMove: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GameEventInfo/source`.
            internal var source: Components.Schemas.GameSource?
            /// - Remark: Generated from `#/components/schemas/GameEventInfo/status`.
            internal var status: Components.Schemas.GameStatus?
            /// - Remark: Generated from `#/components/schemas/GameEventInfo/variant`.
            internal var variant: Components.Schemas.Variant?
            /// - Remark: Generated from `#/components/schemas/GameEventInfo/speed`.
            internal var speed: Components.Schemas.Speed?
            /// - Remark: Generated from `#/components/schemas/GameEventInfo/perf`.
            internal var perf: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GameEventInfo/rated`.
            internal var rated: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/GameEventInfo/hasMoved`.
            internal var hasMoved: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/GameEventInfo/opponent`.
            internal var opponent: Components.Schemas.GameEventOpponent?
            /// - Remark: Generated from `#/components/schemas/GameEventInfo/isMyTurn`.
            internal var isMyTurn: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/GameEventInfo/secondsLeft`.
            internal var secondsLeft: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/GameEventInfo/winner`.
            internal var winner: Components.Schemas.GameColor?
            /// - Remark: Generated from `#/components/schemas/GameEventInfo/ratingDiff`.
            internal var ratingDiff: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/GameEventInfo/compat`.
            internal var compat: Components.Schemas.GameCompat?
            /// - Remark: Generated from `#/components/schemas/GameEventInfo/id`.
            internal var id: Swift.String?
            /// Creates a new `GameEventInfo`.
            ///
            /// - Parameters:
            ///   - fullId:
            ///   - gameId:
            ///   - fen:
            ///   - color:
            ///   - lastMove:
            ///   - source:
            ///   - status:
            ///   - variant:
            ///   - speed:
            ///   - perf:
            ///   - rated:
            ///   - hasMoved:
            ///   - opponent:
            ///   - isMyTurn:
            ///   - secondsLeft:
            ///   - winner:
            ///   - ratingDiff:
            ///   - compat:
            ///   - id:
            internal init(
                fullId: Swift.String,
                gameId: Swift.String,
                fen: Swift.String? = nil,
                color: Components.Schemas.GameColor? = nil,
                lastMove: Swift.String? = nil,
                source: Components.Schemas.GameSource? = nil,
                status: Components.Schemas.GameStatus? = nil,
                variant: Components.Schemas.Variant? = nil,
                speed: Components.Schemas.Speed? = nil,
                perf: Swift.String? = nil,
                rated: Swift.Bool? = nil,
                hasMoved: Swift.Bool? = nil,
                opponent: Components.Schemas.GameEventOpponent? = nil,
                isMyTurn: Swift.Bool? = nil,
                secondsLeft: Swift.Int? = nil,
                winner: Components.Schemas.GameColor? = nil,
                ratingDiff: Swift.Int? = nil,
                compat: Components.Schemas.GameCompat? = nil,
                id: Swift.String? = nil
            ) {
                self.fullId = fullId
                self.gameId = gameId
                self.fen = fen
                self.color = color
                self.lastMove = lastMove
                self.source = source
                self.status = status
                self.variant = variant
                self.speed = speed
                self.perf = perf
                self.rated = rated
                self.hasMoved = hasMoved
                self.opponent = opponent
                self.isMyTurn = isMyTurn
                self.secondsLeft = secondsLeft
                self.winner = winner
                self.ratingDiff = ratingDiff
                self.compat = compat
                self.id = id
            }
            internal enum CodingKeys: String, CodingKey {
                case fullId
                case gameId
                case fen
                case color
                case lastMove
                case source
                case status
                case variant
                case speed
                case perf
                case rated
                case hasMoved
                case opponent
                case isMyTurn
                case secondsLeft
                case winner
                case ratingDiff
                case compat
                case id
            }
        }
        /// - Remark: Generated from `#/components/schemas/GameStartEvent`.
        internal struct GameStartEvent: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GameStartEvent/type`.
            @frozen internal enum _typePayload: String, Codable, Hashable, Sendable {
                case gameStart = "gameStart"
            }
            /// - Remark: Generated from `#/components/schemas/GameStartEvent/type`.
            internal var _type: Components.Schemas.GameStartEvent._typePayload?
            /// - Remark: Generated from `#/components/schemas/GameStartEvent/game`.
            internal var game: Components.Schemas.GameEventInfo?
            /// Creates a new `GameStartEvent`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - game:
            internal init(
                _type: Components.Schemas.GameStartEvent._typePayload? = nil,
                game: Components.Schemas.GameEventInfo? = nil
            ) {
                self._type = _type
                self.game = game
            }
            internal enum CodingKeys: String, CodingKey {
                case _type = "type"
                case game
            }
        }
        /// - Remark: Generated from `#/components/schemas/GameFinishEvent`.
        internal struct GameFinishEvent: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GameFinishEvent/type`.
            @frozen internal enum _typePayload: String, Codable, Hashable, Sendable {
                case gameFinish = "gameFinish"
            }
            /// - Remark: Generated from `#/components/schemas/GameFinishEvent/type`.
            internal var _type: Components.Schemas.GameFinishEvent._typePayload?
            /// - Remark: Generated from `#/components/schemas/GameFinishEvent/game`.
            internal var game: Components.Schemas.GameEventInfo?
            /// Creates a new `GameFinishEvent`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - game:
            internal init(
                _type: Components.Schemas.GameFinishEvent._typePayload? = nil,
                game: Components.Schemas.GameEventInfo? = nil
            ) {
                self._type = _type
                self.game = game
            }
            internal enum CodingKeys: String, CodingKey {
                case _type = "type"
                case game
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChallengeStatus`.
        @frozen internal enum ChallengeStatus: String, Codable, Hashable, Sendable {
            case created = "created"
            case offline = "offline"
            case canceled = "canceled"
            case declined = "declined"
            case accepted = "accepted"
        }
        /// - Remark: Generated from `#/components/schemas/ChallengeUser`.
        internal struct ChallengeUser: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChallengeUser/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/ChallengeUser/name`.
            internal var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/ChallengeUser/rating`.
            internal var rating: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/ChallengeUser/flair`.
            internal var flair: Components.Schemas.Flair?
            /// - Remark: Generated from `#/components/schemas/ChallengeUser/patron`.
            internal var patron: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ChallengeUser/provisional`.
            internal var provisional: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ChallengeUser/online`.
            internal var online: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ChallengeUser/lag`.
            internal var lag: Swift.Double?
            /// Creates a new `ChallengeUser`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - rating:
            ///   - flair:
            ///   - patron:
            ///   - provisional:
            ///   - online:
            ///   - lag:
            internal init(
                id: Swift.String,
                name: Swift.String,
                rating: Swift.Double? = nil,
                flair: Components.Schemas.Flair? = nil,
                patron: Swift.Bool? = nil,
                provisional: Swift.Bool? = nil,
                online: Swift.Bool? = nil,
                lag: Swift.Double? = nil
            ) {
                self.id = id
                self.name = name
                self.rating = rating
                self.flair = flair
                self.patron = patron
                self.provisional = provisional
                self.online = online
                self.lag = lag
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case name
                case rating
                case flair
                case patron
                case provisional
                case online
                case lag
            }
        }
        /// - Remark: Generated from `#/components/schemas/TimeControl`.
        @frozen internal enum TimeControl: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TimeControl/case1`.
            internal struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/TimeControl/case1/type`.
                @frozen internal enum _typePayload: String, Codable, Hashable, Sendable {
                    case clock = "clock"
                }
                /// - Remark: Generated from `#/components/schemas/TimeControl/case1/type`.
                internal var _type: Components.Schemas.TimeControl.Case1Payload._typePayload?
                /// - Remark: Generated from `#/components/schemas/TimeControl/case1/limit`.
                internal var limit: Swift.Double?
                /// - Remark: Generated from `#/components/schemas/TimeControl/case1/increment`.
                internal var increment: Swift.Double?
                /// - Remark: Generated from `#/components/schemas/TimeControl/case1/show`.
                internal var show: Swift.String?
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - limit:
                ///   - increment:
                ///   - show:
                internal init(
                    _type: Components.Schemas.TimeControl.Case1Payload._typePayload? = nil,
                    limit: Swift.Double? = nil,
                    increment: Swift.Double? = nil,
                    show: Swift.String? = nil
                ) {
                    self._type = _type
                    self.limit = limit
                    self.increment = increment
                    self.show = show
                }
                internal enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case limit
                    case increment
                    case show
                }
                internal init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    _type = try container.decodeIfPresent(
                        Components.Schemas.TimeControl.Case1Payload._typePayload.self,
                        forKey: ._type
                    )
                    limit = try container.decodeIfPresent(
                        Swift.Double.self,
                        forKey: .limit
                    )
                    increment = try container.decodeIfPresent(
                        Swift.Double.self,
                        forKey: .increment
                    )
                    show = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .show
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "type",
                        "limit",
                        "increment",
                        "show"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/TimeControl/case1`.
            case case1(Components.Schemas.TimeControl.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/TimeControl/case2`.
            internal struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/TimeControl/case2/type`.
                @frozen internal enum _typePayload: String, Codable, Hashable, Sendable {
                    case correspondence = "correspondence"
                }
                /// - Remark: Generated from `#/components/schemas/TimeControl/case2/type`.
                internal var _type: Components.Schemas.TimeControl.Case2Payload._typePayload?
                /// - Remark: Generated from `#/components/schemas/TimeControl/case2/daysPerTurn`.
                internal var daysPerTurn: Swift.Double?
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - daysPerTurn:
                internal init(
                    _type: Components.Schemas.TimeControl.Case2Payload._typePayload? = nil,
                    daysPerTurn: Swift.Double? = nil
                ) {
                    self._type = _type
                    self.daysPerTurn = daysPerTurn
                }
                internal enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case daysPerTurn
                }
                internal init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    _type = try container.decodeIfPresent(
                        Components.Schemas.TimeControl.Case2Payload._typePayload.self,
                        forKey: ._type
                    )
                    daysPerTurn = try container.decodeIfPresent(
                        Swift.Double.self,
                        forKey: .daysPerTurn
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "type",
                        "daysPerTurn"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/TimeControl/case2`.
            case case2(Components.Schemas.TimeControl.Case2Payload)
            /// - Remark: Generated from `#/components/schemas/TimeControl/case3`.
            internal struct Case3Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/TimeControl/case3/type`.
                @frozen internal enum _typePayload: String, Codable, Hashable, Sendable {
                    case unlimited = "unlimited"
                }
                /// - Remark: Generated from `#/components/schemas/TimeControl/case3/type`.
                internal var _type: Components.Schemas.TimeControl.Case3Payload._typePayload?
                /// Creates a new `Case3Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                internal init(_type: Components.Schemas.TimeControl.Case3Payload._typePayload? = nil) {
                    self._type = _type
                }
                internal enum CodingKeys: String, CodingKey {
                    case _type = "type"
                }
                internal init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    _type = try container.decodeIfPresent(
                        Components.Schemas.TimeControl.Case3Payload._typePayload.self,
                        forKey: ._type
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "type"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/TimeControl/case3`.
            case case3(Components.Schemas.TimeControl.Case3Payload)
            internal init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case3(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            internal func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                case let .case3(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChallengeJson`.
        internal struct ChallengeJson: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChallengeJson/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/ChallengeJson/url`.
            internal var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/ChallengeJson/status`.
            internal var status: Components.Schemas.ChallengeStatus
            /// - Remark: Generated from `#/components/schemas/ChallengeJson/challenger`.
            internal var challenger: Components.Schemas.ChallengeUser
            /// - Remark: Generated from `#/components/schemas/ChallengeJson/variant`.
            internal var variant: Components.Schemas.Variant
            /// - Remark: Generated from `#/components/schemas/ChallengeJson/rated`.
            internal var rated: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ChallengeJson/speed`.
            internal var speed: Components.Schemas.Speed
            /// - Remark: Generated from `#/components/schemas/ChallengeJson/timeControl`.
            internal var timeControl: Components.Schemas.TimeControl
            /// - Remark: Generated from `#/components/schemas/ChallengeJson/color`.
            @frozen internal enum colorPayload: String, Codable, Hashable, Sendable {
                case white = "white"
                case black = "black"
                case random = "random"
            }
            /// - Remark: Generated from `#/components/schemas/ChallengeJson/color`.
            internal var color: Components.Schemas.ChallengeJson.colorPayload
            /// - Remark: Generated from `#/components/schemas/ChallengeJson/finalColor`.
            internal var finalColor: Components.Schemas.GameColor?
            /// - Remark: Generated from `#/components/schemas/ChallengeJson/perf`.
            internal struct perfPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ChallengeJson/perf/icon`.
                internal var icon: Swift.String?
                /// - Remark: Generated from `#/components/schemas/ChallengeJson/perf/name`.
                internal var name: Swift.String?
                /// Creates a new `perfPayload`.
                ///
                /// - Parameters:
                ///   - icon:
                ///   - name:
                internal init(
                    icon: Swift.String? = nil,
                    name: Swift.String? = nil
                ) {
                    self.icon = icon
                    self.name = name
                }
                internal enum CodingKeys: String, CodingKey {
                    case icon
                    case name
                }
            }
            /// - Remark: Generated from `#/components/schemas/ChallengeJson/perf`.
            internal var perf: Components.Schemas.ChallengeJson.perfPayload
            /// - Remark: Generated from `#/components/schemas/ChallengeJson/direction`.
            @frozen internal enum directionPayload: String, Codable, Hashable, Sendable {
                case _in = "in"
                case out = "out"
            }
            /// - Remark: Generated from `#/components/schemas/ChallengeJson/direction`.
            internal var direction: Components.Schemas.ChallengeJson.directionPayload?
            /// - Remark: Generated from `#/components/schemas/ChallengeJson/initialFen`.
            internal var initialFen: Swift.String?
            /// Creates a new `ChallengeJson`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - url:
            ///   - status:
            ///   - challenger:
            ///   - variant:
            ///   - rated:
            ///   - speed:
            ///   - timeControl:
            ///   - color:
            ///   - finalColor:
            ///   - perf:
            ///   - direction:
            ///   - initialFen:
            internal init(
                id: Swift.String,
                url: Swift.String,
                status: Components.Schemas.ChallengeStatus,
                challenger: Components.Schemas.ChallengeUser,
                variant: Components.Schemas.Variant,
                rated: Swift.Bool,
                speed: Components.Schemas.Speed,
                timeControl: Components.Schemas.TimeControl,
                color: Components.Schemas.ChallengeJson.colorPayload,
                finalColor: Components.Schemas.GameColor? = nil,
                perf: Components.Schemas.ChallengeJson.perfPayload,
                direction: Components.Schemas.ChallengeJson.directionPayload? = nil,
                initialFen: Swift.String? = nil
            ) {
                self.id = id
                self.url = url
                self.status = status
                self.challenger = challenger
                self.variant = variant
                self.rated = rated
                self.speed = speed
                self.timeControl = timeControl
                self.color = color
                self.finalColor = finalColor
                self.perf = perf
                self.direction = direction
                self.initialFen = initialFen
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case url
                case status
                case challenger
                case variant
                case rated
                case speed
                case timeControl
                case color
                case finalColor
                case perf
                case direction
                case initialFen
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChallengeEvent`.
        internal struct ChallengeEvent: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChallengeEvent/type`.
            @frozen internal enum _typePayload: String, Codable, Hashable, Sendable {
                case challenge = "challenge"
            }
            /// - Remark: Generated from `#/components/schemas/ChallengeEvent/type`.
            internal var _type: Components.Schemas.ChallengeEvent._typePayload
            /// - Remark: Generated from `#/components/schemas/ChallengeEvent/challenge`.
            internal var challenge: Components.Schemas.ChallengeJson
            /// - Remark: Generated from `#/components/schemas/ChallengeEvent/compat`.
            internal var compat: Components.Schemas.GameCompat?
            /// Creates a new `ChallengeEvent`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - challenge:
            ///   - compat:
            internal init(
                _type: Components.Schemas.ChallengeEvent._typePayload,
                challenge: Components.Schemas.ChallengeJson,
                compat: Components.Schemas.GameCompat? = nil
            ) {
                self._type = _type
                self.challenge = challenge
                self.compat = compat
            }
            internal enum CodingKeys: String, CodingKey {
                case _type = "type"
                case challenge
                case compat
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChallengeCanceledEvent`.
        internal struct ChallengeCanceledEvent: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChallengeCanceledEvent/type`.
            @frozen internal enum _typePayload: String, Codable, Hashable, Sendable {
                case challengeCanceled = "challengeCanceled"
            }
            /// - Remark: Generated from `#/components/schemas/ChallengeCanceledEvent/type`.
            internal var _type: Components.Schemas.ChallengeCanceledEvent._typePayload?
            /// - Remark: Generated from `#/components/schemas/ChallengeCanceledEvent/challenge`.
            internal var challenge: Components.Schemas.ChallengeJson?
            /// Creates a new `ChallengeCanceledEvent`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - challenge:
            internal init(
                _type: Components.Schemas.ChallengeCanceledEvent._typePayload? = nil,
                challenge: Components.Schemas.ChallengeJson? = nil
            ) {
                self._type = _type
                self.challenge = challenge
            }
            internal enum CodingKeys: String, CodingKey {
                case _type = "type"
                case challenge
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChallengeDeclinedJson`.
        internal struct ChallengeDeclinedJson: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChallengeDeclinedJson/value1`.
            internal var value1: Components.Schemas.ChallengeJson
            /// Creates a new `ChallengeDeclinedJson`.
            ///
            /// - Parameters:
            ///   - value1:
            internal init(value1: Components.Schemas.ChallengeJson) {
                self.value1 = value1
            }
            internal init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
            }
            internal func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChallengeDeclinedEvent`.
        internal struct ChallengeDeclinedEvent: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChallengeDeclinedEvent/type`.
            @frozen internal enum _typePayload: String, Codable, Hashable, Sendable {
                case challengeDeclined = "challengeDeclined"
            }
            /// - Remark: Generated from `#/components/schemas/ChallengeDeclinedEvent/type`.
            internal var _type: Components.Schemas.ChallengeDeclinedEvent._typePayload?
            /// - Remark: Generated from `#/components/schemas/ChallengeDeclinedEvent/challenge`.
            internal var challenge: Components.Schemas.ChallengeDeclinedJson?
            /// Creates a new `ChallengeDeclinedEvent`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - challenge:
            internal init(
                _type: Components.Schemas.ChallengeDeclinedEvent._typePayload? = nil,
                challenge: Components.Schemas.ChallengeDeclinedJson? = nil
            ) {
                self._type = _type
                self.challenge = challenge
            }
            internal enum CodingKeys: String, CodingKey {
                case _type = "type"
                case challenge
            }
        }
        /// - Remark: Generated from `#/components/schemas/GameEventPlayer`.
        internal struct GameEventPlayer: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GameEventPlayer/aiLevel`.
            internal var aiLevel: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/GameEventPlayer/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/GameEventPlayer/name`.
            internal var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/GameEventPlayer/rating`.
            internal var rating: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/GameEventPlayer/provisional`.
            internal var provisional: Swift.Bool?
            /// Creates a new `GameEventPlayer`.
            ///
            /// - Parameters:
            ///   - aiLevel:
            ///   - id:
            ///   - name:
            ///   - rating:
            ///   - provisional:
            internal init(
                aiLevel: Swift.Int? = nil,
                id: Swift.String,
                name: Swift.String,
                rating: Swift.Int? = nil,
                provisional: Swift.Bool? = nil
            ) {
                self.aiLevel = aiLevel
                self.id = id
                self.name = name
                self.rating = rating
                self.provisional = provisional
            }
            internal enum CodingKeys: String, CodingKey {
                case aiLevel
                case id
                case name
                case rating
                case provisional
            }
        }
        /// - Remark: Generated from `#/components/schemas/GameStateEvent`.
        internal struct GameStateEvent: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GameStateEvent/type`.
            @frozen internal enum _typePayload: String, Codable, Hashable, Sendable {
                case gameState = "gameState"
            }
            /// - Remark: Generated from `#/components/schemas/GameStateEvent/type`.
            internal var _type: Components.Schemas.GameStateEvent._typePayload
            /// Current moves in UCI format
            ///
            /// - Remark: Generated from `#/components/schemas/GameStateEvent/moves`.
            internal var moves: Swift.String
            /// Integer of milliseconds White has left on the clock
            ///
            /// - Remark: Generated from `#/components/schemas/GameStateEvent/wtime`.
            internal var wtime: Swift.Int
            /// Integer of milliseconds Black has left on the clock
            ///
            /// - Remark: Generated from `#/components/schemas/GameStateEvent/btime`.
            internal var btime: Swift.Int
            /// Integer of White Fisher increment.
            ///
            /// - Remark: Generated from `#/components/schemas/GameStateEvent/winc`.
            internal var winc: Swift.Int
            /// Integer of Black Fisher increment.
            ///
            /// - Remark: Generated from `#/components/schemas/GameStateEvent/binc`.
            internal var binc: Swift.Int
            /// - Remark: Generated from `#/components/schemas/GameStateEvent/status`.
            internal var status: Components.Schemas.GameStatusName
            /// Color of the winner, if any
            ///
            /// - Remark: Generated from `#/components/schemas/GameStateEvent/winner`.
            internal var winner: Components.Schemas.GameColor?
            /// true if white is offering draw, else omitted
            ///
            /// - Remark: Generated from `#/components/schemas/GameStateEvent/wdraw`.
            internal var wdraw: Swift.Bool?
            /// true if black is offering draw, else omitted
            ///
            /// - Remark: Generated from `#/components/schemas/GameStateEvent/bdraw`.
            internal var bdraw: Swift.Bool?
            /// true if white is proposing takeback, else omitted
            ///
            /// - Remark: Generated from `#/components/schemas/GameStateEvent/wtakeback`.
            internal var wtakeback: Swift.Bool?
            /// true if black is proposing takeback, else omitted
            ///
            /// - Remark: Generated from `#/components/schemas/GameStateEvent/btakeback`.
            internal var btakeback: Swift.Bool?
            /// Creates a new `GameStateEvent`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - moves: Current moves in UCI format
            ///   - wtime: Integer of milliseconds White has left on the clock
            ///   - btime: Integer of milliseconds Black has left on the clock
            ///   - winc: Integer of White Fisher increment.
            ///   - binc: Integer of Black Fisher increment.
            ///   - status:
            ///   - winner: Color of the winner, if any
            ///   - wdraw: true if white is offering draw, else omitted
            ///   - bdraw: true if black is offering draw, else omitted
            ///   - wtakeback: true if white is proposing takeback, else omitted
            ///   - btakeback: true if black is proposing takeback, else omitted
            internal init(
                _type: Components.Schemas.GameStateEvent._typePayload,
                moves: Swift.String,
                wtime: Swift.Int,
                btime: Swift.Int,
                winc: Swift.Int,
                binc: Swift.Int,
                status: Components.Schemas.GameStatusName,
                winner: Components.Schemas.GameColor? = nil,
                wdraw: Swift.Bool? = nil,
                bdraw: Swift.Bool? = nil,
                wtakeback: Swift.Bool? = nil,
                btakeback: Swift.Bool? = nil
            ) {
                self._type = _type
                self.moves = moves
                self.wtime = wtime
                self.btime = btime
                self.winc = winc
                self.binc = binc
                self.status = status
                self.winner = winner
                self.wdraw = wdraw
                self.bdraw = bdraw
                self.wtakeback = wtakeback
                self.btakeback = btakeback
            }
            internal enum CodingKeys: String, CodingKey {
                case _type = "type"
                case moves
                case wtime
                case btime
                case winc
                case binc
                case status
                case winner
                case wdraw
                case bdraw
                case wtakeback
                case btakeback
            }
        }
        /// - Remark: Generated from `#/components/schemas/GameFullEvent`.
        internal struct GameFullEvent: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GameFullEvent/type`.
            @frozen internal enum _typePayload: String, Codable, Hashable, Sendable {
                case gameFull = "gameFull"
            }
            /// - Remark: Generated from `#/components/schemas/GameFullEvent/type`.
            internal var _type: Components.Schemas.GameFullEvent._typePayload
            /// - Remark: Generated from `#/components/schemas/GameFullEvent/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/GameFullEvent/variant`.
            internal var variant: Components.Schemas.Variant
            /// - Remark: Generated from `#/components/schemas/GameFullEvent/clock`.
            internal struct clockPayload: Codable, Hashable, Sendable {
                /// Initial time in milliseconds
                ///
                /// - Remark: Generated from `#/components/schemas/GameFullEvent/clock/initial`.
                internal var initial: Swift.Int64?
                /// Increment time in milliseconds
                ///
                /// - Remark: Generated from `#/components/schemas/GameFullEvent/clock/increment`.
                internal var increment: Swift.Int64?
                /// Creates a new `clockPayload`.
                ///
                /// - Parameters:
                ///   - initial: Initial time in milliseconds
                ///   - increment: Increment time in milliseconds
                internal init(
                    initial: Swift.Int64? = nil,
                    increment: Swift.Int64? = nil
                ) {
                    self.initial = initial
                    self.increment = increment
                }
                internal enum CodingKeys: String, CodingKey {
                    case initial
                    case increment
                }
            }
            /// - Remark: Generated from `#/components/schemas/GameFullEvent/clock`.
            internal var clock: Components.Schemas.GameFullEvent.clockPayload?
            /// - Remark: Generated from `#/components/schemas/GameFullEvent/speed`.
            internal var speed: Components.Schemas.Speed
            /// - Remark: Generated from `#/components/schemas/GameFullEvent/perf`.
            internal struct perfPayload: Codable, Hashable, Sendable {
                /// Translated perf name (e.g. "Classical" or "Blitz")
                ///
                /// - Remark: Generated from `#/components/schemas/GameFullEvent/perf/name`.
                internal var name: Swift.String?
                /// Creates a new `perfPayload`.
                ///
                /// - Parameters:
                ///   - name: Translated perf name (e.g. "Classical" or "Blitz")
                internal init(name: Swift.String? = nil) {
                    self.name = name
                }
                internal enum CodingKeys: String, CodingKey {
                    case name
                }
            }
            /// - Remark: Generated from `#/components/schemas/GameFullEvent/perf`.
            internal var perf: Components.Schemas.GameFullEvent.perfPayload
            /// - Remark: Generated from `#/components/schemas/GameFullEvent/rated`.
            internal var rated: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/GameFullEvent/createdAt`.
            internal var createdAt: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/GameFullEvent/white`.
            internal var white: Components.Schemas.GameEventPlayer
            /// - Remark: Generated from `#/components/schemas/GameFullEvent/black`.
            internal var black: Components.Schemas.GameEventPlayer
            /// - Remark: Generated from `#/components/schemas/GameFullEvent/initialFen`.
            internal var initialFen: Swift.String
            /// - Remark: Generated from `#/components/schemas/GameFullEvent/state`.
            internal var state: Components.Schemas.GameStateEvent
            /// If the game is correspondence
            ///
            /// - Remark: Generated from `#/components/schemas/GameFullEvent/daysPerTurn`.
            internal var daysPerTurn: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/GameFullEvent/tournamentId`.
            internal var tournamentId: Swift.String?
            /// Creates a new `GameFullEvent`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - id:
            ///   - variant:
            ///   - clock:
            ///   - speed:
            ///   - perf:
            ///   - rated:
            ///   - createdAt:
            ///   - white:
            ///   - black:
            ///   - initialFen:
            ///   - state:
            ///   - daysPerTurn: If the game is correspondence
            ///   - tournamentId:
            internal init(
                _type: Components.Schemas.GameFullEvent._typePayload,
                id: Swift.String,
                variant: Components.Schemas.Variant,
                clock: Components.Schemas.GameFullEvent.clockPayload? = nil,
                speed: Components.Schemas.Speed,
                perf: Components.Schemas.GameFullEvent.perfPayload,
                rated: Swift.Bool,
                createdAt: Swift.Int64,
                white: Components.Schemas.GameEventPlayer,
                black: Components.Schemas.GameEventPlayer,
                initialFen: Swift.String,
                state: Components.Schemas.GameStateEvent,
                daysPerTurn: Swift.Int? = nil,
                tournamentId: Swift.String? = nil
            ) {
                self._type = _type
                self.id = id
                self.variant = variant
                self.clock = clock
                self.speed = speed
                self.perf = perf
                self.rated = rated
                self.createdAt = createdAt
                self.white = white
                self.black = black
                self.initialFen = initialFen
                self.state = state
                self.daysPerTurn = daysPerTurn
                self.tournamentId = tournamentId
            }
            internal enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case variant
                case clock
                case speed
                case perf
                case rated
                case createdAt
                case white
                case black
                case initialFen
                case state
                case daysPerTurn
                case tournamentId
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatLineEvent`.
        internal struct ChatLineEvent: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChatLineEvent/type`.
            @frozen internal enum _typePayload: String, Codable, Hashable, Sendable {
                case chatLine = "chatLine"
            }
            /// - Remark: Generated from `#/components/schemas/ChatLineEvent/type`.
            internal var _type: Components.Schemas.ChatLineEvent._typePayload
            /// - Remark: Generated from `#/components/schemas/ChatLineEvent/room`.
            @frozen internal enum roomPayload: String, Codable, Hashable, Sendable {
                case player = "player"
                case spectator = "spectator"
            }
            /// - Remark: Generated from `#/components/schemas/ChatLineEvent/room`.
            internal var room: Components.Schemas.ChatLineEvent.roomPayload
            /// - Remark: Generated from `#/components/schemas/ChatLineEvent/username`.
            internal var username: Swift.String
            /// - Remark: Generated from `#/components/schemas/ChatLineEvent/text`.
            internal var text: Swift.String
            /// Creates a new `ChatLineEvent`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - room:
            ///   - username:
            ///   - text:
            internal init(
                _type: Components.Schemas.ChatLineEvent._typePayload,
                room: Components.Schemas.ChatLineEvent.roomPayload,
                username: Swift.String,
                text: Swift.String
            ) {
                self._type = _type
                self.room = room
                self.username = username
                self.text = text
            }
            internal enum CodingKeys: String, CodingKey {
                case _type = "type"
                case room
                case username
                case text
            }
        }
        /// - Remark: Generated from `#/components/schemas/OpponentGoneEvent`.
        internal struct OpponentGoneEvent: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OpponentGoneEvent/type`.
            @frozen internal enum _typePayload: String, Codable, Hashable, Sendable {
                case opponentGone = "opponentGone"
            }
            /// - Remark: Generated from `#/components/schemas/OpponentGoneEvent/type`.
            internal var _type: Components.Schemas.OpponentGoneEvent._typePayload
            /// - Remark: Generated from `#/components/schemas/OpponentGoneEvent/gone`.
            internal var gone: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/OpponentGoneEvent/claimWinInSeconds`.
            internal var claimWinInSeconds: Swift.Int?
            /// Creates a new `OpponentGoneEvent`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - gone:
            ///   - claimWinInSeconds:
            internal init(
                _type: Components.Schemas.OpponentGoneEvent._typePayload,
                gone: Swift.Bool,
                claimWinInSeconds: Swift.Int? = nil
            ) {
                self._type = _type
                self.gone = gone
                self.claimWinInSeconds = claimWinInSeconds
            }
            internal enum CodingKeys: String, CodingKey {
                case _type = "type"
                case gone
                case claimWinInSeconds
            }
        }
        /// - Remark: Generated from `#/components/schemas/GameChat`.
        internal struct GameChatPayload: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GameChat/text`.
            internal var text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/GameChat/user`.
            internal var user: Swift.String?
            /// Creates a new `GameChatPayload`.
            ///
            /// - Parameters:
            ///   - text:
            ///   - user:
            internal init(
                text: Swift.String? = nil,
                user: Swift.String? = nil
            ) {
                self.text = text
                self.user = user
            }
            internal enum CodingKeys: String, CodingKey {
                case text
                case user
            }
        }
        /// - Remark: Generated from `#/components/schemas/GameChat`.
        internal typealias GameChat = [Components.Schemas.GameChatPayload]
        /// - Remark: Generated from `#/components/schemas/ChallengeOpenJson`.
        internal struct ChallengeOpenJson: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChallengeOpenJson/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/ChallengeOpenJson/url`.
            internal var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/ChallengeOpenJson/status`.
            internal var status: Components.Schemas.ChallengeStatus
            /// - Remark: Generated from `#/components/schemas/ChallengeOpenJson/variant`.
            internal var variant: Components.Schemas.Variant
            /// - Remark: Generated from `#/components/schemas/ChallengeOpenJson/rated`.
            internal var rated: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ChallengeOpenJson/speed`.
            internal var speed: Components.Schemas.Speed
            /// - Remark: Generated from `#/components/schemas/ChallengeOpenJson/timeControl`.
            internal var timeControl: Components.Schemas.TimeControl
            /// - Remark: Generated from `#/components/schemas/ChallengeOpenJson/color`.
            @frozen internal enum colorPayload: String, Codable, Hashable, Sendable {
                case white = "white"
                case black = "black"
                case random = "random"
            }
            /// - Remark: Generated from `#/components/schemas/ChallengeOpenJson/color`.
            internal var color: Components.Schemas.ChallengeOpenJson.colorPayload
            /// - Remark: Generated from `#/components/schemas/ChallengeOpenJson/finalColor`.
            internal var finalColor: Components.Schemas.GameColor?
            /// - Remark: Generated from `#/components/schemas/ChallengeOpenJson/perf`.
            internal struct perfPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ChallengeOpenJson/perf/icon`.
                internal var icon: Swift.String?
                /// - Remark: Generated from `#/components/schemas/ChallengeOpenJson/perf/name`.
                internal var name: Swift.String?
                /// Creates a new `perfPayload`.
                ///
                /// - Parameters:
                ///   - icon:
                ///   - name:
                internal init(
                    icon: Swift.String? = nil,
                    name: Swift.String? = nil
                ) {
                    self.icon = icon
                    self.name = name
                }
                internal enum CodingKeys: String, CodingKey {
                    case icon
                    case name
                }
            }
            /// - Remark: Generated from `#/components/schemas/ChallengeOpenJson/perf`.
            internal var perf: Components.Schemas.ChallengeOpenJson.perfPayload
            /// - Remark: Generated from `#/components/schemas/ChallengeOpenJson/initialFen`.
            internal var initialFen: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChallengeOpenJson/urlWhite`.
            internal var urlWhite: Swift.String
            /// - Remark: Generated from `#/components/schemas/ChallengeOpenJson/urlBlack`.
            internal var urlBlack: Swift.String
            /// - Remark: Generated from `#/components/schemas/ChallengeOpenJson/open`.
            internal struct openPayload: Codable, Hashable, Sendable {
                /// An optional array of two user ids. If set, only these users will be allowed to join the game. The first username gets the white pieces.
                ///
                /// - Remark: Generated from `#/components/schemas/ChallengeOpenJson/open/userIds`.
                internal var userIds: [Swift.String]?
                /// Creates a new `openPayload`.
                ///
                /// - Parameters:
                ///   - userIds: An optional array of two user ids. If set, only these users will be allowed to join the game. The first username gets the white pieces.
                internal init(userIds: [Swift.String]? = nil) {
                    self.userIds = userIds
                }
                internal enum CodingKeys: String, CodingKey {
                    case userIds
                }
            }
            /// - Remark: Generated from `#/components/schemas/ChallengeOpenJson/open`.
            internal var open: Components.Schemas.ChallengeOpenJson.openPayload
            /// Creates a new `ChallengeOpenJson`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - url:
            ///   - status:
            ///   - variant:
            ///   - rated:
            ///   - speed:
            ///   - timeControl:
            ///   - color:
            ///   - finalColor:
            ///   - perf:
            ///   - initialFen:
            ///   - urlWhite:
            ///   - urlBlack:
            ///   - open:
            internal init(
                id: Swift.String,
                url: Swift.String,
                status: Components.Schemas.ChallengeStatus,
                variant: Components.Schemas.Variant,
                rated: Swift.Bool,
                speed: Components.Schemas.Speed,
                timeControl: Components.Schemas.TimeControl,
                color: Components.Schemas.ChallengeOpenJson.colorPayload,
                finalColor: Components.Schemas.GameColor? = nil,
                perf: Components.Schemas.ChallengeOpenJson.perfPayload,
                initialFen: Swift.String? = nil,
                urlWhite: Swift.String,
                urlBlack: Swift.String,
                open: Components.Schemas.ChallengeOpenJson.openPayload
            ) {
                self.id = id
                self.url = url
                self.status = status
                self.variant = variant
                self.rated = rated
                self.speed = speed
                self.timeControl = timeControl
                self.color = color
                self.finalColor = finalColor
                self.perf = perf
                self.initialFen = initialFen
                self.urlWhite = urlWhite
                self.urlBlack = urlBlack
                self.open = open
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case url
                case status
                case variant
                case rated
                case speed
                case timeControl
                case color
                case finalColor
                case perf
                case initialFen
                case urlWhite
                case urlBlack
                case open
            }
        }
        /// - Remark: Generated from `#/components/schemas/BulkPairing`.
        internal struct BulkPairing: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BulkPairing/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/BulkPairing/gamesPayload`.
            internal struct gamesPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BulkPairing/gamesPayload/id`.
                internal var id: Swift.String?
                /// - Remark: Generated from `#/components/schemas/BulkPairing/gamesPayload/black`.
                internal var black: Swift.String?
                /// - Remark: Generated from `#/components/schemas/BulkPairing/gamesPayload/white`.
                internal var white: Swift.String?
                /// Creates a new `gamesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - black:
                ///   - white:
                internal init(
                    id: Swift.String? = nil,
                    black: Swift.String? = nil,
                    white: Swift.String? = nil
                ) {
                    self.id = id
                    self.black = black
                    self.white = white
                }
                internal enum CodingKeys: String, CodingKey {
                    case id
                    case black
                    case white
                }
            }
            /// - Remark: Generated from `#/components/schemas/BulkPairing/games`.
            internal typealias gamesPayload = [Components.Schemas.BulkPairing.gamesPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/BulkPairing/games`.
            internal var games: Components.Schemas.BulkPairing.gamesPayload
            /// - Remark: Generated from `#/components/schemas/BulkPairing/variant`.
            internal var variant: Components.Schemas.VariantKey
            /// - Remark: Generated from `#/components/schemas/BulkPairing/clock`.
            internal var clock: Components.Schemas.Clock
            /// - Remark: Generated from `#/components/schemas/BulkPairing/pairAt`.
            internal var pairAt: Swift.Int
            /// - Remark: Generated from `#/components/schemas/BulkPairing/pairedAt`.
            internal var pairedAt: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/BulkPairing/rated`.
            internal var rated: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/BulkPairing/startClocksAt`.
            internal var startClocksAt: Swift.Int
            /// - Remark: Generated from `#/components/schemas/BulkPairing/scheduledAt`.
            internal var scheduledAt: Swift.Int
            /// Creates a new `BulkPairing`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - games:
            ///   - variant:
            ///   - clock:
            ///   - pairAt:
            ///   - pairedAt:
            ///   - rated:
            ///   - startClocksAt:
            ///   - scheduledAt:
            internal init(
                id: Swift.String,
                games: Components.Schemas.BulkPairing.gamesPayload,
                variant: Components.Schemas.VariantKey,
                clock: Components.Schemas.Clock,
                pairAt: Swift.Int,
                pairedAt: Swift.Int? = nil,
                rated: Swift.Bool,
                startClocksAt: Swift.Int,
                scheduledAt: Swift.Int
            ) {
                self.id = id
                self.games = games
                self.variant = variant
                self.clock = clock
                self.pairAt = pairAt
                self.pairedAt = pairedAt
                self.rated = rated
                self.startClocksAt = startClocksAt
                self.scheduledAt = scheduledAt
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case games
                case variant
                case clock
                case pairAt
                case pairedAt
                case rated
                case startClocksAt
                case scheduledAt
            }
        }
        /// - Remark: Generated from `#/components/schemas/CloudEval`.
        internal struct CloudEval: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CloudEval/depth`.
            internal var depth: Swift.Int
            /// - Remark: Generated from `#/components/schemas/CloudEval/fen`.
            internal var fen: Swift.String
            /// - Remark: Generated from `#/components/schemas/CloudEval/knodes`.
            internal var knodes: Swift.Int
            /// - Remark: Generated from `#/components/schemas/CloudEval/pvsPayload`.
            @frozen internal enum pvsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CloudEval/pvsPayload/case1`.
                internal struct Case1Payload: Codable, Hashable, Sendable {
                    /// Evaluation in centi-pawns, from White's point of view
                    ///
                    /// - Remark: Generated from `#/components/schemas/CloudEval/pvsPayload/case1/cp`.
                    internal var cp: Swift.Int
                    /// Variation in UCI notation
                    ///
                    /// - Remark: Generated from `#/components/schemas/CloudEval/pvsPayload/case1/moves`.
                    internal var moves: Swift.String
                    /// Creates a new `Case1Payload`.
                    ///
                    /// - Parameters:
                    ///   - cp: Evaluation in centi-pawns, from White's point of view
                    ///   - moves: Variation in UCI notation
                    internal init(
                        cp: Swift.Int,
                        moves: Swift.String
                    ) {
                        self.cp = cp
                        self.moves = moves
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case cp
                        case moves
                    }
                }
                /// - Remark: Generated from `#/components/schemas/CloudEval/pvsPayload/case1`.
                case case1(Components.Schemas.CloudEval.pvsPayloadPayload.Case1Payload)
                /// - Remark: Generated from `#/components/schemas/CloudEval/pvsPayload/case2`.
                internal struct Case2Payload: Codable, Hashable, Sendable {
                    /// Evaluation in moves to mate, from White's point of view
                    ///
                    /// - Remark: Generated from `#/components/schemas/CloudEval/pvsPayload/case2/mate`.
                    internal var mate: Swift.Int
                    /// Variation in UCI notation
                    ///
                    /// - Remark: Generated from `#/components/schemas/CloudEval/pvsPayload/case2/moves`.
                    internal var moves: Swift.String
                    /// Creates a new `Case2Payload`.
                    ///
                    /// - Parameters:
                    ///   - mate: Evaluation in moves to mate, from White's point of view
                    ///   - moves: Variation in UCI notation
                    internal init(
                        mate: Swift.Int,
                        moves: Swift.String
                    ) {
                        self.mate = mate
                        self.moves = moves
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case mate
                        case moves
                    }
                }
                /// - Remark: Generated from `#/components/schemas/CloudEval/pvsPayload/case2`.
                case case2(Components.Schemas.CloudEval.pvsPayloadPayload.Case2Payload)
                internal init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                internal func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try value.encode(to: encoder)
                    case let .case2(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/CloudEval/pvs`.
            internal typealias pvsPayload = [Components.Schemas.CloudEval.pvsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/CloudEval/pvs`.
            internal var pvs: Components.Schemas.CloudEval.pvsPayload
            /// Creates a new `CloudEval`.
            ///
            /// - Parameters:
            ///   - depth:
            ///   - fen:
            ///   - knodes:
            ///   - pvs:
            internal init(
                depth: Swift.Int,
                fen: Swift.String,
                knodes: Swift.Int,
                pvs: Components.Schemas.CloudEval.pvsPayload
            ) {
                self.depth = depth
                self.fen = fen
                self.knodes = knodes
                self.pvs = pvs
            }
            internal enum CodingKeys: String, CodingKey {
                case depth
                case fen
                case knodes
                case pvs
            }
        }
        /// - Remark: Generated from `#/components/schemas/UciVariant`.
        @frozen internal enum UciVariant: String, Codable, Hashable, Sendable {
            case chess = "chess"
            case crazyhouse = "crazyhouse"
            case antichess = "antichess"
            case atomic = "atomic"
            case horde = "horde"
            case kingofthehill = "kingofthehill"
            case racingkings = "racingkings"
            case _3check = "3check"
        }
        /// - Remark: Generated from `#/components/schemas/ExternalEngine`.
        internal struct ExternalEngine: Codable, Hashable, Sendable {
            /// Unique engine registration ID.
            ///
            /// - Remark: Generated from `#/components/schemas/ExternalEngine/id`.
            internal var id: Swift.String
            /// Display name of the engine.
            ///
            /// - Remark: Generated from `#/components/schemas/ExternalEngine/name`.
            internal var name: Swift.String
            /// A secret token that can be used to
            /// [*request* analysis](#tag/External-engine/operation/apiExternalEngineAnalyse)
            /// from this external engine.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ExternalEngine/clientSecret`.
            internal var clientSecret: Swift.String
            /// The user this engine has been registered for.
            ///
            /// - Remark: Generated from `#/components/schemas/ExternalEngine/userId`.
            internal var userId: Swift.String
            /// Maximum number of available threads.
            ///
            /// - Remark: Generated from `#/components/schemas/ExternalEngine/maxThreads`.
            internal var maxThreads: Swift.Int
            /// Maximum available hash table size, in MiB.
            ///
            /// - Remark: Generated from `#/components/schemas/ExternalEngine/maxHash`.
            internal var maxHash: Swift.Int
            /// List of supported chess variants.
            ///
            /// - Remark: Generated from `#/components/schemas/ExternalEngine/variants`.
            internal var variants: [Components.Schemas.UciVariant]
            /// Arbitrary data that the engine provider can use for identification
            /// or bookkeeping.
            ///
            /// Users can read this information, but updating it requires knowing
            /// or changing the `providerSecret`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ExternalEngine/providerData`.
            internal var providerData: Swift.String?
            /// Creates a new `ExternalEngine`.
            ///
            /// - Parameters:
            ///   - id: Unique engine registration ID.
            ///   - name: Display name of the engine.
            ///   - clientSecret: A secret token that can be used to
            ///   - userId: The user this engine has been registered for.
            ///   - maxThreads: Maximum number of available threads.
            ///   - maxHash: Maximum available hash table size, in MiB.
            ///   - variants: List of supported chess variants.
            ///   - providerData: Arbitrary data that the engine provider can use for identification
            internal init(
                id: Swift.String,
                name: Swift.String,
                clientSecret: Swift.String,
                userId: Swift.String,
                maxThreads: Swift.Int,
                maxHash: Swift.Int,
                variants: [Components.Schemas.UciVariant],
                providerData: Swift.String? = nil
            ) {
                self.id = id
                self.name = name
                self.clientSecret = clientSecret
                self.userId = userId
                self.maxThreads = maxThreads
                self.maxHash = maxHash
                self.variants = variants
                self.providerData = providerData
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case name
                case clientSecret
                case userId
                case maxThreads
                case maxHash
                case variants
                case providerData
            }
        }
        /// - Remark: Generated from `#/components/schemas/ExternalEngineRegistration`.
        internal struct ExternalEngineRegistration: Codable, Hashable, Sendable {
            /// Display name of the engine.
            ///
            /// - Remark: Generated from `#/components/schemas/ExternalEngineRegistration/name`.
            internal var name: Swift.String
            /// Maximum number of available threads.
            ///
            /// - Remark: Generated from `#/components/schemas/ExternalEngineRegistration/maxThreads`.
            internal var maxThreads: Swift.Int
            /// Maximum available hash table size, in MiB.
            ///
            /// - Remark: Generated from `#/components/schemas/ExternalEngineRegistration/maxHash`.
            internal var maxHash: Swift.Int
            /// Optional list of supported chess variants.
            ///
            /// - Remark: Generated from `#/components/schemas/ExternalEngineRegistration/variants`.
            internal var variants: [Components.Schemas.UciVariant]?
            /// A random token that can be used to
            /// [wait for analysis requests](#tag/External-engine/operation/apiExternalEngineAcquire)
            /// and provide analysis.
            ///
            /// The engine provider should securely generate a random string.
            ///
            /// The token will not be readable again, even by the user.
            ///
            /// The analysis provider can register multiple engines with the same
            /// token, even for different users, and wait for analysis requests
            /// from any of them. In this case, the request must not be made via
            /// CORS, so that the token is not revealed to any of the users.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ExternalEngineRegistration/providerSecret`.
            internal var providerSecret: Swift.String
            /// Arbitrary data that the engine provider can use for identification
            /// or bookkeeping.
            ///
            /// Users can read this information, but updating it requires knowing
            /// or changing the `providerSecret`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ExternalEngineRegistration/providerData`.
            internal var providerData: Swift.String?
            /// Creates a new `ExternalEngineRegistration`.
            ///
            /// - Parameters:
            ///   - name: Display name of the engine.
            ///   - maxThreads: Maximum number of available threads.
            ///   - maxHash: Maximum available hash table size, in MiB.
            ///   - variants: Optional list of supported chess variants.
            ///   - providerSecret: A random token that can be used to
            ///   - providerData: Arbitrary data that the engine provider can use for identification
            internal init(
                name: Swift.String,
                maxThreads: Swift.Int,
                maxHash: Swift.Int,
                variants: [Components.Schemas.UciVariant]? = nil,
                providerSecret: Swift.String,
                providerData: Swift.String? = nil
            ) {
                self.name = name
                self.maxThreads = maxThreads
                self.maxHash = maxHash
                self.variants = variants
                self.providerSecret = providerSecret
                self.providerData = providerData
            }
            internal enum CodingKeys: String, CodingKey {
                case name
                case maxThreads
                case maxHash
                case variants
                case providerSecret
                case providerData
            }
        }
        /// - Remark: Generated from `#/components/schemas/ExternalEngineWorkCommon`.
        internal struct ExternalEngineWorkCommon: Codable, Hashable, Sendable {
            /// Arbitary string that identifies the analysis session.
            /// Providers may wish to clear the hash table between sessions.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ExternalEngineWorkCommon/sessionId`.
            internal var sessionId: Swift.String
            /// Number of threads to use for analysis.
            ///
            /// - Remark: Generated from `#/components/schemas/ExternalEngineWorkCommon/threads`.
            internal var threads: Swift.Int
            /// Hash table size to use for analysis, in MiB.
            ///
            /// - Remark: Generated from `#/components/schemas/ExternalEngineWorkCommon/hash`.
            internal var hash: Swift.Int
            /// Requested number of principal variations.
            ///
            /// - Remark: Generated from `#/components/schemas/ExternalEngineWorkCommon/multiPv`.
            internal var multiPv: Swift.Int
            /// - Remark: Generated from `#/components/schemas/ExternalEngineWorkCommon/variant`.
            internal var variant: Components.Schemas.UciVariant
            /// Initial position of the game.
            ///
            /// - Remark: Generated from `#/components/schemas/ExternalEngineWorkCommon/initialFen`.
            internal var initialFen: Swift.String
            /// List of moves played from the initial position, in UCI notation.
            ///
            /// - Remark: Generated from `#/components/schemas/ExternalEngineWorkCommon/moves`.
            internal var moves: [Swift.String]
            /// Creates a new `ExternalEngineWorkCommon`.
            ///
            /// - Parameters:
            ///   - sessionId: Arbitary string that identifies the analysis session.
            ///   - threads: Number of threads to use for analysis.
            ///   - hash: Hash table size to use for analysis, in MiB.
            ///   - multiPv: Requested number of principal variations.
            ///   - variant:
            ///   - initialFen: Initial position of the game.
            ///   - moves: List of moves played from the initial position, in UCI notation.
            internal init(
                sessionId: Swift.String,
                threads: Swift.Int,
                hash: Swift.Int,
                multiPv: Swift.Int,
                variant: Components.Schemas.UciVariant,
                initialFen: Swift.String,
                moves: [Swift.String]
            ) {
                self.sessionId = sessionId
                self.threads = threads
                self.hash = hash
                self.multiPv = multiPv
                self.variant = variant
                self.initialFen = initialFen
                self.moves = moves
            }
            internal enum CodingKeys: String, CodingKey {
                case sessionId
                case threads
                case hash
                case multiPv
                case variant
                case initialFen
                case moves
            }
        }
        /// - Remark: Generated from `#/components/schemas/ExternalEngineWork`.
        @frozen internal enum ExternalEngineWork: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ExternalEngineWork/case1`.
            internal struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExternalEngineWork/case1/value1`.
                internal struct Value1Payload: Codable, Hashable, Sendable {
                    /// Amount of time to analyse the position, in milliseconds.
                    ///
                    /// - Remark: Generated from `#/components/schemas/ExternalEngineWork/case1/value1/movetime`.
                    internal var movetime: Swift.Int
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - movetime: Amount of time to analyse the position, in milliseconds.
                    internal init(movetime: Swift.Int) {
                        self.movetime = movetime
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case movetime
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ExternalEngineWork/case1/value1`.
                internal var value1: Components.Schemas.ExternalEngineWork.Case1Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/ExternalEngineWork/case1/value2`.
                internal var value2: Components.Schemas.ExternalEngineWorkCommon
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                internal init(
                    value1: Components.Schemas.ExternalEngineWork.Case1Payload.Value1Payload,
                    value2: Components.Schemas.ExternalEngineWorkCommon
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                internal init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                    value2 = try .init(from: decoder)
                }
                internal func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                    try value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/ExternalEngineWork/case1`.
            case case1(Components.Schemas.ExternalEngineWork.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/ExternalEngineWork/case2`.
            internal struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExternalEngineWork/case2/value1`.
                internal struct Value1Payload: Codable, Hashable, Sendable {
                    /// Analysis target depth
                    ///
                    /// - Remark: Generated from `#/components/schemas/ExternalEngineWork/case2/value1/depth`.
                    internal var depth: Swift.Int
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - depth: Analysis target depth
                    internal init(depth: Swift.Int) {
                        self.depth = depth
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case depth
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ExternalEngineWork/case2/value1`.
                internal var value1: Components.Schemas.ExternalEngineWork.Case2Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/ExternalEngineWork/case2/value2`.
                internal var value2: Components.Schemas.ExternalEngineWorkCommon
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                internal init(
                    value1: Components.Schemas.ExternalEngineWork.Case2Payload.Value1Payload,
                    value2: Components.Schemas.ExternalEngineWorkCommon
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                internal init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                    value2 = try .init(from: decoder)
                }
                internal func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                    try value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/ExternalEngineWork/case2`.
            case case2(Components.Schemas.ExternalEngineWork.Case2Payload)
            /// - Remark: Generated from `#/components/schemas/ExternalEngineWork/case3`.
            internal struct Case3Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExternalEngineWork/case3/value1`.
                internal struct Value1Payload: Codable, Hashable, Sendable {
                    /// Number of nodes to analyse in the position
                    ///
                    /// - Remark: Generated from `#/components/schemas/ExternalEngineWork/case3/value1/nodes`.
                    internal var nodes: Swift.Int
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - nodes: Number of nodes to analyse in the position
                    internal init(nodes: Swift.Int) {
                        self.nodes = nodes
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case nodes
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ExternalEngineWork/case3/value1`.
                internal var value1: Components.Schemas.ExternalEngineWork.Case3Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/ExternalEngineWork/case3/value2`.
                internal var value2: Components.Schemas.ExternalEngineWorkCommon
                /// Creates a new `Case3Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                internal init(
                    value1: Components.Schemas.ExternalEngineWork.Case3Payload.Value1Payload,
                    value2: Components.Schemas.ExternalEngineWorkCommon
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                internal init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                    value2 = try .init(from: decoder)
                }
                internal func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                    try value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/ExternalEngineWork/case3`.
            case case3(Components.Schemas.ExternalEngineWork.Case3Payload)
            internal init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case3(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            internal func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                case let .case3(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/OAuthError`.
        internal struct OAuthError: Codable, Hashable, Sendable {
            /// The cause of the error.
            ///
            /// - Remark: Generated from `#/components/schemas/OAuthError/error`.
            internal var error: Swift.String?
            /// The reason why the request was rejected.
            ///
            /// - Remark: Generated from `#/components/schemas/OAuthError/error_description`.
            internal var error_description: Swift.String?
            /// Creates a new `OAuthError`.
            ///
            /// - Parameters:
            ///   - error: The cause of the error.
            ///   - error_description: The reason why the request was rejected.
            internal init(
                error: Swift.String? = nil,
                error_description: Swift.String? = nil
            ) {
                self.error = error
                self.error_description = error_description
            }
            internal enum CodingKeys: String, CodingKey {
                case error
                case error_description
            }
        }
        /// - Remark: Generated from `#/components/schemas/OpeningExplorerOpening`.
        internal struct OpeningExplorerOpening: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerOpening/eco`.
            internal var eco: Swift.String
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerOpening/name`.
            internal var name: Swift.String
            /// Creates a new `OpeningExplorerOpening`.
            ///
            /// - Parameters:
            ///   - eco:
            ///   - name:
            internal init(
                eco: Swift.String,
                name: Swift.String
            ) {
                self.eco = eco
                self.name = name
            }
            internal enum CodingKeys: String, CodingKey {
                case eco
                case name
            }
        }
        /// - Remark: Generated from `#/components/schemas/OpeningExplorerGamePlayer`.
        internal struct OpeningExplorerGamePlayer: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerGamePlayer/name`.
            internal var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerGamePlayer/rating`.
            internal var rating: Swift.Int
            /// Creates a new `OpeningExplorerGamePlayer`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - rating:
            internal init(
                name: Swift.String,
                rating: Swift.Int
            ) {
                self.name = name
                self.rating = rating
            }
            internal enum CodingKeys: String, CodingKey {
                case name
                case rating
            }
        }
        /// - Remark: Generated from `#/components/schemas/OpeningExplorerMastersGame`.
        internal struct OpeningExplorerMastersGame: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerMastersGame/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerMastersGame/winner`.
            @frozen internal enum winnerPayload: String, Codable, Hashable, Sendable {
                case white = "white"
                case black = "black"
                case _empty = ""
            }
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerMastersGame/winner`.
            internal var winner: Components.Schemas.OpeningExplorerMastersGame.winnerPayload?
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerMastersGame/white`.
            internal var white: Components.Schemas.OpeningExplorerGamePlayer
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerMastersGame/black`.
            internal var black: Components.Schemas.OpeningExplorerGamePlayer
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerMastersGame/year`.
            internal var year: Swift.Double
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerMastersGame/month`.
            internal var month: Swift.String?
            /// Creates a new `OpeningExplorerMastersGame`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - winner:
            ///   - white:
            ///   - black:
            ///   - year:
            ///   - month:
            internal init(
                id: Swift.String,
                winner: Components.Schemas.OpeningExplorerMastersGame.winnerPayload? = nil,
                white: Components.Schemas.OpeningExplorerGamePlayer,
                black: Components.Schemas.OpeningExplorerGamePlayer,
                year: Swift.Double,
                month: Swift.String? = nil
            ) {
                self.id = id
                self.winner = winner
                self.white = white
                self.black = black
                self.year = year
                self.month = month
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case winner
                case white
                case black
                case year
                case month
            }
        }
        /// - Remark: Generated from `#/components/schemas/OpeningExplorerMasters`.
        internal struct OpeningExplorerMasters: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerMasters/white`.
            internal var white: Swift.Double
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerMasters/draws`.
            internal var draws: Swift.Double
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerMasters/black`.
            internal var black: Swift.Double
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerMasters/movesPayload`.
            internal struct movesPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/OpeningExplorerMasters/movesPayload/uci`.
                internal var uci: Swift.String
                /// - Remark: Generated from `#/components/schemas/OpeningExplorerMasters/movesPayload/san`.
                internal var san: Swift.String
                /// - Remark: Generated from `#/components/schemas/OpeningExplorerMasters/movesPayload/averageRating`.
                internal var averageRating: Swift.Double
                /// - Remark: Generated from `#/components/schemas/OpeningExplorerMasters/movesPayload/white`.
                internal var white: Swift.Double
                /// - Remark: Generated from `#/components/schemas/OpeningExplorerMasters/movesPayload/draws`.
                internal var draws: Swift.Double
                /// - Remark: Generated from `#/components/schemas/OpeningExplorerMasters/movesPayload/black`.
                internal var black: Swift.Double
                /// Creates a new `movesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - uci:
                ///   - san:
                ///   - averageRating:
                ///   - white:
                ///   - draws:
                ///   - black:
                internal init(
                    uci: Swift.String,
                    san: Swift.String,
                    averageRating: Swift.Double,
                    white: Swift.Double,
                    draws: Swift.Double,
                    black: Swift.Double
                ) {
                    self.uci = uci
                    self.san = san
                    self.averageRating = averageRating
                    self.white = white
                    self.draws = draws
                    self.black = black
                }
                internal enum CodingKeys: String, CodingKey {
                    case uci
                    case san
                    case averageRating
                    case white
                    case draws
                    case black
                }
            }
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerMasters/moves`.
            internal typealias movesPayload = [Components.Schemas.OpeningExplorerMasters.movesPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerMasters/moves`.
            internal var moves: Components.Schemas.OpeningExplorerMasters.movesPayload
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerMasters/topGamesPayload`.
            internal struct topGamesPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/OpeningExplorerMasters/topGamesPayload/value1`.
                internal struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/OpeningExplorerMasters/topGamesPayload/value1/uci`.
                    internal var uci: Swift.String
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - uci:
                    internal init(uci: Swift.String) {
                        self.uci = uci
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case uci
                    }
                }
                /// - Remark: Generated from `#/components/schemas/OpeningExplorerMasters/topGamesPayload/value1`.
                internal var value1: Components.Schemas.OpeningExplorerMasters.topGamesPayloadPayload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/OpeningExplorerMasters/topGamesPayload/value2`.
                internal var value2: Components.Schemas.OpeningExplorerMastersGame
                /// Creates a new `topGamesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                internal init(
                    value1: Components.Schemas.OpeningExplorerMasters.topGamesPayloadPayload.Value1Payload,
                    value2: Components.Schemas.OpeningExplorerMastersGame
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                internal init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                    value2 = try .init(from: decoder)
                }
                internal func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                    try value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerMasters/topGames`.
            internal typealias topGamesPayload = [Components.Schemas.OpeningExplorerMasters.topGamesPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerMasters/topGames`.
            internal var topGames: Components.Schemas.OpeningExplorerMasters.topGamesPayload
            /// Creates a new `OpeningExplorerMasters`.
            ///
            /// - Parameters:
            ///   - white:
            ///   - draws:
            ///   - black:
            ///   - moves:
            ///   - topGames:
            internal init(
                white: Swift.Double,
                draws: Swift.Double,
                black: Swift.Double,
                moves: Components.Schemas.OpeningExplorerMasters.movesPayload,
                topGames: Components.Schemas.OpeningExplorerMasters.topGamesPayload
            ) {
                self.white = white
                self.draws = draws
                self.black = black
                self.moves = moves
                self.topGames = topGames
            }
            internal enum CodingKeys: String, CodingKey {
                case white
                case draws
                case black
                case moves
                case topGames
            }
        }
        /// - Remark: Generated from `#/components/schemas/OpeningExplorerLichessGame`.
        internal struct OpeningExplorerLichessGame: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerLichessGame/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerLichessGame/winner`.
            @frozen internal enum winnerPayload: String, Codable, Hashable, Sendable {
                case white = "white"
                case black = "black"
                case _empty = ""
            }
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerLichessGame/winner`.
            internal var winner: Components.Schemas.OpeningExplorerLichessGame.winnerPayload?
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerLichessGame/speed`.
            internal var speed: Components.Schemas.Speed?
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerLichessGame/white`.
            internal var white: Components.Schemas.OpeningExplorerGamePlayer
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerLichessGame/black`.
            internal var black: Components.Schemas.OpeningExplorerGamePlayer
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerLichessGame/year`.
            internal var year: Swift.Double
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerLichessGame/month`.
            internal var month: Swift.String?
            /// Creates a new `OpeningExplorerLichessGame`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - winner:
            ///   - speed:
            ///   - white:
            ///   - black:
            ///   - year:
            ///   - month:
            internal init(
                id: Swift.String,
                winner: Components.Schemas.OpeningExplorerLichessGame.winnerPayload? = nil,
                speed: Components.Schemas.Speed? = nil,
                white: Components.Schemas.OpeningExplorerGamePlayer,
                black: Components.Schemas.OpeningExplorerGamePlayer,
                year: Swift.Double,
                month: Swift.String? = nil
            ) {
                self.id = id
                self.winner = winner
                self.speed = speed
                self.white = white
                self.black = black
                self.year = year
                self.month = month
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case winner
                case speed
                case white
                case black
                case year
                case month
            }
        }
        /// - Remark: Generated from `#/components/schemas/OpeningExplorerLichess`.
        internal struct OpeningExplorerLichess: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerLichess/white`.
            internal var white: Swift.Double
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerLichess/draws`.
            internal var draws: Swift.Double
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerLichess/black`.
            internal var black: Swift.Double
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerLichess/movesPayload`.
            internal struct movesPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/OpeningExplorerLichess/movesPayload/uci`.
                internal var uci: Swift.String
                /// - Remark: Generated from `#/components/schemas/OpeningExplorerLichess/movesPayload/san`.
                internal var san: Swift.String
                /// - Remark: Generated from `#/components/schemas/OpeningExplorerLichess/movesPayload/averageRating`.
                internal var averageRating: Swift.Double
                /// - Remark: Generated from `#/components/schemas/OpeningExplorerLichess/movesPayload/white`.
                internal var white: Swift.Double
                /// - Remark: Generated from `#/components/schemas/OpeningExplorerLichess/movesPayload/draws`.
                internal var draws: Swift.Double
                /// - Remark: Generated from `#/components/schemas/OpeningExplorerLichess/movesPayload/black`.
                internal var black: Swift.Double
                /// Creates a new `movesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - uci:
                ///   - san:
                ///   - averageRating:
                ///   - white:
                ///   - draws:
                ///   - black:
                internal init(
                    uci: Swift.String,
                    san: Swift.String,
                    averageRating: Swift.Double,
                    white: Swift.Double,
                    draws: Swift.Double,
                    black: Swift.Double
                ) {
                    self.uci = uci
                    self.san = san
                    self.averageRating = averageRating
                    self.white = white
                    self.draws = draws
                    self.black = black
                }
                internal enum CodingKeys: String, CodingKey {
                    case uci
                    case san
                    case averageRating
                    case white
                    case draws
                    case black
                }
            }
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerLichess/moves`.
            internal typealias movesPayload = [Components.Schemas.OpeningExplorerLichess.movesPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerLichess/moves`.
            internal var moves: Components.Schemas.OpeningExplorerLichess.movesPayload
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerLichess/topGamesPayload`.
            internal struct topGamesPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/OpeningExplorerLichess/topGamesPayload/value1`.
                internal struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/OpeningExplorerLichess/topGamesPayload/value1/uci`.
                    internal var uci: Swift.String
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - uci:
                    internal init(uci: Swift.String) {
                        self.uci = uci
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case uci
                    }
                }
                /// - Remark: Generated from `#/components/schemas/OpeningExplorerLichess/topGamesPayload/value1`.
                internal var value1: Components.Schemas.OpeningExplorerLichess.topGamesPayloadPayload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/OpeningExplorerLichess/topGamesPayload/value2`.
                internal var value2: Components.Schemas.OpeningExplorerLichessGame
                /// Creates a new `topGamesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                internal init(
                    value1: Components.Schemas.OpeningExplorerLichess.topGamesPayloadPayload.Value1Payload,
                    value2: Components.Schemas.OpeningExplorerLichessGame
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                internal init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                    value2 = try .init(from: decoder)
                }
                internal func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                    try value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerLichess/topGames`.
            internal typealias topGamesPayload = [Components.Schemas.OpeningExplorerLichess.topGamesPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerLichess/topGames`.
            internal var topGames: Components.Schemas.OpeningExplorerLichess.topGamesPayload
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerLichess/recentGamesPayload`.
            internal struct recentGamesPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/OpeningExplorerLichess/recentGamesPayload/value1`.
                internal struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/OpeningExplorerLichess/recentGamesPayload/value1/uci`.
                    internal var uci: Swift.String
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - uci:
                    internal init(uci: Swift.String) {
                        self.uci = uci
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case uci
                    }
                }
                /// - Remark: Generated from `#/components/schemas/OpeningExplorerLichess/recentGamesPayload/value1`.
                internal var value1: Components.Schemas.OpeningExplorerLichess.recentGamesPayloadPayload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/OpeningExplorerLichess/recentGamesPayload/value2`.
                internal var value2: Components.Schemas.OpeningExplorerLichessGame
                /// Creates a new `recentGamesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                internal init(
                    value1: Components.Schemas.OpeningExplorerLichess.recentGamesPayloadPayload.Value1Payload,
                    value2: Components.Schemas.OpeningExplorerLichessGame
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                internal init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                    value2 = try .init(from: decoder)
                }
                internal func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                    try value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerLichess/recentGames`.
            internal typealias recentGamesPayload = [Components.Schemas.OpeningExplorerLichess.recentGamesPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerLichess/recentGames`.
            internal var recentGames: Components.Schemas.OpeningExplorerLichess.recentGamesPayload?
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerLichess/historyPayload`.
            internal struct historyPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/OpeningExplorerLichess/historyPayload/month`.
                internal var month: Swift.String
                /// - Remark: Generated from `#/components/schemas/OpeningExplorerLichess/historyPayload/white`.
                internal var white: Swift.Double
                /// - Remark: Generated from `#/components/schemas/OpeningExplorerLichess/historyPayload/draws`.
                internal var draws: Swift.Double
                /// - Remark: Generated from `#/components/schemas/OpeningExplorerLichess/historyPayload/black`.
                internal var black: Swift.Double
                /// Creates a new `historyPayloadPayload`.
                ///
                /// - Parameters:
                ///   - month:
                ///   - white:
                ///   - draws:
                ///   - black:
                internal init(
                    month: Swift.String,
                    white: Swift.Double,
                    draws: Swift.Double,
                    black: Swift.Double
                ) {
                    self.month = month
                    self.white = white
                    self.draws = draws
                    self.black = black
                }
                internal enum CodingKeys: String, CodingKey {
                    case month
                    case white
                    case draws
                    case black
                }
            }
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerLichess/history`.
            internal typealias historyPayload = [Components.Schemas.OpeningExplorerLichess.historyPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerLichess/history`.
            internal var history: Components.Schemas.OpeningExplorerLichess.historyPayload?
            /// Creates a new `OpeningExplorerLichess`.
            ///
            /// - Parameters:
            ///   - white:
            ///   - draws:
            ///   - black:
            ///   - moves:
            ///   - topGames:
            ///   - recentGames:
            ///   - history:
            internal init(
                white: Swift.Double,
                draws: Swift.Double,
                black: Swift.Double,
                moves: Components.Schemas.OpeningExplorerLichess.movesPayload,
                topGames: Components.Schemas.OpeningExplorerLichess.topGamesPayload,
                recentGames: Components.Schemas.OpeningExplorerLichess.recentGamesPayload? = nil,
                history: Components.Schemas.OpeningExplorerLichess.historyPayload? = nil
            ) {
                self.white = white
                self.draws = draws
                self.black = black
                self.moves = moves
                self.topGames = topGames
                self.recentGames = recentGames
                self.history = history
            }
            internal enum CodingKeys: String, CodingKey {
                case white
                case draws
                case black
                case moves
                case topGames
                case recentGames
                case history
            }
        }
        /// - Remark: Generated from `#/components/schemas/OpeningExplorerPlayerGame`.
        internal struct OpeningExplorerPlayerGame: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerPlayerGame/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerPlayerGame/winner`.
            @frozen internal enum winnerPayload: String, Codable, Hashable, Sendable {
                case white = "white"
                case black = "black"
            }
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerPlayerGame/winner`.
            internal var winner: Components.Schemas.OpeningExplorerPlayerGame.winnerPayload?
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerPlayerGame/speed`.
            internal var speed: Components.Schemas.Speed
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerPlayerGame/mode`.
            @frozen internal enum modePayload: String, Codable, Hashable, Sendable {
                case rated = "rated"
                case casual = "casual"
            }
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerPlayerGame/mode`.
            internal var mode: Components.Schemas.OpeningExplorerPlayerGame.modePayload
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerPlayerGame/white`.
            internal var white: Components.Schemas.OpeningExplorerGamePlayer
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerPlayerGame/black`.
            internal var black: Components.Schemas.OpeningExplorerGamePlayer
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerPlayerGame/year`.
            internal var year: Swift.Double
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerPlayerGame/month`.
            internal var month: Swift.String
            /// Creates a new `OpeningExplorerPlayerGame`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - winner:
            ///   - speed:
            ///   - mode:
            ///   - white:
            ///   - black:
            ///   - year:
            ///   - month:
            internal init(
                id: Swift.String,
                winner: Components.Schemas.OpeningExplorerPlayerGame.winnerPayload? = nil,
                speed: Components.Schemas.Speed,
                mode: Components.Schemas.OpeningExplorerPlayerGame.modePayload,
                white: Components.Schemas.OpeningExplorerGamePlayer,
                black: Components.Schemas.OpeningExplorerGamePlayer,
                year: Swift.Double,
                month: Swift.String
            ) {
                self.id = id
                self.winner = winner
                self.speed = speed
                self.mode = mode
                self.white = white
                self.black = black
                self.year = year
                self.month = month
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case winner
                case speed
                case mode
                case white
                case black
                case year
                case month
            }
        }
        /// - Remark: Generated from `#/components/schemas/OpeningExplorerPlayer`.
        internal struct OpeningExplorerPlayer: Codable, Hashable, Sendable {
            /// Waiting for other players to be indexed first
            ///
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerPlayer/queuePosition`.
            internal var queuePosition: Swift.Double
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerPlayer/white`.
            internal var white: Swift.Double
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerPlayer/draws`.
            internal var draws: Swift.Double
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerPlayer/black`.
            internal var black: Swift.Double
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerPlayer/movesPayload`.
            internal struct movesPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/OpeningExplorerPlayer/movesPayload/uci`.
                internal var uci: Swift.String
                /// - Remark: Generated from `#/components/schemas/OpeningExplorerPlayer/movesPayload/san`.
                internal var san: Swift.String
                /// - Remark: Generated from `#/components/schemas/OpeningExplorerPlayer/movesPayload/averageOpponentRating`.
                internal var averageOpponentRating: Swift.Double
                /// - Remark: Generated from `#/components/schemas/OpeningExplorerPlayer/movesPayload/performance`.
                internal var performance: Swift.Double
                /// - Remark: Generated from `#/components/schemas/OpeningExplorerPlayer/movesPayload/white`.
                internal var white: Swift.Double
                /// - Remark: Generated from `#/components/schemas/OpeningExplorerPlayer/movesPayload/draws`.
                internal var draws: Swift.Double
                /// - Remark: Generated from `#/components/schemas/OpeningExplorerPlayer/movesPayload/black`.
                internal var black: Swift.Double
                /// Creates a new `movesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - uci:
                ///   - san:
                ///   - averageOpponentRating:
                ///   - performance:
                ///   - white:
                ///   - draws:
                ///   - black:
                internal init(
                    uci: Swift.String,
                    san: Swift.String,
                    averageOpponentRating: Swift.Double,
                    performance: Swift.Double,
                    white: Swift.Double,
                    draws: Swift.Double,
                    black: Swift.Double
                ) {
                    self.uci = uci
                    self.san = san
                    self.averageOpponentRating = averageOpponentRating
                    self.performance = performance
                    self.white = white
                    self.draws = draws
                    self.black = black
                }
                internal enum CodingKeys: String, CodingKey {
                    case uci
                    case san
                    case averageOpponentRating
                    case performance
                    case white
                    case draws
                    case black
                }
            }
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerPlayer/moves`.
            internal typealias movesPayload = [Components.Schemas.OpeningExplorerPlayer.movesPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerPlayer/moves`.
            internal var moves: Components.Schemas.OpeningExplorerPlayer.movesPayload
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerPlayer/recentGamesPayload`.
            internal struct recentGamesPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/OpeningExplorerPlayer/recentGamesPayload/value1`.
                internal struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/OpeningExplorerPlayer/recentGamesPayload/value1/uci`.
                    internal var uci: Swift.String
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - uci:
                    internal init(uci: Swift.String) {
                        self.uci = uci
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case uci
                    }
                }
                /// - Remark: Generated from `#/components/schemas/OpeningExplorerPlayer/recentGamesPayload/value1`.
                internal var value1: Components.Schemas.OpeningExplorerPlayer.recentGamesPayloadPayload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/OpeningExplorerPlayer/recentGamesPayload/value2`.
                internal var value2: Components.Schemas.OpeningExplorerPlayerGame
                /// Creates a new `recentGamesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                internal init(
                    value1: Components.Schemas.OpeningExplorerPlayer.recentGamesPayloadPayload.Value1Payload,
                    value2: Components.Schemas.OpeningExplorerPlayerGame
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                internal init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                    value2 = try .init(from: decoder)
                }
                internal func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                    try value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerPlayer/recentGames`.
            internal typealias recentGamesPayload = [Components.Schemas.OpeningExplorerPlayer.recentGamesPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/OpeningExplorerPlayer/recentGames`.
            internal var recentGames: Components.Schemas.OpeningExplorerPlayer.recentGamesPayload
            /// Creates a new `OpeningExplorerPlayer`.
            ///
            /// - Parameters:
            ///   - queuePosition: Waiting for other players to be indexed first
            ///   - white:
            ///   - draws:
            ///   - black:
            ///   - moves:
            ///   - recentGames:
            internal init(
                queuePosition: Swift.Double,
                white: Swift.Double,
                draws: Swift.Double,
                black: Swift.Double,
                moves: Components.Schemas.OpeningExplorerPlayer.movesPayload,
                recentGames: Components.Schemas.OpeningExplorerPlayer.recentGamesPayload
            ) {
                self.queuePosition = queuePosition
                self.white = white
                self.draws = draws
                self.black = black
                self.moves = moves
                self.recentGames = recentGames
            }
            internal enum CodingKeys: String, CodingKey {
                case queuePosition
                case white
                case draws
                case black
                case moves
                case recentGames
            }
        }
        /// - Remark: Generated from `#/components/schemas/Move`.
        internal struct Move: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Move/uci`.
            internal var uci: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Move/san`.
            internal var san: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Move/category`.
            @frozen internal enum categoryPayload: String, Codable, Hashable, Sendable {
                case loss = "loss"
                case unknown = "unknown"
                case syzygy_hyphen_loss = "syzygy-loss"
                case maybe_hyphen_loss = "maybe-loss"
                case blessed_hyphen_loss = "blessed-loss"
                case draw = "draw"
                case cursed_hyphen_win = "cursed-win"
                case maybe_hyphen_win = "maybe-win"
                case syzygy_hyphen_win = "syzygy-win"
                case win = "win"
            }
            /// - Remark: Generated from `#/components/schemas/Move/category`.
            internal var category: Components.Schemas.Move.categoryPayload?
            /// DTZ50'' with rounding or null if unknown
            ///
            /// - Remark: Generated from `#/components/schemas/Move/dtz`.
            internal var dtz: Swift.Int?
            /// DTZ50'' (only if guaranteed to be not rounded) or null if unknown
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Move/precise_dtz`.
            internal var precise_dtz: Swift.Int?
            /// Depth to Conversion (experimental)
            ///
            /// - Remark: Generated from `#/components/schemas/Move/dtc`.
            internal var dtc: Swift.Int?
            /// Depth To Mate (only for Standard positions with not more than 5 pieces)
            ///
            /// - Remark: Generated from `#/components/schemas/Move/dtm`.
            internal var dtm: Swift.Int?
            /// Depth To Win (only for Antichess positions with not more than 4 pieces)
            ///
            /// - Remark: Generated from `#/components/schemas/Move/dtw`.
            internal var dtw: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Move/zeroing`.
            internal var zeroing: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Move/checkmate`.
            internal var checkmate: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Move/stalemate`.
            internal var stalemate: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Move/variant_win`.
            internal var variant_win: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Move/variant_loss`.
            internal var variant_loss: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Move/insufficient_material`.
            internal var insufficient_material: Swift.Bool?
            /// Creates a new `Move`.
            ///
            /// - Parameters:
            ///   - uci:
            ///   - san:
            ///   - category:
            ///   - dtz: DTZ50'' with rounding or null if unknown
            ///   - precise_dtz: DTZ50'' (only if guaranteed to be not rounded) or null if unknown
            ///   - dtc: Depth to Conversion (experimental)
            ///   - dtm: Depth To Mate (only for Standard positions with not more than 5 pieces)
            ///   - dtw: Depth To Win (only for Antichess positions with not more than 4 pieces)
            ///   - zeroing:
            ///   - checkmate:
            ///   - stalemate:
            ///   - variant_win:
            ///   - variant_loss:
            ///   - insufficient_material:
            internal init(
                uci: Swift.String? = nil,
                san: Swift.String? = nil,
                category: Components.Schemas.Move.categoryPayload? = nil,
                dtz: Swift.Int? = nil,
                precise_dtz: Swift.Int? = nil,
                dtc: Swift.Int? = nil,
                dtm: Swift.Int? = nil,
                dtw: Swift.Int? = nil,
                zeroing: Swift.Bool? = nil,
                checkmate: Swift.Bool? = nil,
                stalemate: Swift.Bool? = nil,
                variant_win: Swift.Bool? = nil,
                variant_loss: Swift.Bool? = nil,
                insufficient_material: Swift.Bool? = nil
            ) {
                self.uci = uci
                self.san = san
                self.category = category
                self.dtz = dtz
                self.precise_dtz = precise_dtz
                self.dtc = dtc
                self.dtm = dtm
                self.dtw = dtw
                self.zeroing = zeroing
                self.checkmate = checkmate
                self.stalemate = stalemate
                self.variant_win = variant_win
                self.variant_loss = variant_loss
                self.insufficient_material = insufficient_material
            }
            internal enum CodingKeys: String, CodingKey {
                case uci
                case san
                case category
                case dtz
                case precise_dtz
                case dtc
                case dtm
                case dtw
                case zeroing
                case checkmate
                case stalemate
                case variant_win
                case variant_loss
                case insufficient_material
            }
        }
        /// - Remark: Generated from `#/components/schemas/TablebaseJson`.
        internal struct TablebaseJson: Codable, Hashable, Sendable {
            /// `cursed-win` and `blessed-loss` means the 50-move rule prevents
            /// the decisive result.
            ///
            /// `syzygy-win` and `syzygy-loss` means exact result is unknown due to
            /// [DTZ rounding](https://syzygy-tables.info/metrics#dtz), i.e., the
            /// win or loss could also be prevented by the 50-move rule if
            /// the user has deviated from the tablebase recommendation since the
            /// last pawn move or capture.
            ///
            /// `maybe-win` and `maybe-loss` means the result with regard to the
            /// 50-move rule is unknown because the DTC tablebase does not
            /// guarantee to reach a zeroing move as soon as possible.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TablebaseJson/category`.
            @frozen internal enum categoryPayload: String, Codable, Hashable, Sendable {
                case win = "win"
                case unknown = "unknown"
                case syzygy_hyphen_win = "syzygy-win"
                case maybe_hyphen_win = "maybe-win"
                case cursed_hyphen_win = "cursed-win"
                case draw = "draw"
                case blessed_hyphen_loss = "blessed-loss"
                case maybe_hyphen_loss = "maybe-loss"
                case syzygy_hyphen_loss = "syzygy-loss"
                case loss = "loss"
            }
            /// `cursed-win` and `blessed-loss` means the 50-move rule prevents
            /// the decisive result.
            ///
            /// `syzygy-win` and `syzygy-loss` means exact result is unknown due to
            /// [DTZ rounding](https://syzygy-tables.info/metrics#dtz), i.e., the
            /// win or loss could also be prevented by the 50-move rule if
            /// the user has deviated from the tablebase recommendation since the
            /// last pawn move or capture.
            ///
            /// `maybe-win` and `maybe-loss` means the result with regard to the
            /// 50-move rule is unknown because the DTC tablebase does not
            /// guarantee to reach a zeroing move as soon as possible.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TablebaseJson/category`.
            internal var category: Components.Schemas.TablebaseJson.categoryPayload?
            /// [DTZ50'' with rounding](https://syzygy-tables.info/metrics#dtz) or null if unknown
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TablebaseJson/dtz`.
            internal var dtz: Swift.Int?
            /// DTZ50'' (only if guaranteed to be not rounded) or null if unknown
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TablebaseJson/precise_dtz`.
            internal var precise_dtz: Swift.Int?
            /// Depth to Conversion (experimental)
            ///
            /// - Remark: Generated from `#/components/schemas/TablebaseJson/dtc`.
            internal var dtc: Swift.Int?
            /// Depth To Mate (only for Standard positions with not more than 5 pieces)
            ///
            /// - Remark: Generated from `#/components/schemas/TablebaseJson/dtm`.
            internal var dtm: Swift.Int?
            /// Depth To Win (only for Antichess positions with not more than 4 pieces)
            ///
            /// - Remark: Generated from `#/components/schemas/TablebaseJson/dtw`.
            internal var dtw: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/TablebaseJson/checkmate`.
            internal var checkmate: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TablebaseJson/stalemate`.
            internal var stalemate: Swift.Bool?
            /// Only in chess variants
            ///
            /// - Remark: Generated from `#/components/schemas/TablebaseJson/variant_win`.
            internal var variant_win: Swift.Bool?
            /// Only in chess variants
            ///
            /// - Remark: Generated from `#/components/schemas/TablebaseJson/variant_loss`.
            internal var variant_loss: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TablebaseJson/insufficient_material`.
            internal var insufficient_material: Swift.Bool?
            /// Information about legal moves, best first
            ///
            /// - Remark: Generated from `#/components/schemas/TablebaseJson/moves`.
            internal var moves: [Components.Schemas.Move]?
            /// Creates a new `TablebaseJson`.
            ///
            /// - Parameters:
            ///   - category: `cursed-win` and `blessed-loss` means the 50-move rule prevents
            ///   - dtz: [DTZ50'' with rounding](https://syzygy-tables.info/metrics#dtz) or null if unknown
            ///   - precise_dtz: DTZ50'' (only if guaranteed to be not rounded) or null if unknown
            ///   - dtc: Depth to Conversion (experimental)
            ///   - dtm: Depth To Mate (only for Standard positions with not more than 5 pieces)
            ///   - dtw: Depth To Win (only for Antichess positions with not more than 4 pieces)
            ///   - checkmate:
            ///   - stalemate:
            ///   - variant_win: Only in chess variants
            ///   - variant_loss: Only in chess variants
            ///   - insufficient_material:
            ///   - moves: Information about legal moves, best first
            internal init(
                category: Components.Schemas.TablebaseJson.categoryPayload? = nil,
                dtz: Swift.Int? = nil,
                precise_dtz: Swift.Int? = nil,
                dtc: Swift.Int? = nil,
                dtm: Swift.Int? = nil,
                dtw: Swift.Int? = nil,
                checkmate: Swift.Bool? = nil,
                stalemate: Swift.Bool? = nil,
                variant_win: Swift.Bool? = nil,
                variant_loss: Swift.Bool? = nil,
                insufficient_material: Swift.Bool? = nil,
                moves: [Components.Schemas.Move]? = nil
            ) {
                self.category = category
                self.dtz = dtz
                self.precise_dtz = precise_dtz
                self.dtc = dtc
                self.dtm = dtm
                self.dtw = dtw
                self.checkmate = checkmate
                self.stalemate = stalemate
                self.variant_win = variant_win
                self.variant_loss = variant_loss
                self.insufficient_material = insufficient_material
                self.moves = moves
            }
            internal enum CodingKeys: String, CodingKey {
                case category
                case dtz
                case precise_dtz
                case dtc
                case dtm
                case dtw
                case checkmate
                case stalemate
                case variant_win
                case variant_loss
                case insufficient_material
                case moves
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    internal enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    internal enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    internal enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    internal enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
internal enum Operations {
    /// Get real-time users status
    ///
    /// Read the `online`, `playing` and `streaming` flags of several users.
    /// This API is very fast and cheap on lichess side.
    /// So you can call it quite often (like once every 5 seconds).
    /// Use it to track players and know when they're connected on lichess and playing games.
    ///
    ///
    /// - Remark: HTTP `GET /api/users/status`.
    /// - Remark: Generated from `#/paths//api/users/status/get(apiUsersStatus)`.
    internal enum apiUsersStatus {
        internal static let id: Swift.String = "apiUsersStatus"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/users/status/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// User IDs separated by commas. Up to 100 IDs.
                ///
                /// - Remark: Generated from `#/paths/api/users/status/GET/query/ids`.
                internal var ids: Swift.String
                /// Also return the network signal of the player, when available.
                /// It ranges from 1 (poor connection, lag > 500ms) to 4 (great connection, lag < 150ms)
                /// Defaults to `false` to preserve server resources.
                ///
                ///
                /// - Remark: Generated from `#/paths/api/users/status/GET/query/withSignal`.
                internal var withSignal: Swift.Bool?
                /// Also return the ID of the game being played, if any, for each player, in a `playingId` field.
                /// Defaults to `false` to preserve server resources.
                ///
                ///
                /// - Remark: Generated from `#/paths/api/users/status/GET/query/withGameIds`.
                internal var withGameIds: Swift.Bool?
                /// Also return the id, time control and variant of the game being played, if any, for each player, in a `playing` field.
                /// Defaults to `false` to preserve server resources. Disables `withGameIds`.
                ///
                ///
                /// - Remark: Generated from `#/paths/api/users/status/GET/query/withGameMetas`.
                internal var withGameMetas: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids: User IDs separated by commas. Up to 100 IDs.
                ///   - withSignal: Also return the network signal of the player, when available.
                ///   - withGameIds: Also return the ID of the game being played, if any, for each player, in a `playingId` field.
                ///   - withGameMetas: Also return the id, time control and variant of the game being played, if any, for each player, in a `playing` field.
                internal init(
                    ids: Swift.String,
                    withSignal: Swift.Bool? = nil,
                    withGameIds: Swift.Bool? = nil,
                    withGameMetas: Swift.Bool? = nil
                ) {
                    self.ids = ids
                    self.withSignal = withSignal
                    self.withGameIds = withGameIds
                    self.withGameMetas = withGameMetas
                }
            }
            internal var query: Operations.apiUsersStatus.Input.Query
            /// - Remark: Generated from `#/paths/api/users/status/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiUsersStatus.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiUsersStatus.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiUsersStatus.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.apiUsersStatus.Input.Query,
                headers: Operations.apiUsersStatus.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/users/status/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/users/status/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiUsersStatus.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/users/status/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/users/status/GET/responses/200/content/jsonPayload`.
                    internal struct jsonPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/api/users/status/GET/responses/200/content/jsonPayload/id`.
                        internal var id: Swift.String
                        /// - Remark: Generated from `#/paths/api/users/status/GET/responses/200/content/jsonPayload/name`.
                        internal var name: Swift.String
                        /// - Remark: Generated from `#/paths/api/users/status/GET/responses/200/content/jsonPayload/flair`.
                        internal var flair: Components.Schemas.Flair?
                        /// - Remark: Generated from `#/paths/api/users/status/GET/responses/200/content/jsonPayload/title`.
                        internal var title: Components.Schemas.Title?
                        /// - Remark: Generated from `#/paths/api/users/status/GET/responses/200/content/jsonPayload/online`.
                        internal var online: Swift.Bool?
                        /// - Remark: Generated from `#/paths/api/users/status/GET/responses/200/content/jsonPayload/playing`.
                        internal var playing: Swift.Bool?
                        /// - Remark: Generated from `#/paths/api/users/status/GET/responses/200/content/jsonPayload/streaming`.
                        internal var streaming: Swift.Bool?
                        /// - Remark: Generated from `#/paths/api/users/status/GET/responses/200/content/jsonPayload/patron`.
                        internal var patron: Swift.Bool?
                        /// Creates a new `jsonPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - id:
                        ///   - name:
                        ///   - flair:
                        ///   - title:
                        ///   - online:
                        ///   - playing:
                        ///   - streaming:
                        ///   - patron:
                        internal init(
                            id: Swift.String,
                            name: Swift.String,
                            flair: Components.Schemas.Flair? = nil,
                            title: Components.Schemas.Title? = nil,
                            online: Swift.Bool? = nil,
                            playing: Swift.Bool? = nil,
                            streaming: Swift.Bool? = nil,
                            patron: Swift.Bool? = nil
                        ) {
                            self.id = id
                            self.name = name
                            self.flair = flair
                            self.title = title
                            self.online = online
                            self.playing = playing
                            self.streaming = streaming
                            self.patron = patron
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case id
                            case name
                            case flair
                            case title
                            case online
                            case playing
                            case streaming
                            case patron
                        }
                    }
                    /// - Remark: Generated from `#/paths/api/users/status/GET/responses/200/content/json`.
                    internal typealias jsonPayload = [Operations.apiUsersStatus.Output.Ok.Body.jsonPayloadPayload]
                    /// - Remark: Generated from `#/paths/api/users/status/GET/responses/200/content/application\/json`.
                    case json(Operations.apiUsersStatus.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.apiUsersStatus.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiUsersStatus.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiUsersStatus.Output.Ok.Headers = .init(),
                    body: Operations.apiUsersStatus.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The list of users and their respective statuses.
            ///
            /// - Remark: Generated from `#/paths//api/users/status/get(apiUsersStatus)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiUsersStatus.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiUsersStatus.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get all top 10
    ///
    /// Get the top 10 players for each speed and variant.
    /// See <https://lichess.org/player>.
    ///
    ///
    /// - Remark: HTTP `GET /api/player`.
    /// - Remark: Generated from `#/paths//api/player/get(player)`.
    internal enum player {
        internal static let id: Swift.String = "player"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/player/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.player.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.player.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.player.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            internal init(headers: Operations.player.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/player/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/player/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.player.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/player/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/player/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Top10s)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Top10s {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.player.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.player.Output.Ok.Headers = .init(),
                    body: Operations.player.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The list of variants with their respective top players.
            ///
            /// - Remark: Generated from `#/paths//api/player/get(player)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.player.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.player.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get one leaderboard
    ///
    /// Get the leaderboard for a single speed or variant (a.k.a. `perfType`).
    /// There is no leaderboard for correspondence or puzzles.
    /// See <https://lichess.org/player/top/200/bullet>.
    ///
    ///
    /// - Remark: HTTP `GET /api/player/top/{nb}/{perfType}`.
    /// - Remark: Generated from `#/paths//api/player/top/{nb}/{perfType}/get(playerTopNbPerfType)`.
    internal enum playerTopNbPerfType {
        internal static let id: Swift.String = "playerTopNbPerfType"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/player/top/{nb}/{perfType}/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// How many users to fetch
                ///
                /// - Remark: Generated from `#/paths/api/player/top/{nb}/{perfType}/GET/path/nb`.
                internal var nb: Swift.Int
                /// - Remark: Generated from `#/paths/api/player/top/{nb}/{perfType}/GET/path/perfType`.
                @frozen internal enum perfTypePayload: String, Codable, Hashable, Sendable {
                    case ultraBullet = "ultraBullet"
                    case bullet = "bullet"
                    case blitz = "blitz"
                    case rapid = "rapid"
                    case classical = "classical"
                    case chess960 = "chess960"
                    case crazyhouse = "crazyhouse"
                    case antichess = "antichess"
                    case atomic = "atomic"
                    case horde = "horde"
                    case kingOfTheHill = "kingOfTheHill"
                    case racingKings = "racingKings"
                    case threeCheck = "threeCheck"
                }
                /// The speed or variant
                ///
                /// - Remark: Generated from `#/paths/api/player/top/{nb}/{perfType}/GET/path/perfType`.
                internal var perfType: Operations.playerTopNbPerfType.Input.Path.perfTypePayload
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - nb: How many users to fetch
                ///   - perfType: The speed or variant
                internal init(
                    nb: Swift.Int,
                    perfType: Operations.playerTopNbPerfType.Input.Path.perfTypePayload
                ) {
                    self.nb = nb
                    self.perfType = perfType
                }
            }
            internal var path: Operations.playerTopNbPerfType.Input.Path
            /// - Remark: Generated from `#/paths/api/player/top/{nb}/{perfType}/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.playerTopNbPerfType.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.playerTopNbPerfType.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.playerTopNbPerfType.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.playerTopNbPerfType.Input.Path,
                headers: Operations.playerTopNbPerfType.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/player/top/{nb}/{perfType}/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/player/top/{nb}/{perfType}/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.playerTopNbPerfType.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/player/top/{nb}/{perfType}/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/player/top/{nb}/{perfType}/GET/responses/200/content/application\/vnd.lichess.v3+json`.
                    case application_vnd_period_lichess_period_v3_plus_json(Components.Schemas.Leaderboard)
                    /// The associated value of the enum case if `self` is `.application_vnd_period_lichess_period_v3_plus_json`.
                    ///
                    /// - Throws: An error if `self` is not `.application_vnd_period_lichess_period_v3_plus_json`.
                    /// - SeeAlso: `.application_vnd_period_lichess_period_v3_plus_json`.
                    internal var application_vnd_period_lichess_period_v3_plus_json: Components.Schemas.Leaderboard {
                        get throws {
                            switch self {
                            case let .application_vnd_period_lichess_period_v3_plus_json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.playerTopNbPerfType.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.playerTopNbPerfType.Output.Ok.Headers = .init(),
                    body: Operations.playerTopNbPerfType.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The list of top players for the variant.
            ///
            /// - Remark: Generated from `#/paths//api/player/top/{nb}/{perfType}/get(playerTopNbPerfType)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.playerTopNbPerfType.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.playerTopNbPerfType.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case application_vnd_period_lichess_period_v3_plus_json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/vnd.lichess.v3+json":
                    self = .application_vnd_period_lichess_period_v3_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_vnd_period_lichess_period_v3_plus_json:
                    return "application/vnd.lichess.v3+json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .application_vnd_period_lichess_period_v3_plus_json
                ]
            }
        }
    }
    /// Get user public data
    ///
    /// Read public data of a user.
    ///
    ///
    /// - Remark: HTTP `GET /api/user/{username}`.
    /// - Remark: Generated from `#/paths//api/user/{username}/get(apiUser)`.
    internal enum apiUser {
        internal static let id: Swift.String = "apiUser"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/user/{username}/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/user/{username}/GET/path/username`.
                internal var username: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username:
                internal init(username: Swift.String) {
                    self.username = username
                }
            }
            internal var path: Operations.apiUser.Input.Path
            /// - Remark: Generated from `#/paths/api/user/{username}/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Include user trophies
                ///
                /// - Remark: Generated from `#/paths/api/user/{username}/GET/query/trophies`.
                internal var trophies: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - trophies: Include user trophies
                internal init(trophies: Swift.Bool? = nil) {
                    self.trophies = trophies
                }
            }
            internal var query: Operations.apiUser.Input.Query
            /// - Remark: Generated from `#/paths/api/user/{username}/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiUser.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiUser.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiUser.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.apiUser.Input.Path,
                query: Operations.apiUser.Input.Query = .init(),
                headers: Operations.apiUser.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/user/{username}/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/user/{username}/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiUser.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/user/{username}/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/user/{username}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.UserExtended)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.UserExtended {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiUser.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiUser.Output.Ok.Headers = .init(),
                    body: Operations.apiUser.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The information of the user.
            ///
            /// - Remark: Generated from `#/paths//api/user/{username}/get(apiUser)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiUser.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiUser.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get rating history of a user
    ///
    /// Read rating history of a user, for all perf types.
    /// There is at most one entry per day.
    /// Format of an entry is `[year, month, day, rating]`.
    /// `month` starts at zero (January).
    ///
    ///
    /// - Remark: HTTP `GET /api/user/{username}/rating-history`.
    /// - Remark: Generated from `#/paths//api/user/{username}/rating-history/get(apiUserRatingHistory)`.
    internal enum apiUserRatingHistory {
        internal static let id: Swift.String = "apiUserRatingHistory"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/user/{username}/rating-history/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/user/{username}/rating-history/GET/path/username`.
                internal var username: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username:
                internal init(username: Swift.String) {
                    self.username = username
                }
            }
            internal var path: Operations.apiUserRatingHistory.Input.Path
            /// - Remark: Generated from `#/paths/api/user/{username}/rating-history/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiUserRatingHistory.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiUserRatingHistory.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiUserRatingHistory.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.apiUserRatingHistory.Input.Path,
                headers: Operations.apiUserRatingHistory.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/user/{username}/rating-history/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/user/{username}/rating-history/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiUserRatingHistory.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/user/{username}/rating-history/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/user/{username}/rating-history/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.RatingHistory)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.RatingHistory {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiUserRatingHistory.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiUserRatingHistory.Output.Ok.Headers = .init(),
                    body: Operations.apiUserRatingHistory.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The rating history of the user.
            ///
            /// - Remark: Generated from `#/paths//api/user/{username}/rating-history/get(apiUserRatingHistory)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiUserRatingHistory.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiUserRatingHistory.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get performance statistics of a user
    ///
    /// Read performance statistics of a user, for a single performance.
    /// Similar to the [performance pages on the website](https://lichess.org/@/thibault/perf/bullet).
    ///
    ///
    /// - Remark: HTTP `GET /api/user/{username}/perf/{perf}`.
    /// - Remark: Generated from `#/paths//api/user/{username}/perf/{perf}/get(apiUserPerf)`.
    internal enum apiUserPerf {
        internal static let id: Swift.String = "apiUserPerf"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/user/{username}/perf/{perf}/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/user/{username}/perf/{perf}/GET/path/username`.
                internal var username: Swift.String
                /// - Remark: Generated from `#/paths/api/user/{username}/perf/{perf}/GET/path/perf`.
                internal var perf: Components.Schemas.PerfType
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username:
                ///   - perf:
                internal init(
                    username: Swift.String,
                    perf: Components.Schemas.PerfType
                ) {
                    self.username = username
                    self.perf = perf
                }
            }
            internal var path: Operations.apiUserPerf.Input.Path
            /// - Remark: Generated from `#/paths/api/user/{username}/perf/{perf}/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiUserPerf.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiUserPerf.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiUserPerf.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.apiUserPerf.Input.Path,
                headers: Operations.apiUserPerf.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/user/{username}/perf/{perf}/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/user/{username}/perf/{perf}/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiUserPerf.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/user/{username}/perf/{perf}/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/user/{username}/perf/{perf}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.PerfStat)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.PerfStat {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiUserPerf.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiUserPerf.Output.Ok.Headers = .init(),
                    body: Operations.apiUserPerf.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The performance statistics of the user
            ///
            /// - Remark: Generated from `#/paths//api/user/{username}/perf/{perf}/get(apiUserPerf)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiUserPerf.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiUserPerf.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get user activity
    ///
    /// Read data to generate the activity feed of a user.
    ///
    ///
    /// - Remark: HTTP `GET /api/user/{username}/activity`.
    /// - Remark: Generated from `#/paths//api/user/{username}/activity/get(apiUserActivity)`.
    internal enum apiUserActivity {
        internal static let id: Swift.String = "apiUserActivity"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/user/{username}/activity/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/user/{username}/activity/GET/path/username`.
                internal var username: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username:
                internal init(username: Swift.String) {
                    self.username = username
                }
            }
            internal var path: Operations.apiUserActivity.Input.Path
            /// - Remark: Generated from `#/paths/api/user/{username}/activity/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiUserActivity.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiUserActivity.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiUserActivity.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.apiUserActivity.Input.Path,
                headers: Operations.apiUserActivity.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/user/{username}/activity/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/user/{username}/activity/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiUserActivity.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/user/{username}/activity/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/user/{username}/activity/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.UserActivity])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: [Components.Schemas.UserActivity] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiUserActivity.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiUserActivity.Output.Ok.Headers = .init(),
                    body: Operations.apiUserActivity.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The activity feed of the user.
            ///
            /// - Remark: Generated from `#/paths//api/user/{username}/activity/get(apiUserActivity)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiUserActivity.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiUserActivity.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get the daily puzzle
    ///
    /// Get the daily Lichess puzzle in JSON format.
    /// Alternatively, you can [post it in your slack workspace](https://lichess.org/daily-puzzle-slack).
    ///
    ///
    /// - Remark: HTTP `GET /api/puzzle/daily`.
    /// - Remark: Generated from `#/paths//api/puzzle/daily/get(apiPuzzleDaily)`.
    internal enum apiPuzzleDaily {
        internal static let id: Swift.String = "apiPuzzleDaily"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/puzzle/daily/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiPuzzleDaily.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiPuzzleDaily.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiPuzzleDaily.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            internal init(headers: Operations.apiPuzzleDaily.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/puzzle/daily/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/puzzle/daily/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiPuzzleDaily.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/puzzle/daily/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/puzzle/daily/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.PuzzleAndGame)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.PuzzleAndGame {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiPuzzleDaily.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiPuzzleDaily.Output.Ok.Headers = .init(),
                    body: Operations.apiPuzzleDaily.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The daily puzzle.
            ///
            /// - Remark: Generated from `#/paths//api/puzzle/daily/get(apiPuzzleDaily)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiPuzzleDaily.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiPuzzleDaily.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a puzzle by its ID
    ///
    /// Get a single Lichess puzzle in JSON format.
    ///
    /// - Remark: HTTP `GET /api/puzzle/{id}`.
    /// - Remark: Generated from `#/paths//api/puzzle/{id}/get(apiPuzzleId)`.
    internal enum apiPuzzleId {
        internal static let id: Swift.String = "apiPuzzleId"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/puzzle/{id}/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// The puzzle ID
                ///
                /// - Remark: Generated from `#/paths/api/puzzle/{id}/GET/path/id`.
                internal var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: The puzzle ID
                internal init(id: Swift.String) {
                    self.id = id
                }
            }
            internal var path: Operations.apiPuzzleId.Input.Path
            /// - Remark: Generated from `#/paths/api/puzzle/{id}/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiPuzzleId.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiPuzzleId.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiPuzzleId.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.apiPuzzleId.Input.Path,
                headers: Operations.apiPuzzleId.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/puzzle/{id}/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/puzzle/{id}/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiPuzzleId.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/puzzle/{id}/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/puzzle/{id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.PuzzleAndGame)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.PuzzleAndGame {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiPuzzleId.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiPuzzleId.Output.Ok.Headers = .init(),
                    body: Operations.apiPuzzleId.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The requested puzzle.
            ///
            /// - Remark: Generated from `#/paths//api/puzzle/{id}/get(apiPuzzleId)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiPuzzleId.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiPuzzleId.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a new puzzle
    ///
    /// Get a random Lichess puzzle in JSON format.
    ///
    /// If authenticated, only returns puzzles that the user has never seen before.
    ///
    /// **DO NOT** use this endpoint to enumerate puzzles for mass download. Instead, download the [full public puzzle database](https://database.lichess.org/#puzzles).
    ///
    ///
    /// - Remark: HTTP `GET /api/puzzle/next`.
    /// - Remark: Generated from `#/paths//api/puzzle/next/get(apiPuzzleNext)`.
    internal enum apiPuzzleNext {
        internal static let id: Swift.String = "apiPuzzleNext"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/puzzle/next/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// The theme or opening to filter puzzles with.
                ///
                /// Available themes are listed in [the lichess source code](https://github.com/ornicar/lila/blob/master/translation/source/puzzleTheme.xml).
                ///
                ///
                /// - Remark: Generated from `#/paths/api/puzzle/next/GET/query/angle`.
                internal var angle: Swift.String?
                /// The desired puzzle difficulty, relative to the authenticated user puzzle rating, or 1500 if anonymous.
                ///
                /// - Remark: Generated from `#/paths/api/puzzle/next/GET/query/difficulty`.
                internal var difficulty: OpenAPIRuntime.OpenAPIValueContainer?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - angle: The theme or opening to filter puzzles with.
                ///   - difficulty: The desired puzzle difficulty, relative to the authenticated user puzzle rating, or 1500 if anonymous.
                internal init(
                    angle: Swift.String? = nil,
                    difficulty: OpenAPIRuntime.OpenAPIValueContainer? = nil
                ) {
                    self.angle = angle
                    self.difficulty = difficulty
                }
            }
            internal var query: Operations.apiPuzzleNext.Input.Query
            /// - Remark: Generated from `#/paths/api/puzzle/next/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiPuzzleNext.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiPuzzleNext.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiPuzzleNext.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.apiPuzzleNext.Input.Query = .init(),
                headers: Operations.apiPuzzleNext.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/puzzle/next/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/puzzle/next/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiPuzzleNext.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/puzzle/next/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/puzzle/next/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.PuzzleAndGame)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.PuzzleAndGame {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiPuzzleNext.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiPuzzleNext.Output.Ok.Headers = .init(),
                    body: Operations.apiPuzzleNext.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The requested puzzle.
            ///
            /// - Remark: Generated from `#/paths//api/puzzle/next/get(apiPuzzleNext)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiPuzzleNext.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiPuzzleNext.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get your puzzle activity
    ///
    /// Download your puzzle activity in [ndjson](#section/Introduction/Streaming-with-ND-JSON) format.
    /// Puzzle activity is sorted by reverse chronological order (most recent first)
    /// We recommend streaming the response, for it can be very long.
    ///
    ///
    /// - Remark: HTTP `GET /api/puzzle/activity`.
    /// - Remark: Generated from `#/paths//api/puzzle/activity/get(apiPuzzleActivity)`.
    internal enum apiPuzzleActivity {
        internal static let id: Swift.String = "apiPuzzleActivity"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/puzzle/activity/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// How many entries to download. Leave empty to download all activity.
                ///
                /// - Remark: Generated from `#/paths/api/puzzle/activity/GET/query/max`.
                internal var max: Swift.Int?
                /// Download entries before this timestamp. Defaults to now. Use `before` and `max` for pagination.
                ///
                /// - Remark: Generated from `#/paths/api/puzzle/activity/GET/query/before`.
                internal var before: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - max: How many entries to download. Leave empty to download all activity.
                ///   - before: Download entries before this timestamp. Defaults to now. Use `before` and `max` for pagination.
                internal init(
                    max: Swift.Int? = nil,
                    before: Swift.Int? = nil
                ) {
                    self.max = max
                    self.before = before
                }
            }
            internal var query: Operations.apiPuzzleActivity.Input.Query
            /// - Remark: Generated from `#/paths/api/puzzle/activity/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiPuzzleActivity.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiPuzzleActivity.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiPuzzleActivity.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.apiPuzzleActivity.Input.Query = .init(),
                headers: Operations.apiPuzzleActivity.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/puzzle/activity/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/puzzle/activity/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiPuzzleActivity.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/puzzle/activity/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/puzzle/activity/GET/responses/200/content/application\/x-ndjson`.
                    case application_x_hyphen_ndjson(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_ndjson`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_ndjson`.
                    /// - SeeAlso: `.application_x_hyphen_ndjson`.
                    internal var application_x_hyphen_ndjson: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_ndjson(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiPuzzleActivity.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiPuzzleActivity.Output.Ok.Headers = .init(),
                    body: Operations.apiPuzzleActivity.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The puzzle activity of the logged in user.
            ///
            /// - Remark: Generated from `#/paths//api/puzzle/activity/get(apiPuzzleActivity)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiPuzzleActivity.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiPuzzleActivity.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_ndjson
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-ndjson":
                    self = .application_x_hyphen_ndjson
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_ndjson:
                    return "application/x-ndjson"
                }
            }
            internal static var allCases: [Self] {
                [
                    .application_x_hyphen_ndjson
                ]
            }
        }
    }
    /// Get puzzles to replay
    ///
    /// Gets the puzzle IDs of remaining puzzles to re-attempt in JSON format.
    ///
    /// - Remark: HTTP `GET /api/puzzle/replay/{days}/{theme}`.
    /// - Remark: Generated from `#/paths//api/puzzle/replay/{days}/{theme}/get(apiPuzzleReplay)`.
    internal enum apiPuzzleReplay {
        internal static let id: Swift.String = "apiPuzzleReplay"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/puzzle/replay/{days}/{theme}/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// How many days to look back when aggregating puzzle results. 30 is sensible.
                ///
                /// - Remark: Generated from `#/paths/api/puzzle/replay/{days}/{theme}/GET/path/days`.
                internal var days: Swift.Double
                /// The theme or opening to filter puzzles with.
                ///
                /// - Remark: Generated from `#/paths/api/puzzle/replay/{days}/{theme}/GET/path/theme`.
                internal var theme: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - days: How many days to look back when aggregating puzzle results. 30 is sensible.
                ///   - theme: The theme or opening to filter puzzles with.
                internal init(
                    days: Swift.Double,
                    theme: Swift.String
                ) {
                    self.days = days
                    self.theme = theme
                }
            }
            internal var path: Operations.apiPuzzleReplay.Input.Path
            /// - Remark: Generated from `#/paths/api/puzzle/replay/{days}/{theme}/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiPuzzleReplay.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiPuzzleReplay.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiPuzzleReplay.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.apiPuzzleReplay.Input.Path,
                headers: Operations.apiPuzzleReplay.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/puzzle/replay/{days}/{theme}/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/puzzle/replay/{days}/{theme}/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiPuzzleReplay.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/puzzle/replay/{days}/{theme}/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/puzzle/replay/{days}/{theme}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.PuzzleReplay)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.PuzzleReplay {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiPuzzleReplay.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiPuzzleReplay.Output.Ok.Headers = .init(),
                    body: Operations.apiPuzzleReplay.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The requested puzzles to replay.
            ///
            /// - Remark: Generated from `#/paths//api/puzzle/replay/{days}/{theme}/get(apiPuzzleReplay)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiPuzzleReplay.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiPuzzleReplay.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/puzzle/replay/{days}/{theme}/GET/responses/404/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/puzzle/replay/{days}/{theme}/GET/responses/404/content/json`.
                    internal struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/api/puzzle/replay/{days}/{theme}/GET/responses/404/content/json/error`.
                        internal var error: Swift.String?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - error:
                        internal init(error: Swift.String? = nil) {
                            self.error = error
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case error
                        }
                    }
                    /// - Remark: Generated from `#/paths/api/puzzle/replay/{days}/{theme}/GET/responses/404/content/application\/json`.
                    case json(Operations.apiPuzzleReplay.Output.NotFound.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.apiPuzzleReplay.Output.NotFound.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiPuzzleReplay.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.apiPuzzleReplay.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// No puzzles to replay were found
            ///
            /// - Remark: Generated from `#/paths//api/puzzle/replay/{days}/{theme}/get(apiPuzzleReplay)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.apiPuzzleReplay.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Operations.apiPuzzleReplay.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get your puzzle dashboard
    ///
    /// Download your [puzzle dashboard](https://lichess.org/training/dashboard/30/dashboard) as JSON.
    /// Also includes all puzzle themes played, with aggregated results.
    /// Allows re-creating the [improvement/strengths](https://lichess.org/training/dashboard/30/improvementAreas) interfaces.
    ///
    ///
    /// - Remark: HTTP `GET /api/puzzle/dashboard/{days}`.
    /// - Remark: Generated from `#/paths//api/puzzle/dashboard/{days}/get(apiPuzzleDashboard)`.
    internal enum apiPuzzleDashboard {
        internal static let id: Swift.String = "apiPuzzleDashboard"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/puzzle/dashboard/{days}/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// How many days to look back when aggregating puzzle results. 30 is sensible.
                ///
                /// - Remark: Generated from `#/paths/api/puzzle/dashboard/{days}/GET/path/days`.
                internal var days: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - days: How many days to look back when aggregating puzzle results. 30 is sensible.
                internal init(days: Swift.Int) {
                    self.days = days
                }
            }
            internal var path: Operations.apiPuzzleDashboard.Input.Path
            /// - Remark: Generated from `#/paths/api/puzzle/dashboard/{days}/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiPuzzleDashboard.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiPuzzleDashboard.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiPuzzleDashboard.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.apiPuzzleDashboard.Input.Path,
                headers: Operations.apiPuzzleDashboard.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/puzzle/dashboard/{days}/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/puzzle/dashboard/{days}/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiPuzzleDashboard.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/puzzle/dashboard/{days}/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/puzzle/dashboard/{days}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.PuzzleDashboard)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.PuzzleDashboard {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiPuzzleDashboard.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiPuzzleDashboard.Output.Ok.Headers = .init(),
                    body: Operations.apiPuzzleDashboard.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The puzzle dashboard of the logged in user.
            ///
            /// - Remark: Generated from `#/paths//api/puzzle/dashboard/{days}/get(apiPuzzleDashboard)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiPuzzleDashboard.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiPuzzleDashboard.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get the storm dashboard of a player
    ///
    /// Download the [storm dashboard](https://lichess.org/storm/dashboard/mrbasso) of any player as JSON.
    /// Contains the aggregated highscores, and the history of storm runs aggregated by days.
    /// Use `?days=0` if you only care about the highscores.
    ///
    ///
    /// - Remark: HTTP `GET /api/storm/dashboard/{username}`.
    /// - Remark: Generated from `#/paths//api/storm/dashboard/{username}/get(apiStormDashboard)`.
    internal enum apiStormDashboard {
        internal static let id: Swift.String = "apiStormDashboard"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/storm/dashboard/{username}/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// Username of the player
                ///
                /// - Remark: Generated from `#/paths/api/storm/dashboard/{username}/GET/path/username`.
                internal var username: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username: Username of the player
                internal init(username: Swift.String) {
                    self.username = username
                }
            }
            internal var path: Operations.apiStormDashboard.Input.Path
            /// - Remark: Generated from `#/paths/api/storm/dashboard/{username}/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// How many days of history to return
                ///
                /// - Remark: Generated from `#/paths/api/storm/dashboard/{username}/GET/query/days`.
                internal var days: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - days: How many days of history to return
                internal init(days: Swift.Int? = nil) {
                    self.days = days
                }
            }
            internal var query: Operations.apiStormDashboard.Input.Query
            /// - Remark: Generated from `#/paths/api/storm/dashboard/{username}/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiStormDashboard.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiStormDashboard.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiStormDashboard.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.apiStormDashboard.Input.Path,
                query: Operations.apiStormDashboard.Input.Query = .init(),
                headers: Operations.apiStormDashboard.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/storm/dashboard/{username}/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/storm/dashboard/{username}/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiStormDashboard.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/storm/dashboard/{username}/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/storm/dashboard/{username}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.PuzzleStormDashboard)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.PuzzleStormDashboard {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiStormDashboard.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiStormDashboard.Output.Ok.Headers = .init(),
                    body: Operations.apiStormDashboard.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The storm dashboard of a player.
            ///
            /// - Remark: Generated from `#/paths//api/storm/dashboard/{username}/get(apiStormDashboard)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiStormDashboard.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiStormDashboard.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create and join a puzzle race
    ///
    /// Create a new private [puzzle race](https://lichess.org/racer).
    /// The Lichess user who creates the race must join the race page,
    /// and manually start the race when enough players have joined.
    /// - <https://lichess.org/racer>
    ///
    ///
    /// - Remark: HTTP `POST /api/racer`.
    /// - Remark: Generated from `#/paths//api/racer/post(racerPost)`.
    internal enum racerPost {
        internal static let id: Swift.String = "racerPost"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/racer/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.racerPost.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.racerPost.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.racerPost.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            internal init(headers: Operations.racerPost.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/racer/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/racer/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.racerPost.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/racer/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/racer/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.PuzzleRacer)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.PuzzleRacer {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.racerPost.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.racerPost.Output.Ok.Headers = .init(),
                    body: Operations.racerPost.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The new puzzle race.
            ///
            /// - Remark: Generated from `#/paths//api/racer/post(racerPost)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.racerPost.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.racerPost.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get puzzle race results
    ///
    /// Get the results of a [puzzle race](https://lichess.org/racer).
    /// Returns information about players, puzzles, and the current status of the race.
    /// - <https://lichess.org/racer>
    ///
    /// Note that Lichess puzzle races are not persisted, and are only available
    /// for 30 minutes. After that delay, they are permanently deleted.
    ///
    ///
    /// - Remark: HTTP `GET /api/racer/{id}`.
    /// - Remark: Generated from `#/paths//api/racer/{id}/get(racerGet)`.
    internal enum racerGet {
        internal static let id: Swift.String = "racerGet"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/racer/{id}/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// The puzzle race ID
                ///
                /// - Remark: Generated from `#/paths/api/racer/{id}/GET/path/id`.
                internal var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: The puzzle race ID
                internal init(id: Swift.String) {
                    self.id = id
                }
            }
            internal var path: Operations.racerGet.Input.Path
            /// - Remark: Generated from `#/paths/api/racer/{id}/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.racerGet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.racerGet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.racerGet.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.racerGet.Input.Path,
                headers: Operations.racerGet.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/racer/{id}/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/racer/{id}/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.racerGet.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/racer/{id}/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/racer/{id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.PuzzleRaceResults)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.PuzzleRaceResults {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.racerGet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.racerGet.Output.Ok.Headers = .init(),
                    body: Operations.racerGet.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The puzzle race results.
            ///
            /// - Remark: Generated from `#/paths//api/racer/{id}/get(racerGet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.racerGet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.racerGet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/racer/{id}/GET/responses/404/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/racer/{id}/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.NotFound)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.NotFound {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.racerGet.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.racerGet.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// The puzzle race was not found, or is no longer available.
            ///
            /// - Remark: Generated from `#/paths//api/racer/{id}/get(racerGet)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.racerGet.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Operations.racerGet.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get users by ID
    ///
    /// Get up to 300 users by their IDs. Users are returned in the same order as the IDs.
    /// The method is `POST` to allow a longer list of IDs to be sent in the request body.
    /// Please do not try to download all the Lichess users with this endpoint, or any other endpoint.
    /// An API is not a way to fully export a website. We do not provide a full download of the Lichess users.
    /// This endpoint is limited to 8,000 users every 10 minutes, and 120,000 every day.
    ///
    ///
    /// - Remark: HTTP `POST /api/users`.
    /// - Remark: Generated from `#/paths//api/users/post(apiUsers)`.
    internal enum apiUsers {
        internal static let id: Swift.String = "apiUsers"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/users/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiUsers.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiUsers.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiUsers.Input.Headers
            /// - Remark: Generated from `#/paths/api/users/POST/requestBody`.
            @frozen internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/users/POST/requestBody/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
            }
            internal var body: Operations.apiUsers.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            internal init(
                headers: Operations.apiUsers.Input.Headers = .init(),
                body: Operations.apiUsers.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/users/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/users/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiUsers.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/users/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/users/POST/responses/200/content/application\/json`.
                    case json([Components.Schemas.User])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: [Components.Schemas.User] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiUsers.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiUsers.Output.Ok.Headers = .init(),
                    body: Operations.apiUsers.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The list of users.
            ///
            /// - Remark: Generated from `#/paths//api/users/post(apiUsers)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiUsers.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiUsers.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get my profile
    ///
    /// Public information about the logged in user.
    ///
    ///
    /// - Remark: HTTP `GET /api/account`.
    /// - Remark: Generated from `#/paths//api/account/get(accountMe)`.
    internal enum accountMe {
        internal static let id: Swift.String = "accountMe"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/account/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.accountMe.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.accountMe.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.accountMe.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            internal init(headers: Operations.accountMe.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/account/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/account/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.accountMe.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/account/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/account/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.UserExtended)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.UserExtended {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.accountMe.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.accountMe.Output.Ok.Headers = .init(),
                    body: Operations.accountMe.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The public information about the logged in user.
            ///
            /// - Remark: Generated from `#/paths//api/account/get(accountMe)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.accountMe.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.accountMe.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get my email address
    ///
    /// Read the email address of the logged in user.
    ///
    ///
    /// - Remark: HTTP `GET /api/account/email`.
    /// - Remark: Generated from `#/paths//api/account/email/get(accountEmail)`.
    internal enum accountEmail {
        internal static let id: Swift.String = "accountEmail"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/account/email/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.accountEmail.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.accountEmail.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.accountEmail.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            internal init(headers: Operations.accountEmail.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/account/email/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/account/email/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.accountEmail.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/account/email/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/account/email/GET/responses/200/content/json`.
                    internal struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/api/account/email/GET/responses/200/content/json/email`.
                        internal var email: Swift.String?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - email:
                        internal init(email: Swift.String? = nil) {
                            self.email = email
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case email
                        }
                    }
                    /// - Remark: Generated from `#/paths/api/account/email/GET/responses/200/content/application\/json`.
                    case json(Operations.accountEmail.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.accountEmail.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.accountEmail.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.accountEmail.Output.Ok.Headers = .init(),
                    body: Operations.accountEmail.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The email address of the logged in user.
            ///
            /// - Remark: Generated from `#/paths//api/account/email/get(accountEmail)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.accountEmail.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.accountEmail.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get my preferences
    ///
    /// Read the preferences of the logged in user.
    /// - <https://lichess.org/account/preferences/game-display>
    /// - <https://github.com/ornicar/lila/blob/master/modules/pref/src/main/Pref.scala>
    ///
    ///
    /// - Remark: HTTP `GET /api/account/preferences`.
    /// - Remark: Generated from `#/paths//api/account/preferences/get(account)`.
    internal enum account {
        internal static let id: Swift.String = "account"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/account/preferences/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.account.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.account.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.account.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            internal init(headers: Operations.account.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/account/preferences/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/account/preferences/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.account.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/account/preferences/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/account/preferences/GET/responses/200/content/json`.
                    internal struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/api/account/preferences/GET/responses/200/content/json/prefs`.
                        internal var prefs: Components.Schemas.UserPreferences?
                        /// - Remark: Generated from `#/paths/api/account/preferences/GET/responses/200/content/json/language`.
                        internal var language: Swift.String?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - prefs:
                        ///   - language:
                        internal init(
                            prefs: Components.Schemas.UserPreferences? = nil,
                            language: Swift.String? = nil
                        ) {
                            self.prefs = prefs
                            self.language = language
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case prefs
                            case language
                        }
                    }
                    /// - Remark: Generated from `#/paths/api/account/preferences/GET/responses/200/content/application\/json`.
                    case json(Operations.account.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.account.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.account.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.account.Output.Ok.Headers = .init(),
                    body: Operations.account.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The preferences of the logged in user.
            ///
            /// - Remark: Generated from `#/paths//api/account/preferences/get(account)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.account.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.account.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get my kid mode status
    ///
    /// Read the kid mode status of the logged in user.
    /// - <https://lichess.org/account/kid>
    ///
    ///
    /// - Remark: HTTP `GET /api/account/kid`.
    /// - Remark: Generated from `#/paths//api/account/kid/get(accountKid)`.
    internal enum accountKid {
        internal static let id: Swift.String = "accountKid"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/account/kid/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.accountKid.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.accountKid.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.accountKid.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            internal init(headers: Operations.accountKid.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/account/kid/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/account/kid/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.accountKid.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/account/kid/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/account/kid/GET/responses/200/content/json`.
                    internal struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/api/account/kid/GET/responses/200/content/json/kid`.
                        internal var kid: Swift.Bool?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - kid:
                        internal init(kid: Swift.Bool? = nil) {
                            self.kid = kid
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case kid
                        }
                    }
                    /// - Remark: Generated from `#/paths/api/account/kid/GET/responses/200/content/application\/json`.
                    case json(Operations.accountKid.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.accountKid.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.accountKid.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.accountKid.Output.Ok.Headers = .init(),
                    body: Operations.accountKid.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The kid mode status of the logged in user.
            ///
            /// - Remark: Generated from `#/paths//api/account/kid/get(accountKid)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.accountKid.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.accountKid.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Set my kid mode status
    ///
    /// Set the kid mode status of the logged in user.
    /// - <https://lichess.org/account/kid>
    ///
    ///
    /// - Remark: HTTP `POST /api/account/kid`.
    /// - Remark: Generated from `#/paths//api/account/kid/post(accountKidPost)`.
    internal enum accountKidPost {
        internal static let id: Swift.String = "accountKidPost"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/account/kid/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// Kid mode status
                ///
                /// - Remark: Generated from `#/paths/api/account/kid/POST/query/v`.
                internal var v: Swift.Bool
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - v: Kid mode status
                internal init(v: Swift.Bool) {
                    self.v = v
                }
            }
            internal var query: Operations.accountKidPost.Input.Query
            /// - Remark: Generated from `#/paths/api/account/kid/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.accountKidPost.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.accountKidPost.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.accountKidPost.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.accountKidPost.Input.Query,
                headers: Operations.accountKidPost.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/account/kid/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/account/kid/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.accountKidPost.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/account/kid/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/account/kid/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.accountKidPost.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.accountKidPost.Output.Ok.Headers = .init(),
                    body: Operations.accountKidPost.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The kid mode status was set successfully for the logged in user.
            ///
            /// - Remark: Generated from `#/paths//api/account/kid/post(accountKidPost)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.accountKidPost.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.accountKidPost.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get my timeline
    ///
    /// Get the timeline events of the logged in user.
    ///
    ///
    /// - Remark: HTTP `GET /api/timeline`.
    /// - Remark: Generated from `#/paths//api/timeline/get(timeline)`.
    internal enum timeline {
        internal static let id: Swift.String = "timeline"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/timeline/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Show events since this timestamp.
                ///
                /// - Remark: Generated from `#/paths/api/timeline/GET/query/since`.
                internal var since: Swift.Int?
                /// Max number of events to fetch.
                ///
                /// - Remark: Generated from `#/paths/api/timeline/GET/query/nb`.
                internal var nb: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - since: Show events since this timestamp.
                ///   - nb: Max number of events to fetch.
                internal init(
                    since: Swift.Int? = nil,
                    nb: Swift.Int? = nil
                ) {
                    self.since = since
                    self.nb = nb
                }
            }
            internal var query: Operations.timeline.Input.Query
            /// - Remark: Generated from `#/paths/api/timeline/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.timeline.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.timeline.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.timeline.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.timeline.Input.Query = .init(),
                headers: Operations.timeline.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/timeline/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/timeline/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.timeline.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/timeline/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/timeline/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Timeline)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Timeline {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.timeline.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.timeline.Output.Ok.Headers = .init(),
                    body: Operations.timeline.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The events in the timeline of the logged in user.
            ///
            /// - Remark: Generated from `#/paths//api/timeline/get(timeline)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.timeline.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.timeline.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Export one game
    ///
    /// Download one game in either PGN or JSON format.
    /// Ongoing games are delayed by a few seconds ranging from 3 to 60 depending on the time control, as to prevent cheat bots from using this API.
    ///
    ///
    /// - Remark: HTTP `GET /game/export/{gameId}`.
    /// - Remark: Generated from `#/paths//game/export/{gameId}/get(gamePgn)`.
    internal enum gamePgn {
        internal static let id: Swift.String = "gamePgn"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/game/export/{gameId}/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// The game ID
                ///
                /// - Remark: Generated from `#/paths/game/export/{gameId}/GET/path/gameId`.
                internal var gameId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - gameId: The game ID
                internal init(gameId: Swift.String) {
                    self.gameId = gameId
                }
            }
            internal var path: Operations.gamePgn.Input.Path
            /// - Remark: Generated from `#/paths/game/export/{gameId}/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Include the PGN moves.
                ///
                /// - Remark: Generated from `#/paths/game/export/{gameId}/GET/query/moves`.
                internal var moves: Swift.Bool?
                /// Include the full PGN within the JSON response, in a `pgn` field.
                ///
                /// - Remark: Generated from `#/paths/game/export/{gameId}/GET/query/pgnInJson`.
                internal var pgnInJson: Swift.Bool?
                /// Include the PGN tags.
                ///
                /// - Remark: Generated from `#/paths/game/export/{gameId}/GET/query/tags`.
                internal var tags: Swift.Bool?
                /// Include clock status when available.
                /// Either as PGN comments: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`
                /// Or in a `clocks` JSON field, as centisecond integers, depending on the response type.
                ///
                ///
                /// - Remark: Generated from `#/paths/game/export/{gameId}/GET/query/clocks`.
                internal var clocks: Swift.Bool?
                /// Include analysis evaluations and comments, when available.
                /// Either as PGN comments: `12. Bxf6 { [%eval 0.23] } a3 { [%eval -1.09] }`
                /// Or in an `analysis` JSON field, depending on the response type.
                ///
                ///
                /// - Remark: Generated from `#/paths/game/export/{gameId}/GET/query/evals`.
                internal var evals: Swift.Bool?
                /// Include [accuracy percent](https://lichess.org/page/accuracy) of each player, when available. Only available in JSON.
                ///
                ///
                /// - Remark: Generated from `#/paths/game/export/{gameId}/GET/query/accuracy`.
                internal var accuracy: Swift.Bool?
                /// Include the opening name.
                /// Example: `[Opening "King's Gambit Accepted, King's Knight Gambit"]`
                ///
                ///
                /// - Remark: Generated from `#/paths/game/export/{gameId}/GET/query/opening`.
                internal var opening: Swift.Bool?
                /// Plies which mark the beginning of the middlegame and endgame.
                /// Only available in JSON
                ///
                ///
                /// - Remark: Generated from `#/paths/game/export/{gameId}/GET/query/division`.
                internal var division: Swift.Bool?
                /// Insert textual annotations in the PGN about the opening, analysis variations, mistakes, and game termination.
                /// Example: `5... g4? { (-0.98 → 0.60) Mistake. Best move was h6. } (5... h6 6. d4 Ne7 7. g3 d5 8. exd5 fxg3 9. hxg3 c6 10. dxc6)`
                ///
                ///
                /// - Remark: Generated from `#/paths/game/export/{gameId}/GET/query/literate`.
                internal var literate: Swift.Bool?
                /// Add a `bookmarked: true` JSON field when the logged in user has bookmarked the game.
                /// The response type must be set to `application/x-ndjson` by the request `Accept` header.
                ///
                ///
                /// - Remark: Generated from `#/paths/game/export/{gameId}/GET/query/withBookmarked`.
                internal var withBookmarked: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - moves: Include the PGN moves.
                ///   - pgnInJson: Include the full PGN within the JSON response, in a `pgn` field.
                ///   - tags: Include the PGN tags.
                ///   - clocks: Include clock status when available.
                ///   - evals: Include analysis evaluations and comments, when available.
                ///   - accuracy: Include [accuracy percent](https://lichess.org/page/accuracy) of each player, when available. Only available in JSON.
                ///   - opening: Include the opening name.
                ///   - division: Plies which mark the beginning of the middlegame and endgame.
                ///   - literate: Insert textual annotations in the PGN about the opening, analysis variations, mistakes, and game termination.
                ///   - withBookmarked: Add a `bookmarked: true` JSON field when the logged in user has bookmarked the game.
                internal init(
                    moves: Swift.Bool? = nil,
                    pgnInJson: Swift.Bool? = nil,
                    tags: Swift.Bool? = nil,
                    clocks: Swift.Bool? = nil,
                    evals: Swift.Bool? = nil,
                    accuracy: Swift.Bool? = nil,
                    opening: Swift.Bool? = nil,
                    division: Swift.Bool? = nil,
                    literate: Swift.Bool? = nil,
                    withBookmarked: Swift.Bool? = nil
                ) {
                    self.moves = moves
                    self.pgnInJson = pgnInJson
                    self.tags = tags
                    self.clocks = clocks
                    self.evals = evals
                    self.accuracy = accuracy
                    self.opening = opening
                    self.division = division
                    self.literate = literate
                    self.withBookmarked = withBookmarked
                }
            }
            internal var query: Operations.gamePgn.Input.Query
            /// - Remark: Generated from `#/paths/game/export/{gameId}/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gamePgn.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gamePgn.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.gamePgn.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.gamePgn.Input.Path,
                query: Operations.gamePgn.Input.Query = .init(),
                headers: Operations.gamePgn.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/game/export/{gameId}/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/game/export/{gameId}/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.gamePgn.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/game/export/{gameId}/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/game/export/{gameId}/GET/responses/200/content/application\/x-chess-pgn`.
                    case application_x_hyphen_chess_hyphen_pgn(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_chess_hyphen_pgn`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_chess_hyphen_pgn`.
                    /// - SeeAlso: `.application_x_hyphen_chess_hyphen_pgn`.
                    internal var application_x_hyphen_chess_hyphen_pgn: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_chess_hyphen_pgn(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/x-chess-pgn",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/game/export/{gameId}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.GameJson)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.GameJson {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.gamePgn.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.gamePgn.Output.Ok.Headers = .init(),
                    body: Operations.gamePgn.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The game representation.
            ///
            /// - Remark: Generated from `#/paths//game/export/{gameId}/get(gamePgn)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.gamePgn.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.gamePgn.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_chess_hyphen_pgn
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-chess-pgn":
                    self = .application_x_hyphen_chess_hyphen_pgn
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_chess_hyphen_pgn:
                    return "application/x-chess-pgn"
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .application_x_hyphen_chess_hyphen_pgn,
                    .json
                ]
            }
        }
    }
    /// Export ongoing game of a user
    ///
    /// Download the ongoing game, or the last game played, of a user.
    /// Available in either PGN or JSON format.
    /// Ongoing games are delayed by a few seconds ranging from 3 to 60 depending on the time control, as to prevent cheat bots from using this API.
    ///
    ///
    /// - Remark: HTTP `GET /api/user/{username}/current-game`.
    /// - Remark: Generated from `#/paths//api/user/{username}/current-game/get(apiUserCurrentGame)`.
    internal enum apiUserCurrentGame {
        internal static let id: Swift.String = "apiUserCurrentGame"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/user/{username}/current-game/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/user/{username}/current-game/GET/path/username`.
                internal var username: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username:
                internal init(username: Swift.String) {
                    self.username = username
                }
            }
            internal var path: Operations.apiUserCurrentGame.Input.Path
            /// - Remark: Generated from `#/paths/api/user/{username}/current-game/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Include the PGN moves.
                ///
                /// - Remark: Generated from `#/paths/api/user/{username}/current-game/GET/query/moves`.
                internal var moves: Swift.Bool?
                /// Include the full PGN within the JSON response, in a `pgn` field.
                ///
                /// - Remark: Generated from `#/paths/api/user/{username}/current-game/GET/query/pgnInJson`.
                internal var pgnInJson: Swift.Bool?
                /// Include the PGN tags.
                ///
                /// - Remark: Generated from `#/paths/api/user/{username}/current-game/GET/query/tags`.
                internal var tags: Swift.Bool?
                /// Include clock status when available.
                /// Either as PGN comments: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`
                /// Or in a `clocks` JSON field, as centisecond integers, depending on the response type.
                ///
                ///
                /// - Remark: Generated from `#/paths/api/user/{username}/current-game/GET/query/clocks`.
                internal var clocks: Swift.Bool?
                /// Include analysis evaluations and comments, when available.
                /// Either as PGN comments: `12. Bxf6 { [%eval 0.23] } a3 { [%eval -1.09] }`
                /// Or in an `analysis` JSON field, depending on the response type.
                ///
                ///
                /// - Remark: Generated from `#/paths/api/user/{username}/current-game/GET/query/evals`.
                internal var evals: Swift.Bool?
                /// Include [accuracy percent](https://lichess.org/page/accuracy) of each player, when available. Only available in JSON.
                ///
                ///
                /// - Remark: Generated from `#/paths/api/user/{username}/current-game/GET/query/accuracy`.
                internal var accuracy: Swift.Bool?
                /// Include the opening name.
                /// Example: `[Opening "King's Gambit Accepted, King's Knight Gambit"]`
                ///
                ///
                /// - Remark: Generated from `#/paths/api/user/{username}/current-game/GET/query/opening`.
                internal var opening: Swift.Bool?
                /// Plies which mark the beginning of the middlegame and endgame.
                /// Only available in JSON
                ///
                ///
                /// - Remark: Generated from `#/paths/api/user/{username}/current-game/GET/query/division`.
                internal var division: Swift.Bool?
                /// Insert textual annotations in the PGN about the opening, analysis variations, mistakes, and game termination.
                /// Example: `5... g4? { (-0.98 → 0.60) Mistake. Best move was h6. } (5... h6 6. d4 Ne7 7. g3 d5 8. exd5 fxg3 9. hxg3 c6 10. dxc6)`
                ///
                ///
                /// - Remark: Generated from `#/paths/api/user/{username}/current-game/GET/query/literate`.
                internal var literate: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - moves: Include the PGN moves.
                ///   - pgnInJson: Include the full PGN within the JSON response, in a `pgn` field.
                ///   - tags: Include the PGN tags.
                ///   - clocks: Include clock status when available.
                ///   - evals: Include analysis evaluations and comments, when available.
                ///   - accuracy: Include [accuracy percent](https://lichess.org/page/accuracy) of each player, when available. Only available in JSON.
                ///   - opening: Include the opening name.
                ///   - division: Plies which mark the beginning of the middlegame and endgame.
                ///   - literate: Insert textual annotations in the PGN about the opening, analysis variations, mistakes, and game termination.
                internal init(
                    moves: Swift.Bool? = nil,
                    pgnInJson: Swift.Bool? = nil,
                    tags: Swift.Bool? = nil,
                    clocks: Swift.Bool? = nil,
                    evals: Swift.Bool? = nil,
                    accuracy: Swift.Bool? = nil,
                    opening: Swift.Bool? = nil,
                    division: Swift.Bool? = nil,
                    literate: Swift.Bool? = nil
                ) {
                    self.moves = moves
                    self.pgnInJson = pgnInJson
                    self.tags = tags
                    self.clocks = clocks
                    self.evals = evals
                    self.accuracy = accuracy
                    self.opening = opening
                    self.division = division
                    self.literate = literate
                }
            }
            internal var query: Operations.apiUserCurrentGame.Input.Query
            /// - Remark: Generated from `#/paths/api/user/{username}/current-game/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiUserCurrentGame.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiUserCurrentGame.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiUserCurrentGame.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.apiUserCurrentGame.Input.Path,
                query: Operations.apiUserCurrentGame.Input.Query = .init(),
                headers: Operations.apiUserCurrentGame.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/user/{username}/current-game/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/user/{username}/current-game/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiUserCurrentGame.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/user/{username}/current-game/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/user/{username}/current-game/GET/responses/200/content/application\/x-chess-pgn`.
                    case application_x_hyphen_chess_hyphen_pgn(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_chess_hyphen_pgn`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_chess_hyphen_pgn`.
                    /// - SeeAlso: `.application_x_hyphen_chess_hyphen_pgn`.
                    internal var application_x_hyphen_chess_hyphen_pgn: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_chess_hyphen_pgn(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/x-chess-pgn",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/api/user/{username}/current-game/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.GameJson)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.GameJson {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiUserCurrentGame.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiUserCurrentGame.Output.Ok.Headers = .init(),
                    body: Operations.apiUserCurrentGame.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The ongoing (or last) game of a user.
            ///
            /// - Remark: Generated from `#/paths//api/user/{username}/current-game/get(apiUserCurrentGame)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiUserCurrentGame.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiUserCurrentGame.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_chess_hyphen_pgn
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-chess-pgn":
                    self = .application_x_hyphen_chess_hyphen_pgn
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_chess_hyphen_pgn:
                    return "application/x-chess-pgn"
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .application_x_hyphen_chess_hyphen_pgn,
                    .json
                ]
            }
        }
    }
    /// Export games of a user
    ///
    /// Download all games of any user in PGN or [ndjson](#section/Introduction/Streaming-with-ND-JSON) format.
    /// Games are sorted by reverse chronological order (most recent first).
    /// We recommend streaming the response, for it can be very long.
    /// <https://lichess.org/@/german11> for instance has more than 500,000 games.
    /// The game stream is throttled, depending on who is making the request:
    ///   - Anonymous request: 20 games per second
    ///   - [OAuth2 authenticated](#section/Introduction/Authentication) request: 30 games per second
    ///   - Authenticated, downloading your own games: 60 games per second
    ///
    ///
    /// - Remark: HTTP `GET /api/games/user/{username}`.
    /// - Remark: Generated from `#/paths//api/games/user/{username}/get(apiGamesUser)`.
    internal enum apiGamesUser {
        internal static let id: Swift.String = "apiGamesUser"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/games/user/{username}/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// The user name.
                ///
                /// - Remark: Generated from `#/paths/api/games/user/{username}/GET/path/username`.
                internal var username: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username: The user name.
                internal init(username: Swift.String) {
                    self.username = username
                }
            }
            internal var path: Operations.apiGamesUser.Input.Path
            /// - Remark: Generated from `#/paths/api/games/user/{username}/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Download games played since this timestamp. Defaults to account creation date.
                ///
                /// - Remark: Generated from `#/paths/api/games/user/{username}/GET/query/since`.
                internal var since: Swift.Int?
                /// Download games played until this timestamp. Defaults to now.
                ///
                /// - Remark: Generated from `#/paths/api/games/user/{username}/GET/query/until`.
                internal var until: Swift.Int?
                /// How many games to download. Leave empty to download all games.
                ///
                /// - Remark: Generated from `#/paths/api/games/user/{username}/GET/query/max`.
                internal var max: Swift.Int?
                /// [Filter] Only games played against this opponent
                ///
                /// - Remark: Generated from `#/paths/api/games/user/{username}/GET/query/vs`.
                internal var vs: Swift.String?
                /// [Filter] Only rated (`true`) or casual (`false`) games
                ///
                /// - Remark: Generated from `#/paths/api/games/user/{username}/GET/query/rated`.
                internal var rated: Swift.Bool?
                /// - Remark: Generated from `#/paths/api/games/user/{username}/GET/query/perfType`.
                internal struct perfTypePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/api/games/user/{username}/GET/query/perfType/value1`.
                    internal var value1: Components.Schemas.PerfType
                    /// - Remark: Generated from `#/paths/api/games/user/{username}/GET/query/perfType/value2`.
                    internal var value2: OpenAPIRuntime.OpenAPIValueContainer
                    /// Creates a new `perfTypePayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    ///   - value2:
                    internal init(
                        value1: Components.Schemas.PerfType,
                        value2: OpenAPIRuntime.OpenAPIValueContainer
                    ) {
                        self.value1 = value1
                        self.value2 = value2
                    }
                    internal init(from decoder: any Decoder) throws {
                        value1 = try decoder.decodeFromSingleValueContainer()
                        value2 = try .init(from: decoder)
                    }
                    internal func encode(to encoder: any Encoder) throws {
                        try encoder.encodeToSingleValueContainer(value1)
                    }
                }
                /// [Filter] Only games in these speeds or variants.
                /// Multiple perf types can be specified, separated by a comma.
                /// Example: blitz,rapid,classical
                ///
                ///
                /// - Remark: Generated from `#/paths/api/games/user/{username}/GET/query/perfType`.
                internal var perfType: Operations.apiGamesUser.Input.Query.perfTypePayload?
                /// - Remark: Generated from `#/paths/api/games/user/{username}/GET/query/color`.
                @frozen internal enum colorPayload: String, Codable, Hashable, Sendable {
                    case white = "white"
                    case black = "black"
                }
                /// [Filter] Only games played as this color.
                ///
                /// - Remark: Generated from `#/paths/api/games/user/{username}/GET/query/color`.
                internal var color: Operations.apiGamesUser.Input.Query.colorPayload?
                /// [Filter] Only games with or without a computer analysis available
                ///
                /// - Remark: Generated from `#/paths/api/games/user/{username}/GET/query/analysed`.
                internal var analysed: Swift.Bool?
                /// Include the PGN moves.
                ///
                /// - Remark: Generated from `#/paths/api/games/user/{username}/GET/query/moves`.
                internal var moves: Swift.Bool?
                /// Include the full PGN within the JSON response, in a `pgn` field. The response type must be set to `application/x-ndjson` by the request `Accept` header.
                ///
                /// - Remark: Generated from `#/paths/api/games/user/{username}/GET/query/pgnInJson`.
                internal var pgnInJson: Swift.Bool?
                /// Include the PGN tags.
                ///
                /// - Remark: Generated from `#/paths/api/games/user/{username}/GET/query/tags`.
                internal var tags: Swift.Bool?
                /// Include clock status when available.
                /// Either as PGN comments: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`
                /// Or in a `clocks` JSON field, as centisecond integers, depending on the response type.
                ///
                ///
                /// - Remark: Generated from `#/paths/api/games/user/{username}/GET/query/clocks`.
                internal var clocks: Swift.Bool?
                /// Include analysis evaluations and comments, when available.
                /// Either as PGN comments: `12. Bxf6 { [%eval 0.23] } a3 { [%eval -1.09] }`
                /// Or in an `analysis` JSON field, depending on the response type.
                ///
                ///
                /// - Remark: Generated from `#/paths/api/games/user/{username}/GET/query/evals`.
                internal var evals: Swift.Bool?
                /// Include [accuracy percent](https://lichess.org/page/accuracy) of each player, when available. Only available in JSON.
                ///
                ///
                /// - Remark: Generated from `#/paths/api/games/user/{username}/GET/query/accuracy`.
                internal var accuracy: Swift.Bool?
                /// Include the opening name.
                /// Example: `[Opening "King's Gambit Accepted, King's Knight Gambit"]`
                ///
                ///
                /// - Remark: Generated from `#/paths/api/games/user/{username}/GET/query/opening`.
                internal var opening: Swift.Bool?
                /// Plies which mark the beginning of the middlegame and endgame.
                /// Only available in JSON
                ///
                ///
                /// - Remark: Generated from `#/paths/api/games/user/{username}/GET/query/division`.
                internal var division: Swift.Bool?
                /// Ongoing games are delayed by a few seconds ranging from 3 to 60 depending on the time control, as to prevent cheat bots from using this API.
                ///
                /// - Remark: Generated from `#/paths/api/games/user/{username}/GET/query/ongoing`.
                internal var ongoing: Swift.Bool?
                /// Include finished games. Set to `false` to only get ongoing games.
                ///
                /// - Remark: Generated from `#/paths/api/games/user/{username}/GET/query/finished`.
                internal var finished: Swift.Bool?
                /// Insert textual annotations in the PGN about the opening, analysis variations, mistakes, and game termination.
                /// Example: `5... g4? { (-0.98 → 0.60) Mistake. Best move was h6. } (5... h6 6. d4 Ne7 7. g3 d5 8. exd5 fxg3 9. hxg3 c6 10. dxc6)`
                ///
                ///
                /// - Remark: Generated from `#/paths/api/games/user/{username}/GET/query/literate`.
                internal var literate: Swift.Bool?
                /// Include the FEN notation of the last position of the game.
                /// The response type must be set to `application/x-ndjson` by the request `Accept` header.
                ///
                ///
                /// - Remark: Generated from `#/paths/api/games/user/{username}/GET/query/lastFen`.
                internal var lastFen: Swift.Bool?
                /// Add a `bookmarked: true` JSON field when the logged in user has bookmarked the game.
                /// The response type must be set to `application/x-ndjson` by the request `Accept` header.
                ///
                ///
                /// - Remark: Generated from `#/paths/api/games/user/{username}/GET/query/withBookmarked`.
                internal var withBookmarked: Swift.Bool?
                /// - Remark: Generated from `#/paths/api/games/user/{username}/GET/query/sort`.
                @frozen internal enum sortPayload: String, Codable, Hashable, Sendable {
                    case dateAsc = "dateAsc"
                    case dateDesc = "dateDesc"
                }
                /// Sort order of the games.
                ///
                /// - Remark: Generated from `#/paths/api/games/user/{username}/GET/query/sort`.
                internal var sort: Operations.apiGamesUser.Input.Query.sortPayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - since: Download games played since this timestamp. Defaults to account creation date.
                ///   - until: Download games played until this timestamp. Defaults to now.
                ///   - max: How many games to download. Leave empty to download all games.
                ///   - vs: [Filter] Only games played against this opponent
                ///   - rated: [Filter] Only rated (`true`) or casual (`false`) games
                ///   - perfType: [Filter] Only games in these speeds or variants.
                ///   - color: [Filter] Only games played as this color.
                ///   - analysed: [Filter] Only games with or without a computer analysis available
                ///   - moves: Include the PGN moves.
                ///   - pgnInJson: Include the full PGN within the JSON response, in a `pgn` field. The response type must be set to `application/x-ndjson` by the request `Accept` header.
                ///   - tags: Include the PGN tags.
                ///   - clocks: Include clock status when available.
                ///   - evals: Include analysis evaluations and comments, when available.
                ///   - accuracy: Include [accuracy percent](https://lichess.org/page/accuracy) of each player, when available. Only available in JSON.
                ///   - opening: Include the opening name.
                ///   - division: Plies which mark the beginning of the middlegame and endgame.
                ///   - ongoing: Ongoing games are delayed by a few seconds ranging from 3 to 60 depending on the time control, as to prevent cheat bots from using this API.
                ///   - finished: Include finished games. Set to `false` to only get ongoing games.
                ///   - literate: Insert textual annotations in the PGN about the opening, analysis variations, mistakes, and game termination.
                ///   - lastFen: Include the FEN notation of the last position of the game.
                ///   - withBookmarked: Add a `bookmarked: true` JSON field when the logged in user has bookmarked the game.
                ///   - sort: Sort order of the games.
                internal init(
                    since: Swift.Int? = nil,
                    until: Swift.Int? = nil,
                    max: Swift.Int? = nil,
                    vs: Swift.String? = nil,
                    rated: Swift.Bool? = nil,
                    perfType: Operations.apiGamesUser.Input.Query.perfTypePayload? = nil,
                    color: Operations.apiGamesUser.Input.Query.colorPayload? = nil,
                    analysed: Swift.Bool? = nil,
                    moves: Swift.Bool? = nil,
                    pgnInJson: Swift.Bool? = nil,
                    tags: Swift.Bool? = nil,
                    clocks: Swift.Bool? = nil,
                    evals: Swift.Bool? = nil,
                    accuracy: Swift.Bool? = nil,
                    opening: Swift.Bool? = nil,
                    division: Swift.Bool? = nil,
                    ongoing: Swift.Bool? = nil,
                    finished: Swift.Bool? = nil,
                    literate: Swift.Bool? = nil,
                    lastFen: Swift.Bool? = nil,
                    withBookmarked: Swift.Bool? = nil,
                    sort: Operations.apiGamesUser.Input.Query.sortPayload? = nil
                ) {
                    self.since = since
                    self.until = until
                    self.max = max
                    self.vs = vs
                    self.rated = rated
                    self.perfType = perfType
                    self.color = color
                    self.analysed = analysed
                    self.moves = moves
                    self.pgnInJson = pgnInJson
                    self.tags = tags
                    self.clocks = clocks
                    self.evals = evals
                    self.accuracy = accuracy
                    self.opening = opening
                    self.division = division
                    self.ongoing = ongoing
                    self.finished = finished
                    self.literate = literate
                    self.lastFen = lastFen
                    self.withBookmarked = withBookmarked
                    self.sort = sort
                }
            }
            internal var query: Operations.apiGamesUser.Input.Query
            /// - Remark: Generated from `#/paths/api/games/user/{username}/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiGamesUser.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiGamesUser.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiGamesUser.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.apiGamesUser.Input.Path,
                query: Operations.apiGamesUser.Input.Query = .init(),
                headers: Operations.apiGamesUser.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/games/user/{username}/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/games/user/{username}/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiGamesUser.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/games/user/{username}/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/games/user/{username}/GET/responses/200/content/application\/x-chess-pgn`.
                    case application_x_hyphen_chess_hyphen_pgn(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_chess_hyphen_pgn`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_chess_hyphen_pgn`.
                    /// - SeeAlso: `.application_x_hyphen_chess_hyphen_pgn`.
                    internal var application_x_hyphen_chess_hyphen_pgn: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_chess_hyphen_pgn(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/x-chess-pgn",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/api/games/user/{username}/GET/responses/200/content/application\/x-ndjson`.
                    case application_x_hyphen_ndjson(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_ndjson`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_ndjson`.
                    /// - SeeAlso: `.application_x_hyphen_ndjson`.
                    internal var application_x_hyphen_ndjson: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_ndjson(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/x-ndjson",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiGamesUser.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiGamesUser.Output.Ok.Headers = .init(),
                    body: Operations.apiGamesUser.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The games of the user.
            ///
            /// - Remark: Generated from `#/paths//api/games/user/{username}/get(apiGamesUser)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiGamesUser.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiGamesUser.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_chess_hyphen_pgn
            case application_x_hyphen_ndjson
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-chess-pgn":
                    self = .application_x_hyphen_chess_hyphen_pgn
                case "application/x-ndjson":
                    self = .application_x_hyphen_ndjson
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_chess_hyphen_pgn:
                    return "application/x-chess-pgn"
                case .application_x_hyphen_ndjson:
                    return "application/x-ndjson"
                }
            }
            internal static var allCases: [Self] {
                [
                    .application_x_hyphen_chess_hyphen_pgn,
                    .application_x_hyphen_ndjson
                ]
            }
        }
    }
    /// Export games by IDs
    ///
    /// Download games by IDs in PGN or [ndjson](#section/Introduction/Streaming-with-ND-JSON) format, depending on the request `Accept` header.
    /// Games are sorted by reverse chronological order (most recent first)
    /// The method is `POST` so a longer list of IDs can be sent in the request body.
    /// 300 IDs can be submitted.
    /// Ongoing games are delayed by a few seconds ranging from 3 to 60 depending on the time control, as to prevent cheat bots from using this API.
    ///
    ///
    /// - Remark: HTTP `POST /api/games/export/_ids`.
    /// - Remark: Generated from `#/paths//api/games/export/_ids/post(gamesExportIds)`.
    internal enum gamesExportIds {
        internal static let id: Swift.String = "gamesExportIds"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/games/export/_ids/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// Include the PGN moves.
                ///
                /// - Remark: Generated from `#/paths/api/games/export/_ids/POST/query/moves`.
                internal var moves: Swift.Bool?
                /// Include the full PGN within the JSON response, in a `pgn` field.
                ///
                /// - Remark: Generated from `#/paths/api/games/export/_ids/POST/query/pgnInJson`.
                internal var pgnInJson: Swift.Bool?
                /// Include the PGN tags.
                ///
                /// - Remark: Generated from `#/paths/api/games/export/_ids/POST/query/tags`.
                internal var tags: Swift.Bool?
                /// Include clock status when available.
                /// Either as PGN comments: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`
                /// Or in a `clocks` JSON field, as centisecond integers, depending on the response type.
                ///
                ///
                /// - Remark: Generated from `#/paths/api/games/export/_ids/POST/query/clocks`.
                internal var clocks: Swift.Bool?
                /// Include analysis evaluations and comments, when available.
                /// Either as PGN comments: `12. Bxf6 { [%eval 0.23] } a3 { [%eval -1.09] }`
                /// Or in an `analysis` JSON field, depending on the response type.
                ///
                ///
                /// - Remark: Generated from `#/paths/api/games/export/_ids/POST/query/evals`.
                internal var evals: Swift.Bool?
                /// Include [accuracy percent](https://lichess.org/page/accuracy) of each player, when available. Only available in JSON.
                ///
                ///
                /// - Remark: Generated from `#/paths/api/games/export/_ids/POST/query/accuracy`.
                internal var accuracy: Swift.Bool?
                /// Include the opening name.
                /// Example: `[Opening "King's Gambit Accepted, King's Knight Gambit"]`
                ///
                ///
                /// - Remark: Generated from `#/paths/api/games/export/_ids/POST/query/opening`.
                internal var opening: Swift.Bool?
                /// Plies which mark the beginning of the middlegame and endgame.
                /// Only available in JSON
                ///
                ///
                /// - Remark: Generated from `#/paths/api/games/export/_ids/POST/query/division`.
                internal var division: Swift.Bool?
                /// Insert textual annotations in the PGN about the opening, analysis variations, mistakes, and game termination.
                /// Example: `5... g4? { (-0.98 → 0.60) Mistake. Best move was h6. } (5... h6 6. d4 Ne7 7. g3 d5 8. exd5 fxg3 9. hxg3 c6 10. dxc6)`
                ///
                ///
                /// - Remark: Generated from `#/paths/api/games/export/_ids/POST/query/literate`.
                internal var literate: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - moves: Include the PGN moves.
                ///   - pgnInJson: Include the full PGN within the JSON response, in a `pgn` field.
                ///   - tags: Include the PGN tags.
                ///   - clocks: Include clock status when available.
                ///   - evals: Include analysis evaluations and comments, when available.
                ///   - accuracy: Include [accuracy percent](https://lichess.org/page/accuracy) of each player, when available. Only available in JSON.
                ///   - opening: Include the opening name.
                ///   - division: Plies which mark the beginning of the middlegame and endgame.
                ///   - literate: Insert textual annotations in the PGN about the opening, analysis variations, mistakes, and game termination.
                internal init(
                    moves: Swift.Bool? = nil,
                    pgnInJson: Swift.Bool? = nil,
                    tags: Swift.Bool? = nil,
                    clocks: Swift.Bool? = nil,
                    evals: Swift.Bool? = nil,
                    accuracy: Swift.Bool? = nil,
                    opening: Swift.Bool? = nil,
                    division: Swift.Bool? = nil,
                    literate: Swift.Bool? = nil
                ) {
                    self.moves = moves
                    self.pgnInJson = pgnInJson
                    self.tags = tags
                    self.clocks = clocks
                    self.evals = evals
                    self.accuracy = accuracy
                    self.opening = opening
                    self.division = division
                    self.literate = literate
                }
            }
            internal var query: Operations.gamesExportIds.Input.Query
            /// - Remark: Generated from `#/paths/api/games/export/_ids/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gamesExportIds.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gamesExportIds.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.gamesExportIds.Input.Headers
            /// - Remark: Generated from `#/paths/api/games/export/_ids/POST/requestBody`.
            @frozen internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/games/export/_ids/POST/requestBody/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
            }
            internal var body: Operations.gamesExportIds.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            internal init(
                query: Operations.gamesExportIds.Input.Query = .init(),
                headers: Operations.gamesExportIds.Input.Headers = .init(),
                body: Operations.gamesExportIds.Input.Body
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/games/export/_ids/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/games/export/_ids/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.gamesExportIds.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/games/export/_ids/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/games/export/_ids/POST/responses/200/content/application\/x-chess-pgn`.
                    case application_x_hyphen_chess_hyphen_pgn(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_chess_hyphen_pgn`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_chess_hyphen_pgn`.
                    /// - SeeAlso: `.application_x_hyphen_chess_hyphen_pgn`.
                    internal var application_x_hyphen_chess_hyphen_pgn: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_chess_hyphen_pgn(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/x-chess-pgn",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/api/games/export/_ids/POST/responses/200/content/application\/x-ndjson`.
                    case application_x_hyphen_ndjson(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_ndjson`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_ndjson`.
                    /// - SeeAlso: `.application_x_hyphen_ndjson`.
                    internal var application_x_hyphen_ndjson: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_ndjson(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/x-ndjson",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.gamesExportIds.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.gamesExportIds.Output.Ok.Headers = .init(),
                    body: Operations.gamesExportIds.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The representation of the games.
            ///
            /// - Remark: Generated from `#/paths//api/games/export/_ids/post(gamesExportIds)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.gamesExportIds.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.gamesExportIds.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_chess_hyphen_pgn
            case application_x_hyphen_ndjson
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-chess-pgn":
                    self = .application_x_hyphen_chess_hyphen_pgn
                case "application/x-ndjson":
                    self = .application_x_hyphen_ndjson
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_chess_hyphen_pgn:
                    return "application/x-chess-pgn"
                case .application_x_hyphen_ndjson:
                    return "application/x-ndjson"
                }
            }
            internal static var allCases: [Self] {
                [
                    .application_x_hyphen_chess_hyphen_pgn,
                    .application_x_hyphen_ndjson
                ]
            }
        }
    }
    /// Stream games of users
    ///
    /// Stream the games played between a list of users, in real time.
    /// Only games where **both players** are part of the list are included.
    /// The stream emits an event each time a game is started or finished.
    /// To also get all current ongoing games at the beginning of the stream, use the `withCurrentGames` flag.
    /// Games are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    /// Maximum number of users: 300.
    /// The method is `POST` so a longer list of IDs can be sent in the request body.
    ///
    ///
    /// - Remark: HTTP `POST /api/stream/games-by-users`.
    /// - Remark: Generated from `#/paths//api/stream/games-by-users/post(gamesByUsers)`.
    internal enum gamesByUsers {
        internal static let id: Swift.String = "gamesByUsers"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/stream/games-by-users/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// Include the already started games at the beginning of the stream.
                ///
                /// - Remark: Generated from `#/paths/api/stream/games-by-users/POST/query/withCurrentGames`.
                internal var withCurrentGames: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - withCurrentGames: Include the already started games at the beginning of the stream.
                internal init(withCurrentGames: Swift.Bool? = nil) {
                    self.withCurrentGames = withCurrentGames
                }
            }
            internal var query: Operations.gamesByUsers.Input.Query
            /// - Remark: Generated from `#/paths/api/stream/games-by-users/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gamesByUsers.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gamesByUsers.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.gamesByUsers.Input.Headers
            /// - Remark: Generated from `#/paths/api/stream/games-by-users/POST/requestBody`.
            @frozen internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/stream/games-by-users/POST/requestBody/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
            }
            internal var body: Operations.gamesByUsers.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            internal init(
                query: Operations.gamesByUsers.Input.Query = .init(),
                headers: Operations.gamesByUsers.Input.Headers = .init(),
                body: Operations.gamesByUsers.Input.Body
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/stream/games-by-users/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/stream/games-by-users/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.gamesByUsers.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/stream/games-by-users/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/stream/games-by-users/POST/responses/200/content/application\/x-ndjson`.
                    case application_x_hyphen_ndjson(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_ndjson`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_ndjson`.
                    /// - SeeAlso: `.application_x_hyphen_ndjson`.
                    internal var application_x_hyphen_ndjson: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_ndjson(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.gamesByUsers.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.gamesByUsers.Output.Ok.Headers = .init(),
                    body: Operations.gamesByUsers.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The stream of the games played between the users.
            ///
            /// - Remark: Generated from `#/paths//api/stream/games-by-users/post(gamesByUsers)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.gamesByUsers.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.gamesByUsers.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_ndjson
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-ndjson":
                    self = .application_x_hyphen_ndjson
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_ndjson:
                    return "application/x-ndjson"
                }
            }
            internal static var allCases: [Self] {
                [
                    .application_x_hyphen_ndjson
                ]
            }
        }
    }
    /// Stream games by IDs
    ///
    /// Creates a stream of games from an arbitrary streamId, and a list of game IDs.
    /// The stream first outputs the games that already exists, then emits an event each time a game is started or finished.
    /// Games are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    /// Maximum number of games: 500 for anonymous requests, or 1000 for [OAuth2 authenticated](#section/Introduction/Authentication) requests.
    /// While the stream is open, it is possible to [add new game IDs to watch](#operation/gamesByIdsAdd).
    ///
    ///
    /// - Remark: HTTP `POST /api/stream/games/{streamId}`.
    /// - Remark: Generated from `#/paths//api/stream/games/{streamId}/post(gamesByIds)`.
    internal enum gamesByIds {
        internal static let id: Swift.String = "gamesByIds"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/stream/games/{streamId}/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/stream/games/{streamId}/POST/path/streamId`.
                internal var streamId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - streamId:
                internal init(streamId: Swift.String) {
                    self.streamId = streamId
                }
            }
            internal var path: Operations.gamesByIds.Input.Path
            /// - Remark: Generated from `#/paths/api/stream/games/{streamId}/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gamesByIds.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gamesByIds.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.gamesByIds.Input.Headers
            /// - Remark: Generated from `#/paths/api/stream/games/{streamId}/POST/requestBody`.
            @frozen internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/stream/games/{streamId}/POST/requestBody/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
            }
            internal var body: Operations.gamesByIds.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.gamesByIds.Input.Path,
                headers: Operations.gamesByIds.Input.Headers = .init(),
                body: Operations.gamesByIds.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/stream/games/{streamId}/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/stream/games/{streamId}/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.gamesByIds.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/stream/games/{streamId}/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/stream/games/{streamId}/POST/responses/200/content/application\/x-ndjson`.
                    case application_x_hyphen_ndjson(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_ndjson`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_ndjson`.
                    /// - SeeAlso: `.application_x_hyphen_ndjson`.
                    internal var application_x_hyphen_ndjson: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_ndjson(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.gamesByIds.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.gamesByIds.Output.Ok.Headers = .init(),
                    body: Operations.gamesByIds.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The stream of the games matching the requested IDs.
            ///
            /// - Remark: Generated from `#/paths//api/stream/games/{streamId}/post(gamesByIds)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.gamesByIds.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.gamesByIds.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_ndjson
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-ndjson":
                    self = .application_x_hyphen_ndjson
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_ndjson:
                    return "application/x-ndjson"
                }
            }
            internal static var allCases: [Self] {
                [
                    .application_x_hyphen_ndjson
                ]
            }
        }
    }
    /// Add game IDs to stream
    ///
    /// Add new game IDs for [an existing stream](#operation/gamesByIds) to watch.
    /// The stream will immediately outputs the games that already exists, then emit an event each time a game is started or finished.
    ///
    ///
    /// - Remark: HTTP `POST /api/stream/games/{streamId}/add`.
    /// - Remark: Generated from `#/paths//api/stream/games/{streamId}/add/post(gamesByIdsAdd)`.
    internal enum gamesByIdsAdd {
        internal static let id: Swift.String = "gamesByIdsAdd"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/stream/games/{streamId}/add/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/stream/games/{streamId}/add/POST/path/streamId`.
                internal var streamId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - streamId:
                internal init(streamId: Swift.String) {
                    self.streamId = streamId
                }
            }
            internal var path: Operations.gamesByIdsAdd.Input.Path
            /// - Remark: Generated from `#/paths/api/stream/games/{streamId}/add/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gamesByIdsAdd.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gamesByIdsAdd.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.gamesByIdsAdd.Input.Headers
            /// - Remark: Generated from `#/paths/api/stream/games/{streamId}/add/POST/requestBody`.
            @frozen internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/stream/games/{streamId}/add/POST/requestBody/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
            }
            internal var body: Operations.gamesByIdsAdd.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.gamesByIdsAdd.Input.Path,
                headers: Operations.gamesByIdsAdd.Input.Headers = .init(),
                body: Operations.gamesByIdsAdd.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/stream/games/{streamId}/add/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/stream/games/{streamId}/add/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.gamesByIdsAdd.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/stream/games/{streamId}/add/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/stream/games/{streamId}/add/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.gamesByIdsAdd.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.gamesByIdsAdd.Output.Ok.Headers = .init(),
                    body: Operations.gamesByIdsAdd.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The game IDs have been added to the stream.
            ///
            /// - Remark: Generated from `#/paths//api/stream/games/{streamId}/add/post(gamesByIdsAdd)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.gamesByIdsAdd.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.gamesByIdsAdd.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get my ongoing games
    ///
    /// Get the ongoing games of the current user.
    /// Real-time and correspondence games are included.
    /// The most urgent games are listed first.
    ///
    ///
    /// - Remark: HTTP `GET /api/account/playing`.
    /// - Remark: Generated from `#/paths//api/account/playing/get(apiAccountPlaying)`.
    internal enum apiAccountPlaying {
        internal static let id: Swift.String = "apiAccountPlaying"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/account/playing/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Max number of games to fetch
                ///
                /// - Remark: Generated from `#/paths/api/account/playing/GET/query/nb`.
                internal var nb: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - nb: Max number of games to fetch
                internal init(nb: Swift.Int? = nil) {
                    self.nb = nb
                }
            }
            internal var query: Operations.apiAccountPlaying.Input.Query
            /// - Remark: Generated from `#/paths/api/account/playing/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiAccountPlaying.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiAccountPlaying.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiAccountPlaying.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.apiAccountPlaying.Input.Query = .init(),
                headers: Operations.apiAccountPlaying.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/account/playing/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/account/playing/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiAccountPlaying.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/account/playing/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/account/playing/GET/responses/200/content/json`.
                    internal struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/api/account/playing/GET/responses/200/content/json/nowPlayingPayload`.
                        internal struct nowPlayingPayloadPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/api/account/playing/GET/responses/200/content/json/nowPlayingPayload/fullId`.
                            internal var fullId: Swift.String
                            /// - Remark: Generated from `#/paths/api/account/playing/GET/responses/200/content/json/nowPlayingPayload/gameId`.
                            internal var gameId: Swift.String
                            /// - Remark: Generated from `#/paths/api/account/playing/GET/responses/200/content/json/nowPlayingPayload/fen`.
                            internal var fen: Swift.String
                            /// - Remark: Generated from `#/paths/api/account/playing/GET/responses/200/content/json/nowPlayingPayload/color`.
                            @frozen internal enum colorPayload: String, Codable, Hashable, Sendable {
                                case white = "white"
                                case black = "black"
                            }
                            /// - Remark: Generated from `#/paths/api/account/playing/GET/responses/200/content/json/nowPlayingPayload/color`.
                            internal var color: Operations.apiAccountPlaying.Output.Ok.Body.jsonPayload.nowPlayingPayloadPayload.colorPayload
                            /// - Remark: Generated from `#/paths/api/account/playing/GET/responses/200/content/json/nowPlayingPayload/lastMove`.
                            internal var lastMove: Swift.String
                            /// - Remark: Generated from `#/paths/api/account/playing/GET/responses/200/content/json/nowPlayingPayload/source`.
                            internal var source: Components.Schemas.GameSource
                            /// - Remark: Generated from `#/paths/api/account/playing/GET/responses/200/content/json/nowPlayingPayload/status`.
                            internal var status: Components.Schemas.GameStatusName?
                            /// - Remark: Generated from `#/paths/api/account/playing/GET/responses/200/content/json/nowPlayingPayload/variant`.
                            internal var variant: Components.Schemas.Variant
                            /// - Remark: Generated from `#/paths/api/account/playing/GET/responses/200/content/json/nowPlayingPayload/speed`.
                            internal var speed: Components.Schemas.Speed
                            /// - Remark: Generated from `#/paths/api/account/playing/GET/responses/200/content/json/nowPlayingPayload/perf`.
                            internal var perf: Components.Schemas.PerfType
                            /// - Remark: Generated from `#/paths/api/account/playing/GET/responses/200/content/json/nowPlayingPayload/rated`.
                            internal var rated: Swift.Bool
                            /// - Remark: Generated from `#/paths/api/account/playing/GET/responses/200/content/json/nowPlayingPayload/hasMoved`.
                            internal var hasMoved: Swift.Bool
                            /// - Remark: Generated from `#/paths/api/account/playing/GET/responses/200/content/json/nowPlayingPayload/opponent`.
                            internal struct opponentPayload: Codable, Hashable, Sendable {
                                /// - Remark: Generated from `#/paths/api/account/playing/GET/responses/200/content/json/nowPlayingPayload/opponent/id`.
                                internal var id: Swift.String
                                /// - Remark: Generated from `#/paths/api/account/playing/GET/responses/200/content/json/nowPlayingPayload/opponent/username`.
                                internal var username: Swift.String
                                /// - Remark: Generated from `#/paths/api/account/playing/GET/responses/200/content/json/nowPlayingPayload/opponent/rating`.
                                internal var rating: Swift.Double?
                                /// - Remark: Generated from `#/paths/api/account/playing/GET/responses/200/content/json/nowPlayingPayload/opponent/ratingDiff`.
                                internal var ratingDiff: Swift.Double?
                                /// - Remark: Generated from `#/paths/api/account/playing/GET/responses/200/content/json/nowPlayingPayload/opponent/ai`.
                                internal var ai: Swift.Double?
                                /// Creates a new `opponentPayload`.
                                ///
                                /// - Parameters:
                                ///   - id:
                                ///   - username:
                                ///   - rating:
                                ///   - ratingDiff:
                                ///   - ai:
                                internal init(
                                    id: Swift.String,
                                    username: Swift.String,
                                    rating: Swift.Double? = nil,
                                    ratingDiff: Swift.Double? = nil,
                                    ai: Swift.Double? = nil
                                ) {
                                    self.id = id
                                    self.username = username
                                    self.rating = rating
                                    self.ratingDiff = ratingDiff
                                    self.ai = ai
                                }
                                internal enum CodingKeys: String, CodingKey {
                                    case id
                                    case username
                                    case rating
                                    case ratingDiff
                                    case ai
                                }
                            }
                            /// - Remark: Generated from `#/paths/api/account/playing/GET/responses/200/content/json/nowPlayingPayload/opponent`.
                            internal var opponent: Operations.apiAccountPlaying.Output.Ok.Body.jsonPayload.nowPlayingPayloadPayload.opponentPayload
                            /// - Remark: Generated from `#/paths/api/account/playing/GET/responses/200/content/json/nowPlayingPayload/isMyTurn`.
                            internal var isMyTurn: Swift.Bool
                            /// - Remark: Generated from `#/paths/api/account/playing/GET/responses/200/content/json/nowPlayingPayload/secondsLeft`.
                            internal var secondsLeft: Swift.Double
                            /// - Remark: Generated from `#/paths/api/account/playing/GET/responses/200/content/json/nowPlayingPayload/tournamentId`.
                            internal var tournamentId: Swift.String?
                            /// - Remark: Generated from `#/paths/api/account/playing/GET/responses/200/content/json/nowPlayingPayload/swissId`.
                            internal var swissId: Swift.String?
                            /// - Remark: Generated from `#/paths/api/account/playing/GET/responses/200/content/json/nowPlayingPayload/winner`.
                            @frozen internal enum winnerPayload: String, Codable, Hashable, Sendable {
                                case white = "white"
                                case black = "black"
                            }
                            /// - Remark: Generated from `#/paths/api/account/playing/GET/responses/200/content/json/nowPlayingPayload/winner`.
                            internal var winner: Operations.apiAccountPlaying.Output.Ok.Body.jsonPayload.nowPlayingPayloadPayload.winnerPayload?
                            /// - Remark: Generated from `#/paths/api/account/playing/GET/responses/200/content/json/nowPlayingPayload/ratingDiff`.
                            internal var ratingDiff: Swift.Double?
                            /// Creates a new `nowPlayingPayloadPayload`.
                            ///
                            /// - Parameters:
                            ///   - fullId:
                            ///   - gameId:
                            ///   - fen:
                            ///   - color:
                            ///   - lastMove:
                            ///   - source:
                            ///   - status:
                            ///   - variant:
                            ///   - speed:
                            ///   - perf:
                            ///   - rated:
                            ///   - hasMoved:
                            ///   - opponent:
                            ///   - isMyTurn:
                            ///   - secondsLeft:
                            ///   - tournamentId:
                            ///   - swissId:
                            ///   - winner:
                            ///   - ratingDiff:
                            internal init(
                                fullId: Swift.String,
                                gameId: Swift.String,
                                fen: Swift.String,
                                color: Operations.apiAccountPlaying.Output.Ok.Body.jsonPayload.nowPlayingPayloadPayload.colorPayload,
                                lastMove: Swift.String,
                                source: Components.Schemas.GameSource,
                                status: Components.Schemas.GameStatusName? = nil,
                                variant: Components.Schemas.Variant,
                                speed: Components.Schemas.Speed,
                                perf: Components.Schemas.PerfType,
                                rated: Swift.Bool,
                                hasMoved: Swift.Bool,
                                opponent: Operations.apiAccountPlaying.Output.Ok.Body.jsonPayload.nowPlayingPayloadPayload.opponentPayload,
                                isMyTurn: Swift.Bool,
                                secondsLeft: Swift.Double,
                                tournamentId: Swift.String? = nil,
                                swissId: Swift.String? = nil,
                                winner: Operations.apiAccountPlaying.Output.Ok.Body.jsonPayload.nowPlayingPayloadPayload.winnerPayload? = nil,
                                ratingDiff: Swift.Double? = nil
                            ) {
                                self.fullId = fullId
                                self.gameId = gameId
                                self.fen = fen
                                self.color = color
                                self.lastMove = lastMove
                                self.source = source
                                self.status = status
                                self.variant = variant
                                self.speed = speed
                                self.perf = perf
                                self.rated = rated
                                self.hasMoved = hasMoved
                                self.opponent = opponent
                                self.isMyTurn = isMyTurn
                                self.secondsLeft = secondsLeft
                                self.tournamentId = tournamentId
                                self.swissId = swissId
                                self.winner = winner
                                self.ratingDiff = ratingDiff
                            }
                            internal enum CodingKeys: String, CodingKey {
                                case fullId
                                case gameId
                                case fen
                                case color
                                case lastMove
                                case source
                                case status
                                case variant
                                case speed
                                case perf
                                case rated
                                case hasMoved
                                case opponent
                                case isMyTurn
                                case secondsLeft
                                case tournamentId
                                case swissId
                                case winner
                                case ratingDiff
                            }
                        }
                        /// - Remark: Generated from `#/paths/api/account/playing/GET/responses/200/content/json/nowPlaying`.
                        internal typealias nowPlayingPayload = [Operations.apiAccountPlaying.Output.Ok.Body.jsonPayload.nowPlayingPayloadPayload]
                        /// - Remark: Generated from `#/paths/api/account/playing/GET/responses/200/content/json/nowPlaying`.
                        internal var nowPlaying: Operations.apiAccountPlaying.Output.Ok.Body.jsonPayload.nowPlayingPayload
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - nowPlaying:
                        internal init(nowPlaying: Operations.apiAccountPlaying.Output.Ok.Body.jsonPayload.nowPlayingPayload) {
                            self.nowPlaying = nowPlaying
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case nowPlaying
                        }
                    }
                    /// - Remark: Generated from `#/paths/api/account/playing/GET/responses/200/content/application\/json`.
                    case json(Operations.apiAccountPlaying.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.apiAccountPlaying.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiAccountPlaying.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiAccountPlaying.Output.Ok.Headers = .init(),
                    body: Operations.apiAccountPlaying.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The ongoing games of the logged in user.
            ///
            /// - Remark: Generated from `#/paths//api/account/playing/get(apiAccountPlaying)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiAccountPlaying.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiAccountPlaying.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Stream moves of a game
    ///
    /// Stream positions and moves of any ongoing game, in [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    /// A description of the game is sent as a first message.
    /// Then a message is sent each time a move is played.
    /// Finally, a description of the game is sent when it finishes, and the stream is closed.
    /// Ongoing games are delayed by a few seconds ranging from 3 to 60 depending on the time control, as to prevent cheat bots from using this API.
    /// No more than 8 game streams can be opened at the same time from the same IP address.
    ///
    ///
    /// - Remark: HTTP `GET /api/stream/game/{id}`.
    /// - Remark: Generated from `#/paths//api/stream/game/{id}/get(streamGame)`.
    internal enum streamGame {
        internal static let id: Swift.String = "streamGame"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/stream/game/{id}/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/stream/game/{id}/GET/path/id`.
                internal var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id:
                internal init(id: Swift.String) {
                    self.id = id
                }
            }
            internal var path: Operations.streamGame.Input.Path
            /// - Remark: Generated from `#/paths/api/stream/game/{id}/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.streamGame.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.streamGame.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.streamGame.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.streamGame.Input.Path,
                headers: Operations.streamGame.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/stream/game/{id}/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/stream/game/{id}/GET/responses/200/content/application\/x-ndjson`.
                    case application_x_hyphen_ndjson(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_ndjson`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_ndjson`.
                    /// - SeeAlso: `.application_x_hyphen_ndjson`.
                    internal var application_x_hyphen_ndjson: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_ndjson(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.streamGame.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.streamGame.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The stream of the game moves.
            ///
            /// - Remark: Generated from `#/paths//api/stream/game/{id}/get(streamGame)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.streamGame.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.streamGame.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/stream/game/{id}/GET/responses/429/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/stream/game/{id}/GET/responses/429/content/json`.
                    internal struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/api/stream/game/{id}/GET/responses/429/content/json/error`.
                        internal var error: Swift.String?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - error:
                        internal init(error: Swift.String? = nil) {
                            self.error = error
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case error
                        }
                    }
                    /// - Remark: Generated from `#/paths/api/stream/game/{id}/GET/responses/429/content/application\/json`.
                    case json(Operations.streamGame.Output.TooManyRequests.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.streamGame.Output.TooManyRequests.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.streamGame.Output.TooManyRequests.Body
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.streamGame.Output.TooManyRequests.Body) {
                    self.body = body
                }
            }
            /// Too many streams opened at the same time from this IP.
            ///
            /// - Remark: Generated from `#/paths//api/stream/game/{id}/get(streamGame)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.streamGame.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            internal var tooManyRequests: Operations.streamGame.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_ndjson
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-ndjson":
                    self = .application_x_hyphen_ndjson
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_ndjson:
                    return "application/x-ndjson"
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .application_x_hyphen_ndjson,
                    .json
                ]
            }
        }
    }
    /// Import one game
    ///
    /// Import a game from PGN. See <https://lichess.org/paste>.
    /// Rate limiting: 200 games per hour for OAuth requests, 100 games per hour for anonymous requests.
    /// To broadcast ongoing games, consider [pushing to a broadcast instead](#operation/broadcastPush).
    /// To analyse a position or a line, just construct an analysis board URL (most standard tags supported if URL-encoded):
    /// [https://lichess.org/analysis/pgn/e4_e5_Nf3_Nc6_Bc4_Bc5_Bxf7+](https://lichess.org/analysis/pgn/e4_e5_Nf3_Nc6_Bc4_Bc5_Bxf7+)
    ///
    ///
    /// - Remark: HTTP `POST /api/import`.
    /// - Remark: Generated from `#/paths//api/import/post(gameImport)`.
    internal enum gameImport {
        internal static let id: Swift.String = "gameImport"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/import/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gameImport.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gameImport.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.gameImport.Input.Headers
            /// - Remark: Generated from `#/paths/api/import/POST/requestBody`.
            @frozen internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/import/POST/requestBody/urlEncodedForm`.
                internal struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// The PGN. It can contain only one game. Most standard tags are supported.
                    ///
                    /// - Remark: Generated from `#/paths/api/import/POST/requestBody/urlEncodedForm/pgn`.
                    internal var pgn: Swift.String?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - pgn: The PGN. It can contain only one game. Most standard tags are supported.
                    internal init(pgn: Swift.String? = nil) {
                        self.pgn = pgn
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case pgn
                    }
                }
                /// - Remark: Generated from `#/paths/api/import/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.gameImport.Input.Body.urlEncodedFormPayload)
            }
            internal var body: Operations.gameImport.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            internal init(
                headers: Operations.gameImport.Input.Headers = .init(),
                body: Operations.gameImport.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/import/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/import/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.gameImport.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/import/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/import/POST/responses/200/content/json`.
                    internal struct jsonPayload: Codable, Hashable, Sendable {
                        /// The game ID
                        ///
                        /// - Remark: Generated from `#/paths/api/import/POST/responses/200/content/json/id`.
                        internal var id: Swift.String?
                        /// The game URL
                        ///
                        /// - Remark: Generated from `#/paths/api/import/POST/responses/200/content/json/url`.
                        internal var url: Swift.String?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - id: The game ID
                        ///   - url: The game URL
                        internal init(
                            id: Swift.String? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.id = id
                            self.url = url
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case id
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/paths/api/import/POST/responses/200/content/application\/json`.
                    case json(Operations.gameImport.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.gameImport.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.gameImport.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.gameImport.Output.Ok.Headers = .init(),
                    body: Operations.gameImport.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The game was successfully imported.
            ///
            /// - Remark: Generated from `#/paths//api/import/post(gameImport)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.gameImport.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.gameImport.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Export your imported games
    ///
    /// Download all games imported by you. Games are exported in PGN format.
    ///
    /// - Remark: HTTP `GET /api/games/export/imports`.
    /// - Remark: Generated from `#/paths//api/games/export/imports/get(apiImportedGamesUser)`.
    internal enum apiImportedGamesUser {
        internal static let id: Swift.String = "apiImportedGamesUser"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/games/export/imports/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiImportedGamesUser.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiImportedGamesUser.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiImportedGamesUser.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            internal init(headers: Operations.apiImportedGamesUser.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/games/export/imports/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/games/export/imports/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiImportedGamesUser.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/games/export/imports/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/games/export/imports/GET/responses/200/content/application\/x-chess-pgn`.
                    case application_x_hyphen_chess_hyphen_pgn(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_chess_hyphen_pgn`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_chess_hyphen_pgn`.
                    /// - SeeAlso: `.application_x_hyphen_chess_hyphen_pgn`.
                    internal var application_x_hyphen_chess_hyphen_pgn: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_chess_hyphen_pgn(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiImportedGamesUser.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiImportedGamesUser.Output.Ok.Headers = .init(),
                    body: Operations.apiImportedGamesUser.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Imported games in PGN format
            ///
            /// - Remark: Generated from `#/paths//api/games/export/imports/get(apiImportedGamesUser)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiImportedGamesUser.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiImportedGamesUser.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_chess_hyphen_pgn
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-chess-pgn":
                    self = .application_x_hyphen_chess_hyphen_pgn
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_chess_hyphen_pgn:
                    return "application/x-chess-pgn"
                }
            }
            internal static var allCases: [Self] {
                [
                    .application_x_hyphen_chess_hyphen_pgn
                ]
            }
        }
    }
    /// Export your bookmarked games
    ///
    /// Download all games bookmarked by you, in PGN or [ndjson](#section/Introduction/Streaming-with-ND-JSON) format.
    /// Games are sorted by reverse chronological order (most recent first).
    /// We recommend streaming the response, for it can be very long.
    ///
    ///
    /// - Remark: HTTP `GET /api/games/export/bookmarks`.
    /// - Remark: Generated from `#/paths//api/games/export/bookmarks/get(apiExportBookmarks)`.
    internal enum apiExportBookmarks {
        internal static let id: Swift.String = "apiExportBookmarks"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/games/export/bookmarks/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Download games bookmarked since this timestamp. Defaults to account creation date.
                ///
                /// - Remark: Generated from `#/paths/api/games/export/bookmarks/GET/query/since`.
                internal var since: Swift.Int?
                /// Download games bookmarked until this timestamp. Defaults to now.
                ///
                /// - Remark: Generated from `#/paths/api/games/export/bookmarks/GET/query/until`.
                internal var until: Swift.Int?
                /// How many bookmarked games to download. Leave empty to download all bookmarked games.
                ///
                /// - Remark: Generated from `#/paths/api/games/export/bookmarks/GET/query/max`.
                internal var max: Swift.Int?
                /// Include the PGN moves.
                ///
                /// - Remark: Generated from `#/paths/api/games/export/bookmarks/GET/query/moves`.
                internal var moves: Swift.Bool?
                /// Include the full PGN within the JSON response, in a `pgn` field. The response type must be set to `application/x-ndjson` by the request `Accept` header.
                ///
                /// - Remark: Generated from `#/paths/api/games/export/bookmarks/GET/query/pgnInJson`.
                internal var pgnInJson: Swift.Bool?
                /// Include the PGN tags.
                ///
                /// - Remark: Generated from `#/paths/api/games/export/bookmarks/GET/query/tags`.
                internal var tags: Swift.Bool?
                /// Include clock status when available.
                /// Either as PGN comments: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`
                /// Or in a `clocks` JSON field, as centisecond integers, depending on the response type.
                ///
                ///
                /// - Remark: Generated from `#/paths/api/games/export/bookmarks/GET/query/clocks`.
                internal var clocks: Swift.Bool?
                /// Include analysis evaluations and comments, when available.
                /// Either as PGN comments: `12. Bxf6 { [%eval 0.23] } a3 { [%eval -1.09] }`
                /// Or in an `analysis` JSON field, depending on the response type.
                ///
                ///
                /// - Remark: Generated from `#/paths/api/games/export/bookmarks/GET/query/evals`.
                internal var evals: Swift.Bool?
                /// Include [accuracy percent](https://lichess.org/page/accuracy) of each player, when available. Only available in JSON.
                ///
                ///
                /// - Remark: Generated from `#/paths/api/games/export/bookmarks/GET/query/accuracy`.
                internal var accuracy: Swift.Bool?
                /// Include the opening name.
                /// Example: `[Opening "King's Gambit Accepted, King's Knight Gambit"]`
                ///
                ///
                /// - Remark: Generated from `#/paths/api/games/export/bookmarks/GET/query/opening`.
                internal var opening: Swift.Bool?
                /// Plies which mark the beginning of the middlegame and endgame.
                /// Only available in JSON
                ///
                ///
                /// - Remark: Generated from `#/paths/api/games/export/bookmarks/GET/query/division`.
                internal var division: Swift.Bool?
                /// Insert textual annotations in the PGN about the opening, analysis variations, mistakes, and game termination.
                /// Example: `5... g4? { (-0.98 → 0.60) Mistake. Best move was h6. } (5... h6 6. d4 Ne7 7. g3 d5 8. exd5 fxg3 9. hxg3 c6 10. dxc6)`
                ///
                ///
                /// - Remark: Generated from `#/paths/api/games/export/bookmarks/GET/query/literate`.
                internal var literate: Swift.Bool?
                /// Include the FEN notation of the last position of the game.
                /// The response type must be set to `application/x-ndjson` by the request `Accept` header.
                ///
                ///
                /// - Remark: Generated from `#/paths/api/games/export/bookmarks/GET/query/lastFen`.
                internal var lastFen: Swift.Bool?
                /// - Remark: Generated from `#/paths/api/games/export/bookmarks/GET/query/sort`.
                @frozen internal enum sortPayload: String, Codable, Hashable, Sendable {
                    case dateAsc = "dateAsc"
                    case dateDesc = "dateDesc"
                }
                /// Sort order of the bookmarks.
                ///
                /// - Remark: Generated from `#/paths/api/games/export/bookmarks/GET/query/sort`.
                internal var sort: Operations.apiExportBookmarks.Input.Query.sortPayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - since: Download games bookmarked since this timestamp. Defaults to account creation date.
                ///   - until: Download games bookmarked until this timestamp. Defaults to now.
                ///   - max: How many bookmarked games to download. Leave empty to download all bookmarked games.
                ///   - moves: Include the PGN moves.
                ///   - pgnInJson: Include the full PGN within the JSON response, in a `pgn` field. The response type must be set to `application/x-ndjson` by the request `Accept` header.
                ///   - tags: Include the PGN tags.
                ///   - clocks: Include clock status when available.
                ///   - evals: Include analysis evaluations and comments, when available.
                ///   - accuracy: Include [accuracy percent](https://lichess.org/page/accuracy) of each player, when available. Only available in JSON.
                ///   - opening: Include the opening name.
                ///   - division: Plies which mark the beginning of the middlegame and endgame.
                ///   - literate: Insert textual annotations in the PGN about the opening, analysis variations, mistakes, and game termination.
                ///   - lastFen: Include the FEN notation of the last position of the game.
                ///   - sort: Sort order of the bookmarks.
                internal init(
                    since: Swift.Int? = nil,
                    until: Swift.Int? = nil,
                    max: Swift.Int? = nil,
                    moves: Swift.Bool? = nil,
                    pgnInJson: Swift.Bool? = nil,
                    tags: Swift.Bool? = nil,
                    clocks: Swift.Bool? = nil,
                    evals: Swift.Bool? = nil,
                    accuracy: Swift.Bool? = nil,
                    opening: Swift.Bool? = nil,
                    division: Swift.Bool? = nil,
                    literate: Swift.Bool? = nil,
                    lastFen: Swift.Bool? = nil,
                    sort: Operations.apiExportBookmarks.Input.Query.sortPayload? = nil
                ) {
                    self.since = since
                    self.until = until
                    self.max = max
                    self.moves = moves
                    self.pgnInJson = pgnInJson
                    self.tags = tags
                    self.clocks = clocks
                    self.evals = evals
                    self.accuracy = accuracy
                    self.opening = opening
                    self.division = division
                    self.literate = literate
                    self.lastFen = lastFen
                    self.sort = sort
                }
            }
            internal var query: Operations.apiExportBookmarks.Input.Query
            /// - Remark: Generated from `#/paths/api/games/export/bookmarks/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiExportBookmarks.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiExportBookmarks.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiExportBookmarks.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.apiExportBookmarks.Input.Query = .init(),
                headers: Operations.apiExportBookmarks.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/games/export/bookmarks/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/games/export/bookmarks/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiExportBookmarks.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/games/export/bookmarks/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/games/export/bookmarks/GET/responses/200/content/application\/x-chess-pgn`.
                    case application_x_hyphen_chess_hyphen_pgn(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_chess_hyphen_pgn`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_chess_hyphen_pgn`.
                    /// - SeeAlso: `.application_x_hyphen_chess_hyphen_pgn`.
                    internal var application_x_hyphen_chess_hyphen_pgn: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_chess_hyphen_pgn(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/x-chess-pgn",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/api/games/export/bookmarks/GET/responses/200/content/application\/x-ndjson`.
                    case application_x_hyphen_ndjson(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_ndjson`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_ndjson`.
                    /// - SeeAlso: `.application_x_hyphen_ndjson`.
                    internal var application_x_hyphen_ndjson: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_ndjson(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/x-ndjson",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiExportBookmarks.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiExportBookmarks.Output.Ok.Headers = .init(),
                    body: Operations.apiExportBookmarks.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The bookmarked games of the user.
            ///
            /// - Remark: Generated from `#/paths//api/games/export/bookmarks/get(apiExportBookmarks)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiExportBookmarks.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiExportBookmarks.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_chess_hyphen_pgn
            case application_x_hyphen_ndjson
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-chess-pgn":
                    self = .application_x_hyphen_chess_hyphen_pgn
                case "application/x-ndjson":
                    self = .application_x_hyphen_ndjson
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_chess_hyphen_pgn:
                    return "application/x-chess-pgn"
                case .application_x_hyphen_ndjson:
                    return "application/x-ndjson"
                }
            }
            internal static var allCases: [Self] {
                [
                    .application_x_hyphen_chess_hyphen_pgn,
                    .application_x_hyphen_ndjson
                ]
            }
        }
    }
    /// Get current TV games
    ///
    /// Get basic info about the best games being played for each speed and variant,
    /// but also computer games and bot games.
    /// See [lichess.org/tv](https://lichess.org/tv).
    ///
    ///
    /// - Remark: HTTP `GET /api/tv/channels`.
    /// - Remark: Generated from `#/paths//api/tv/channels/get(tvChannels)`.
    internal enum tvChannels {
        internal static let id: Swift.String = "tvChannels"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/tv/channels/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tvChannels.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tvChannels.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.tvChannels.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            internal init(headers: Operations.tvChannels.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/tv/channels/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/tv/channels/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.tvChannels.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/tv/channels/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/tv/channels/GET/responses/200/content/json`.
                    internal struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/api/tv/channels/GET/responses/200/content/json/bot`.
                        internal var bot: Components.Schemas.TvGame
                        /// - Remark: Generated from `#/paths/api/tv/channels/GET/responses/200/content/json/blitz`.
                        internal var blitz: Components.Schemas.TvGame
                        /// - Remark: Generated from `#/paths/api/tv/channels/GET/responses/200/content/json/racingKings`.
                        internal var racingKings: Components.Schemas.TvGame
                        /// - Remark: Generated from `#/paths/api/tv/channels/GET/responses/200/content/json/ultraBullet`.
                        internal var ultraBullet: Components.Schemas.TvGame
                        /// - Remark: Generated from `#/paths/api/tv/channels/GET/responses/200/content/json/bullet`.
                        internal var bullet: Components.Schemas.TvGame
                        /// - Remark: Generated from `#/paths/api/tv/channels/GET/responses/200/content/json/classical`.
                        internal var classical: Components.Schemas.TvGame
                        /// - Remark: Generated from `#/paths/api/tv/channels/GET/responses/200/content/json/threeCheck`.
                        internal var threeCheck: Components.Schemas.TvGame
                        /// - Remark: Generated from `#/paths/api/tv/channels/GET/responses/200/content/json/antichess`.
                        internal var antichess: Components.Schemas.TvGame
                        /// - Remark: Generated from `#/paths/api/tv/channels/GET/responses/200/content/json/computer`.
                        internal var computer: Components.Schemas.TvGame
                        /// - Remark: Generated from `#/paths/api/tv/channels/GET/responses/200/content/json/horde`.
                        internal var horde: Components.Schemas.TvGame
                        /// - Remark: Generated from `#/paths/api/tv/channels/GET/responses/200/content/json/rapid`.
                        internal var rapid: Components.Schemas.TvGame
                        /// - Remark: Generated from `#/paths/api/tv/channels/GET/responses/200/content/json/atomic`.
                        internal var atomic: Components.Schemas.TvGame
                        /// - Remark: Generated from `#/paths/api/tv/channels/GET/responses/200/content/json/crazyhouse`.
                        internal var crazyhouse: Components.Schemas.TvGame
                        /// - Remark: Generated from `#/paths/api/tv/channels/GET/responses/200/content/json/chess960`.
                        internal var chess960: Components.Schemas.TvGame
                        /// - Remark: Generated from `#/paths/api/tv/channels/GET/responses/200/content/json/kingOfTheHill`.
                        internal var kingOfTheHill: Components.Schemas.TvGame
                        /// - Remark: Generated from `#/paths/api/tv/channels/GET/responses/200/content/json/best`.
                        internal var best: Components.Schemas.TvGame
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - bot:
                        ///   - blitz:
                        ///   - racingKings:
                        ///   - ultraBullet:
                        ///   - bullet:
                        ///   - classical:
                        ///   - threeCheck:
                        ///   - antichess:
                        ///   - computer:
                        ///   - horde:
                        ///   - rapid:
                        ///   - atomic:
                        ///   - crazyhouse:
                        ///   - chess960:
                        ///   - kingOfTheHill:
                        ///   - best:
                        internal init(
                            bot: Components.Schemas.TvGame,
                            blitz: Components.Schemas.TvGame,
                            racingKings: Components.Schemas.TvGame,
                            ultraBullet: Components.Schemas.TvGame,
                            bullet: Components.Schemas.TvGame,
                            classical: Components.Schemas.TvGame,
                            threeCheck: Components.Schemas.TvGame,
                            antichess: Components.Schemas.TvGame,
                            computer: Components.Schemas.TvGame,
                            horde: Components.Schemas.TvGame,
                            rapid: Components.Schemas.TvGame,
                            atomic: Components.Schemas.TvGame,
                            crazyhouse: Components.Schemas.TvGame,
                            chess960: Components.Schemas.TvGame,
                            kingOfTheHill: Components.Schemas.TvGame,
                            best: Components.Schemas.TvGame
                        ) {
                            self.bot = bot
                            self.blitz = blitz
                            self.racingKings = racingKings
                            self.ultraBullet = ultraBullet
                            self.bullet = bullet
                            self.classical = classical
                            self.threeCheck = threeCheck
                            self.antichess = antichess
                            self.computer = computer
                            self.horde = horde
                            self.rapid = rapid
                            self.atomic = atomic
                            self.crazyhouse = crazyhouse
                            self.chess960 = chess960
                            self.kingOfTheHill = kingOfTheHill
                            self.best = best
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case bot
                            case blitz
                            case racingKings
                            case ultraBullet
                            case bullet
                            case classical
                            case threeCheck
                            case antichess
                            case computer
                            case horde
                            case rapid
                            case atomic
                            case crazyhouse
                            case chess960
                            case kingOfTheHill
                            case best
                        }
                    }
                    /// - Remark: Generated from `#/paths/api/tv/channels/GET/responses/200/content/application\/json`.
                    case json(Operations.tvChannels.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.tvChannels.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.tvChannels.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.tvChannels.Output.Ok.Headers = .init(),
                    body: Operations.tvChannels.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The list of games being played for each speed and variant.
            ///
            /// - Remark: Generated from `#/paths//api/tv/channels/get(tvChannels)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.tvChannels.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.tvChannels.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Stream current TV game
    ///
    /// Stream positions and moves of the current [TV game](https://lichess.org/tv) in [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    /// Try it with `curl https://lichess.org/api/tv/feed`.
    ///
    ///
    /// - Remark: HTTP `GET /api/tv/feed`.
    /// - Remark: Generated from `#/paths//api/tv/feed/get(tvFeed)`.
    internal enum tvFeed {
        internal static let id: Swift.String = "tvFeed"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/tv/feed/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tvFeed.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tvFeed.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.tvFeed.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            internal init(headers: Operations.tvFeed.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/tv/feed/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/tv/feed/GET/responses/200/content/application\/x-ndjson`.
                    case application_x_hyphen_ndjson(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_ndjson`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_ndjson`.
                    /// - SeeAlso: `.application_x_hyphen_ndjson`.
                    internal var application_x_hyphen_ndjson: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_ndjson(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.tvFeed.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.tvFeed.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The stream of the current TV game.
            ///
            /// - Remark: Generated from `#/paths//api/tv/feed/get(tvFeed)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.tvFeed.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.tvFeed.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_ndjson
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-ndjson":
                    self = .application_x_hyphen_ndjson
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_ndjson:
                    return "application/x-ndjson"
                }
            }
            internal static var allCases: [Self] {
                [
                    .application_x_hyphen_ndjson
                ]
            }
        }
    }
    /// Stream current TV game of a TV channel
    ///
    /// Stream positions and moves of a current [TV channel's game](https://lichess.org/tv/rapid) in [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    /// Try it with `curl https://lichess.org/api/tv/rapid/feed`.
    ///
    ///
    /// - Remark: HTTP `GET /api/tv/{channel}/feed`.
    /// - Remark: Generated from `#/paths//api/tv/{channel}/feed/get(tvChannelFeed)`.
    internal enum tvChannelFeed {
        internal static let id: Swift.String = "tvChannelFeed"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/tv/{channel}/feed/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// The name of the channel in camel case.
                ///
                /// - Remark: Generated from `#/paths/api/tv/{channel}/feed/GET/path/channel`.
                internal var channel: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - channel: The name of the channel in camel case.
                internal init(channel: Swift.String) {
                    self.channel = channel
                }
            }
            internal var path: Operations.tvChannelFeed.Input.Path
            /// - Remark: Generated from `#/paths/api/tv/{channel}/feed/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tvChannelFeed.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tvChannelFeed.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.tvChannelFeed.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.tvChannelFeed.Input.Path,
                headers: Operations.tvChannelFeed.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/tv/{channel}/feed/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/tv/{channel}/feed/GET/responses/200/content/application\/x-ndjson`.
                    case application_x_hyphen_ndjson(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_ndjson`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_ndjson`.
                    /// - SeeAlso: `.application_x_hyphen_ndjson`.
                    internal var application_x_hyphen_ndjson: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_ndjson(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.tvChannelFeed.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.tvChannelFeed.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The stream of the current TV game of a TV channel.
            ///
            /// - Remark: Generated from `#/paths//api/tv/{channel}/feed/get(tvChannelFeed)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.tvChannelFeed.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.tvChannelFeed.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_ndjson
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-ndjson":
                    self = .application_x_hyphen_ndjson
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_ndjson:
                    return "application/x-ndjson"
                }
            }
            internal static var allCases: [Self] {
                [
                    .application_x_hyphen_ndjson
                ]
            }
        }
    }
    /// Get best ongoing games of a TV channel
    ///
    /// Get a list of ongoing games for a given TV channel. Similar to [lichess.org/games](https://lichess.org/games).
    /// Available in PGN or [ndjson](#section/Introduction/Streaming-with-ND-JSON) format, depending on the request `Accept` header.
    ///
    ///
    /// - Remark: HTTP `GET /api/tv/{channel}`.
    /// - Remark: Generated from `#/paths//api/tv/{channel}/get(tvChannelGames)`.
    internal enum tvChannelGames {
        internal static let id: Swift.String = "tvChannelGames"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/tv/{channel}/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// The name of the channel in camel case.
                ///
                /// - Remark: Generated from `#/paths/api/tv/{channel}/GET/path/channel`.
                internal var channel: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - channel: The name of the channel in camel case.
                internal init(channel: Swift.String) {
                    self.channel = channel
                }
            }
            internal var path: Operations.tvChannelGames.Input.Path
            /// - Remark: Generated from `#/paths/api/tv/{channel}/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Number of games to fetch.
                ///
                /// - Remark: Generated from `#/paths/api/tv/{channel}/GET/query/nb`.
                internal var nb: Swift.Double?
                /// Include the PGN moves.
                ///
                /// - Remark: Generated from `#/paths/api/tv/{channel}/GET/query/moves`.
                internal var moves: Swift.Bool?
                /// Include the full PGN within the JSON response, in a `pgn` field.
                ///
                /// - Remark: Generated from `#/paths/api/tv/{channel}/GET/query/pgnInJson`.
                internal var pgnInJson: Swift.Bool?
                /// Include the PGN tags.
                ///
                /// - Remark: Generated from `#/paths/api/tv/{channel}/GET/query/tags`.
                internal var tags: Swift.Bool?
                /// Include clock status when available.
                /// Either as PGN comments: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`
                /// Or in a `clocks` JSON field, as centisecond integers, depending on the response type.
                ///
                ///
                /// - Remark: Generated from `#/paths/api/tv/{channel}/GET/query/clocks`.
                internal var clocks: Swift.Bool?
                /// Include the opening name.
                /// Example: `[Opening "King's Gambit Accepted, King's Knight Gambit"]`
                ///
                ///
                /// - Remark: Generated from `#/paths/api/tv/{channel}/GET/query/opening`.
                internal var opening: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - nb: Number of games to fetch.
                ///   - moves: Include the PGN moves.
                ///   - pgnInJson: Include the full PGN within the JSON response, in a `pgn` field.
                ///   - tags: Include the PGN tags.
                ///   - clocks: Include clock status when available.
                ///   - opening: Include the opening name.
                internal init(
                    nb: Swift.Double? = nil,
                    moves: Swift.Bool? = nil,
                    pgnInJson: Swift.Bool? = nil,
                    tags: Swift.Bool? = nil,
                    clocks: Swift.Bool? = nil,
                    opening: Swift.Bool? = nil
                ) {
                    self.nb = nb
                    self.moves = moves
                    self.pgnInJson = pgnInJson
                    self.tags = tags
                    self.clocks = clocks
                    self.opening = opening
                }
            }
            internal var query: Operations.tvChannelGames.Input.Query
            /// - Remark: Generated from `#/paths/api/tv/{channel}/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tvChannelGames.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tvChannelGames.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.tvChannelGames.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.tvChannelGames.Input.Path,
                query: Operations.tvChannelGames.Input.Query = .init(),
                headers: Operations.tvChannelGames.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/tv/{channel}/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/tv/{channel}/GET/responses/200/content/application\/x-chess-pgn`.
                    case application_x_hyphen_chess_hyphen_pgn(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_chess_hyphen_pgn`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_chess_hyphen_pgn`.
                    /// - SeeAlso: `.application_x_hyphen_chess_hyphen_pgn`.
                    internal var application_x_hyphen_chess_hyphen_pgn: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_chess_hyphen_pgn(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/x-chess-pgn",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/api/tv/{channel}/GET/responses/200/content/application\/x-ndjson`.
                    case application_x_hyphen_ndjson(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_ndjson`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_ndjson`.
                    /// - SeeAlso: `.application_x_hyphen_ndjson`.
                    internal var application_x_hyphen_ndjson: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_ndjson(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/x-ndjson",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.tvChannelGames.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.tvChannelGames.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The representation of the games.
            ///
            /// - Remark: Generated from `#/paths//api/tv/{channel}/get(tvChannelGames)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.tvChannelGames.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.tvChannelGames.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_chess_hyphen_pgn
            case application_x_hyphen_ndjson
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-chess-pgn":
                    self = .application_x_hyphen_chess_hyphen_pgn
                case "application/x-ndjson":
                    self = .application_x_hyphen_ndjson
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_chess_hyphen_pgn:
                    return "application/x-chess-pgn"
                case .application_x_hyphen_ndjson:
                    return "application/x-ndjson"
                }
            }
            internal static var allCases: [Self] {
                [
                    .application_x_hyphen_chess_hyphen_pgn,
                    .application_x_hyphen_ndjson
                ]
            }
        }
    }
    /// Get current tournaments
    ///
    /// Get recently active and finished tournaments.
    /// This API is used to display the [Lichess tournament schedule](https://lichess.org/tournament).
    ///
    ///
    /// - Remark: HTTP `GET /api/tournament`.
    /// - Remark: Generated from `#/paths//api/tournament/get(apiTournament)`.
    internal enum apiTournament {
        internal static let id: Swift.String = "apiTournament"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/tournament/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiTournament.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiTournament.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiTournament.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            internal init(headers: Operations.apiTournament.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/tournament/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/tournament/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiTournament.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/tournament/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/tournament/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ArenaTournaments)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ArenaTournaments {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiTournament.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiTournament.Output.Ok.Headers = .init(),
                    body: Operations.apiTournament.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The list of current tournaments.
            ///
            /// - Remark: Generated from `#/paths//api/tournament/get(apiTournament)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiTournament.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiTournament.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a new Arena tournament
    ///
    /// Create a public or private Arena tournament.
    /// This endpoint mirrors the form on <https://lichess.org/tournament/new>.
    /// You can create up to 12 public tournaments per day, or 24 private tournaments.
    /// A team battle can be created by specifying the `teamBattleByTeam` argument.
    /// Additional restrictions:
    ///   - clockTime + clockIncrement > 0
    ///   - 15s and 0+1 variant tournaments cannot be rated
    ///   - Clock time in comparison to tournament length must be reasonable: 3 <= (minutes * 60) / (96 * clockTime + 48 * clockIncrement + 15) <= 150
    ///
    ///
    /// - Remark: HTTP `POST /api/tournament`.
    /// - Remark: Generated from `#/paths//api/tournament/post(apiTournamentPost)`.
    internal enum apiTournamentPost {
        internal static let id: Swift.String = "apiTournamentPost"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/tournament/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiTournamentPost.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiTournamentPost.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiTournamentPost.Input.Headers
            /// - Remark: Generated from `#/paths/api/tournament/POST/requestBody`.
            @frozen internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/tournament/POST/requestBody/urlEncodedForm`.
                internal struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// The tournament name. Leave empty to get a random Grandmaster name
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/POST/requestBody/urlEncodedForm/name`.
                    internal var name: Swift.String?
                    /// Clock initial time in minutes
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/POST/requestBody/urlEncodedForm/clockTime`.
                    internal var clockTime: Swift.Double
                    /// Clock increment in seconds
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/POST/requestBody/urlEncodedForm/clockIncrement`.
                    @frozen internal enum clockIncrementPayload: Int, Codable, Hashable, Sendable {
                        case _0 = 0
                        case _1 = 1
                        case _2 = 2
                        case _3 = 3
                        case _4 = 4
                        case _5 = 5
                        case _6 = 6
                        case _7 = 7
                        case _10 = 10
                        case _15 = 15
                        case _20 = 20
                        case _25 = 25
                        case _30 = 30
                        case _40 = 40
                        case _50 = 50
                        case _60 = 60
                    }
                    /// Clock increment in seconds
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/POST/requestBody/urlEncodedForm/clockIncrement`.
                    internal var clockIncrement: Operations.apiTournamentPost.Input.Body.urlEncodedFormPayload.clockIncrementPayload
                    /// How long the tournament lasts, in minutes
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/POST/requestBody/urlEncodedForm/minutes`.
                    @frozen internal enum minutesPayload: Int, Codable, Hashable, Sendable {
                        case _20 = 20
                        case _25 = 25
                        case _30 = 30
                        case _35 = 35
                        case _40 = 40
                        case _45 = 45
                        case _50 = 50
                        case _55 = 55
                        case _60 = 60
                        case _70 = 70
                        case _80 = 80
                        case _90 = 90
                        case _100 = 100
                        case _110 = 110
                        case _120 = 120
                        case _150 = 150
                        case _180 = 180
                        case _210 = 210
                        case _240 = 240
                        case _270 = 270
                        case _300 = 300
                        case _330 = 330
                        case _360 = 360
                        case _420 = 420
                        case _480 = 480
                        case _540 = 540
                        case _600 = 600
                        case _720 = 720
                    }
                    /// How long the tournament lasts, in minutes
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/POST/requestBody/urlEncodedForm/minutes`.
                    internal var minutes: Operations.apiTournamentPost.Input.Body.urlEncodedFormPayload.minutesPayload
                    /// How long to wait before starting the tournament, from now, in minutes
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/POST/requestBody/urlEncodedForm/waitMinutes`.
                    @frozen internal enum waitMinutesPayload: Int, Codable, Hashable, Sendable {
                        case _1 = 1
                        case _2 = 2
                        case _3 = 3
                        case _5 = 5
                        case _10 = 10
                        case _15 = 15
                        case _20 = 20
                        case _30 = 30
                        case _45 = 45
                        case _60 = 60
                    }
                    /// How long to wait before starting the tournament, from now, in minutes
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/POST/requestBody/urlEncodedForm/waitMinutes`.
                    internal var waitMinutes: Operations.apiTournamentPost.Input.Body.urlEncodedFormPayload.waitMinutesPayload?
                    /// Timestamp (in milliseconds) to start the tournament at a given date and time. Overrides the `waitMinutes` setting
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/POST/requestBody/urlEncodedForm/startDate`.
                    internal var startDate: Swift.Int64?
                    /// - Remark: Generated from `#/paths/api/tournament/POST/requestBody/urlEncodedForm/variant`.
                    internal var variant: Components.Schemas.VariantKey?
                    /// Games are rated and impact players ratings
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/POST/requestBody/urlEncodedForm/rated`.
                    internal var rated: Swift.Bool?
                    /// - Remark: Generated from `#/paths/api/tournament/POST/requestBody/urlEncodedForm/position`.
                    internal var position: Components.Schemas.FromPositionFEN?
                    /// Whether the players can use berserk. Only allowed if clockIncrement <= clockTime * 2
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/POST/requestBody/urlEncodedForm/berserkable`.
                    internal var berserkable: Swift.Bool?
                    /// After 2 wins, consecutive wins grant 4 points instead of 2.
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/POST/requestBody/urlEncodedForm/streakable`.
                    internal var streakable: Swift.Bool?
                    /// Whether the players can discuss in a chat
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/POST/requestBody/urlEncodedForm/hasChat`.
                    internal var hasChat: Swift.Bool?
                    /// Anything you want to tell players about the tournament
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/POST/requestBody/urlEncodedForm/description`.
                    internal var description: Swift.String?
                    /// Make the tournament private, and restrict access with a password.
                    /// You can also [generate user-specific entry codes](https://github.com/lichess-org/api/tree/master/example/tournament-entry-code)
                    /// based on this password.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/POST/requestBody/urlEncodedForm/password`.
                    internal var password: Swift.String?
                    /// Set the ID of a team you lead to create a team battle.
                    /// The other teams can be added using the [team battle edit endpoint](#operation/apiTournamentTeamBattlePost).
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/POST/requestBody/urlEncodedForm/teamBattleByTeam`.
                    internal var teamBattleByTeam: Swift.String?
                    /// Restrict entry to members of a team.
                    /// The teamId is the last part of a team URL, e.g. `https://lichess.org/team/coders` has teamId = `coders`.
                    /// Leave empty to let everyone join the tournament.
                    /// Do not use this to create team battles, use `teamBattleByTeam` instead.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/POST/requestBody/urlEncodedForm/conditions.teamMember.teamId`.
                    internal var conditions_period_teamMember_period_teamId: Swift.String?
                    /// Minimum rating to join. Leave empty to let everyone join the tournament.
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/POST/requestBody/urlEncodedForm/conditions.minRating.rating`.
                    @frozen internal enum conditions_period_minRating_period_ratingPayload: Int, Codable, Hashable, Sendable {
                        case _1000 = 1000
                        case _1100 = 1100
                        case _1200 = 1200
                        case _1300 = 1300
                        case _1400 = 1400
                        case _1500 = 1500
                        case _1600 = 1600
                        case _1700 = 1700
                        case _1800 = 1800
                        case _1900 = 1900
                        case _2000 = 2000
                        case _2100 = 2100
                        case _2200 = 2200
                        case _2300 = 2300
                        case _2400 = 2400
                        case _2500 = 2500
                        case _2600 = 2600
                    }
                    /// Minimum rating to join. Leave empty to let everyone join the tournament.
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/POST/requestBody/urlEncodedForm/conditions.minRating.rating`.
                    internal var conditions_period_minRating_period_rating: Operations.apiTournamentPost.Input.Body.urlEncodedFormPayload.conditions_period_minRating_period_ratingPayload?
                    /// Maximum rating to join. Based on best rating reached in the last 7 days. Leave empty to let everyone join the tournament.
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/POST/requestBody/urlEncodedForm/conditions.maxRating.rating`.
                    @frozen internal enum conditions_period_maxRating_period_ratingPayload: Int, Codable, Hashable, Sendable {
                        case _2200 = 2200
                        case _2100 = 2100
                        case _2000 = 2000
                        case _1900 = 1900
                        case _1800 = 1800
                        case _1700 = 1700
                        case _1600 = 1600
                        case _1500 = 1500
                        case _1400 = 1400
                        case _1300 = 1300
                        case _1200 = 1200
                        case _1100 = 1100
                        case _1000 = 1000
                        case _900 = 900
                        case _800 = 800
                    }
                    /// Maximum rating to join. Based on best rating reached in the last 7 days. Leave empty to let everyone join the tournament.
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/POST/requestBody/urlEncodedForm/conditions.maxRating.rating`.
                    internal var conditions_period_maxRating_period_rating: Operations.apiTournamentPost.Input.Body.urlEncodedFormPayload.conditions_period_maxRating_period_ratingPayload?
                    /// Minimum number of rated games required to join.
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/POST/requestBody/urlEncodedForm/conditions.nbRatedGame.nb`.
                    @frozen internal enum conditions_period_nbRatedGame_period_nbPayload: Int, Codable, Hashable, Sendable {
                        case _0 = 0
                        case _5 = 5
                        case _10 = 10
                        case _15 = 15
                        case _20 = 20
                        case _30 = 30
                        case _40 = 40
                        case _50 = 50
                        case _75 = 75
                        case _100 = 100
                        case _150 = 150
                        case _200 = 200
                    }
                    /// Minimum number of rated games required to join.
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/POST/requestBody/urlEncodedForm/conditions.nbRatedGame.nb`.
                    internal var conditions_period_nbRatedGame_period_nb: Operations.apiTournamentPost.Input.Body.urlEncodedFormPayload.conditions_period_nbRatedGame_period_nbPayload?
                    /// Predefined list of usernames that are allowed to join, separated by commas.
                    /// If this list is non-empty, then usernames absent from this list will be forbidden to join.
                    /// Adding `%titled` to the list additionally allows any titled player to join.
                    /// Example: `thibault,german11,%titled`
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/POST/requestBody/urlEncodedForm/conditions.allowList`.
                    internal var conditions_period_allowList: Swift.String?
                    /// Whether bots are allowed to join the tournament.
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/POST/requestBody/urlEncodedForm/conditions.bots`.
                    internal var conditions_period_bots: Swift.Bool?
                    /// Minium account age in days required to join.
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/POST/requestBody/urlEncodedForm/conditions.accountAge`.
                    @frozen internal enum conditions_period_accountAgePayload: Int, Codable, Hashable, Sendable {
                        case _1 = 1
                        case _3 = 3
                        case _7 = 7
                        case _14 = 14
                        case _30 = 30
                        case _60 = 60
                        case _90 = 90
                        case _180 = 180
                        case _365 = 365
                        case _730 = 730
                        case _1095 = 1095
                    }
                    /// Minium account age in days required to join.
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/POST/requestBody/urlEncodedForm/conditions.accountAge`.
                    internal var conditions_period_accountAge: Operations.apiTournamentPost.Input.Body.urlEncodedFormPayload.conditions_period_accountAgePayload?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: The tournament name. Leave empty to get a random Grandmaster name
                    ///   - clockTime: Clock initial time in minutes
                    ///   - clockIncrement: Clock increment in seconds
                    ///   - minutes: How long the tournament lasts, in minutes
                    ///   - waitMinutes: How long to wait before starting the tournament, from now, in minutes
                    ///   - startDate: Timestamp (in milliseconds) to start the tournament at a given date and time. Overrides the `waitMinutes` setting
                    ///   - variant:
                    ///   - rated: Games are rated and impact players ratings
                    ///   - position:
                    ///   - berserkable: Whether the players can use berserk. Only allowed if clockIncrement <= clockTime * 2
                    ///   - streakable: After 2 wins, consecutive wins grant 4 points instead of 2.
                    ///   - hasChat: Whether the players can discuss in a chat
                    ///   - description: Anything you want to tell players about the tournament
                    ///   - password: Make the tournament private, and restrict access with a password.
                    ///   - teamBattleByTeam: Set the ID of a team you lead to create a team battle.
                    ///   - conditions_period_teamMember_period_teamId: Restrict entry to members of a team.
                    ///   - conditions_period_minRating_period_rating: Minimum rating to join. Leave empty to let everyone join the tournament.
                    ///   - conditions_period_maxRating_period_rating: Maximum rating to join. Based on best rating reached in the last 7 days. Leave empty to let everyone join the tournament.
                    ///   - conditions_period_nbRatedGame_period_nb: Minimum number of rated games required to join.
                    ///   - conditions_period_allowList: Predefined list of usernames that are allowed to join, separated by commas.
                    ///   - conditions_period_bots: Whether bots are allowed to join the tournament.
                    ///   - conditions_period_accountAge: Minium account age in days required to join.
                    internal init(
                        name: Swift.String? = nil,
                        clockTime: Swift.Double,
                        clockIncrement: Operations.apiTournamentPost.Input.Body.urlEncodedFormPayload.clockIncrementPayload,
                        minutes: Operations.apiTournamentPost.Input.Body.urlEncodedFormPayload.minutesPayload,
                        waitMinutes: Operations.apiTournamentPost.Input.Body.urlEncodedFormPayload.waitMinutesPayload? = nil,
                        startDate: Swift.Int64? = nil,
                        variant: Components.Schemas.VariantKey? = nil,
                        rated: Swift.Bool? = nil,
                        position: Components.Schemas.FromPositionFEN? = nil,
                        berserkable: Swift.Bool? = nil,
                        streakable: Swift.Bool? = nil,
                        hasChat: Swift.Bool? = nil,
                        description: Swift.String? = nil,
                        password: Swift.String? = nil,
                        teamBattleByTeam: Swift.String? = nil,
                        conditions_period_teamMember_period_teamId: Swift.String? = nil,
                        conditions_period_minRating_period_rating: Operations.apiTournamentPost.Input.Body.urlEncodedFormPayload.conditions_period_minRating_period_ratingPayload? = nil,
                        conditions_period_maxRating_period_rating: Operations.apiTournamentPost.Input.Body.urlEncodedFormPayload.conditions_period_maxRating_period_ratingPayload? = nil,
                        conditions_period_nbRatedGame_period_nb: Operations.apiTournamentPost.Input.Body.urlEncodedFormPayload.conditions_period_nbRatedGame_period_nbPayload? = nil,
                        conditions_period_allowList: Swift.String? = nil,
                        conditions_period_bots: Swift.Bool? = nil,
                        conditions_period_accountAge: Operations.apiTournamentPost.Input.Body.urlEncodedFormPayload.conditions_period_accountAgePayload? = nil
                    ) {
                        self.name = name
                        self.clockTime = clockTime
                        self.clockIncrement = clockIncrement
                        self.minutes = minutes
                        self.waitMinutes = waitMinutes
                        self.startDate = startDate
                        self.variant = variant
                        self.rated = rated
                        self.position = position
                        self.berserkable = berserkable
                        self.streakable = streakable
                        self.hasChat = hasChat
                        self.description = description
                        self.password = password
                        self.teamBattleByTeam = teamBattleByTeam
                        self.conditions_period_teamMember_period_teamId = conditions_period_teamMember_period_teamId
                        self.conditions_period_minRating_period_rating = conditions_period_minRating_period_rating
                        self.conditions_period_maxRating_period_rating = conditions_period_maxRating_period_rating
                        self.conditions_period_nbRatedGame_period_nb = conditions_period_nbRatedGame_period_nb
                        self.conditions_period_allowList = conditions_period_allowList
                        self.conditions_period_bots = conditions_period_bots
                        self.conditions_period_accountAge = conditions_period_accountAge
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case name
                        case clockTime
                        case clockIncrement
                        case minutes
                        case waitMinutes
                        case startDate
                        case variant
                        case rated
                        case position
                        case berserkable
                        case streakable
                        case hasChat
                        case description
                        case password
                        case teamBattleByTeam
                        case conditions_period_teamMember_period_teamId = "conditions.teamMember.teamId"
                        case conditions_period_minRating_period_rating = "conditions.minRating.rating"
                        case conditions_period_maxRating_period_rating = "conditions.maxRating.rating"
                        case conditions_period_nbRatedGame_period_nb = "conditions.nbRatedGame.nb"
                        case conditions_period_allowList = "conditions.allowList"
                        case conditions_period_bots = "conditions.bots"
                        case conditions_period_accountAge = "conditions.accountAge"
                    }
                }
                /// - Remark: Generated from `#/paths/api/tournament/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.apiTournamentPost.Input.Body.urlEncodedFormPayload)
            }
            internal var body: Operations.apiTournamentPost.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            internal init(
                headers: Operations.apiTournamentPost.Input.Headers = .init(),
                body: Operations.apiTournamentPost.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/tournament/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/tournament/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiTournamentPost.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/tournament/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/tournament/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ArenaTournamentFull)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ArenaTournamentFull {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiTournamentPost.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiTournamentPost.Output.Ok.Headers = .init(),
                    body: Operations.apiTournamentPost.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The Arena tournament has been successfully created.
            ///
            /// - Remark: Generated from `#/paths//api/tournament/post(apiTournamentPost)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiTournamentPost.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiTournamentPost.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/tournament/POST/responses/400/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/tournament/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiTournamentPost.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.apiTournamentPost.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// The creation of the Arena tournament failed.
            ///
            /// - Remark: Generated from `#/paths//api/tournament/post(apiTournamentPost)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.apiTournamentPost.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.apiTournamentPost.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get info about an Arena tournament
    ///
    /// Get detailed info about recently finished, current, or upcoming tournament's duels, player standings, and other info.
    ///
    ///
    /// - Remark: HTTP `GET /api/tournament/{id}`.
    /// - Remark: Generated from `#/paths//api/tournament/{id}/get(tournament)`.
    internal enum tournament {
        internal static let id: Swift.String = "tournament"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/tournament/{id}/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// The tournament ID.
                ///
                /// - Remark: Generated from `#/paths/api/tournament/{id}/GET/path/id`.
                internal var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: The tournament ID.
                internal init(id: Swift.String) {
                    self.id = id
                }
            }
            internal var path: Operations.tournament.Input.Path
            /// - Remark: Generated from `#/paths/api/tournament/{id}/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Specify which page of player standings to view.
                ///
                /// - Remark: Generated from `#/paths/api/tournament/{id}/GET/query/page`.
                internal var page: Swift.Double?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - page: Specify which page of player standings to view.
                internal init(page: Swift.Double? = nil) {
                    self.page = page
                }
            }
            internal var query: Operations.tournament.Input.Query
            /// - Remark: Generated from `#/paths/api/tournament/{id}/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tournament.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tournament.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.tournament.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.tournament.Input.Path,
                query: Operations.tournament.Input.Query = .init(),
                headers: Operations.tournament.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/tournament/{id}/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.tournament.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/tournament/{id}/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ArenaTournamentFull)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ArenaTournamentFull {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.tournament.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.tournament.Output.Ok.Headers = .init(),
                    body: Operations.tournament.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The information of the Arena tournament.
            ///
            /// - Remark: Generated from `#/paths//api/tournament/{id}/get(tournament)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.tournament.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.tournament.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update an Arena tournament
    ///
    /// Update an Arena tournament.
    /// Be mindful not to make important changes to ongoing tournaments.
    /// Can be used to update a team battle.
    /// Additional restrictions:
    ///   - clockTime + clockIncrement > 0
    ///   - 15s and 0+1 variant tournaments cannot be rated
    ///   - Clock time in comparison to tournament length must be reasonable: 3 <= (minutes * 60) / (96 * clockTime + 48 * clockIncrement + 15) <= 150
    ///
    ///
    /// - Remark: HTTP `POST /api/tournament/{id}`.
    /// - Remark: Generated from `#/paths//api/tournament/{id}/post(apiTournamentUpdate)`.
    internal enum apiTournamentUpdate {
        internal static let id: Swift.String = "apiTournamentUpdate"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/tournament/{id}/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// The tournament ID.
                ///
                /// - Remark: Generated from `#/paths/api/tournament/{id}/POST/path/id`.
                internal var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: The tournament ID.
                internal init(id: Swift.String) {
                    self.id = id
                }
            }
            internal var path: Operations.apiTournamentUpdate.Input.Path
            /// - Remark: Generated from `#/paths/api/tournament/{id}/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiTournamentUpdate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiTournamentUpdate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiTournamentUpdate.Input.Headers
            /// - Remark: Generated from `#/paths/api/tournament/{id}/POST/requestBody`.
            @frozen internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/tournament/{id}/POST/requestBody/urlEncodedForm`.
                internal struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// The tournament name. Leave empty to get a random Grandmaster name
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/POST/requestBody/urlEncodedForm/name`.
                    internal var name: Swift.String?
                    /// Clock initial time in minutes
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/POST/requestBody/urlEncodedForm/clockTime`.
                    internal var clockTime: Swift.Double
                    /// Clock increment in seconds
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/POST/requestBody/urlEncodedForm/clockIncrement`.
                    @frozen internal enum clockIncrementPayload: Int, Codable, Hashable, Sendable {
                        case _0 = 0
                        case _1 = 1
                        case _2 = 2
                        case _3 = 3
                        case _4 = 4
                        case _5 = 5
                        case _6 = 6
                        case _7 = 7
                        case _10 = 10
                        case _15 = 15
                        case _20 = 20
                        case _25 = 25
                        case _30 = 30
                        case _40 = 40
                        case _50 = 50
                        case _60 = 60
                    }
                    /// Clock increment in seconds
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/POST/requestBody/urlEncodedForm/clockIncrement`.
                    internal var clockIncrement: Operations.apiTournamentUpdate.Input.Body.urlEncodedFormPayload.clockIncrementPayload
                    /// How long the tournament lasts, in minutes
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/POST/requestBody/urlEncodedForm/minutes`.
                    @frozen internal enum minutesPayload: Int, Codable, Hashable, Sendable {
                        case _20 = 20
                        case _25 = 25
                        case _30 = 30
                        case _35 = 35
                        case _40 = 40
                        case _45 = 45
                        case _50 = 50
                        case _55 = 55
                        case _60 = 60
                        case _70 = 70
                        case _80 = 80
                        case _90 = 90
                        case _100 = 100
                        case _110 = 110
                        case _120 = 120
                        case _150 = 150
                        case _180 = 180
                        case _210 = 210
                        case _240 = 240
                        case _270 = 270
                        case _300 = 300
                        case _330 = 330
                        case _360 = 360
                        case _420 = 420
                        case _480 = 480
                        case _540 = 540
                        case _600 = 600
                        case _720 = 720
                    }
                    /// How long the tournament lasts, in minutes
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/POST/requestBody/urlEncodedForm/minutes`.
                    internal var minutes: Operations.apiTournamentUpdate.Input.Body.urlEncodedFormPayload.minutesPayload
                    /// How long to wait before starting the tournament, from now, in minutes
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/POST/requestBody/urlEncodedForm/waitMinutes`.
                    @frozen internal enum waitMinutesPayload: Int, Codable, Hashable, Sendable {
                        case _1 = 1
                        case _2 = 2
                        case _3 = 3
                        case _5 = 5
                        case _10 = 10
                        case _15 = 15
                        case _20 = 20
                        case _30 = 30
                        case _45 = 45
                        case _60 = 60
                    }
                    /// How long to wait before starting the tournament, from now, in minutes
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/POST/requestBody/urlEncodedForm/waitMinutes`.
                    internal var waitMinutes: Operations.apiTournamentUpdate.Input.Body.urlEncodedFormPayload.waitMinutesPayload?
                    /// Timestamp (in milliseconds) to start the tournament at a given date and time. Overrides the `waitMinutes` setting
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/POST/requestBody/urlEncodedForm/startDate`.
                    internal var startDate: Swift.Int64?
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/POST/requestBody/urlEncodedForm/variant`.
                    internal var variant: Components.Schemas.VariantKey?
                    /// Games are rated and impact players ratings
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/POST/requestBody/urlEncodedForm/rated`.
                    internal var rated: Swift.Bool?
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/POST/requestBody/urlEncodedForm/position`.
                    internal var position: Components.Schemas.FromPositionFEN?
                    /// Whether the players can use berserk. Only allowed if clockIncrement <= clockTime * 2
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/POST/requestBody/urlEncodedForm/berserkable`.
                    internal var berserkable: Swift.Bool?
                    /// After 2 wins, consecutive wins grant 4 points instead of 2.
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/POST/requestBody/urlEncodedForm/streakable`.
                    internal var streakable: Swift.Bool?
                    /// Whether the players can discuss in a chat
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/POST/requestBody/urlEncodedForm/hasChat`.
                    internal var hasChat: Swift.Bool?
                    /// Anything you want to tell players about the tournament
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/POST/requestBody/urlEncodedForm/description`.
                    internal var description: Swift.String?
                    /// Make the tournament private, and restrict access with a password
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/POST/requestBody/urlEncodedForm/password`.
                    internal var password: Swift.String?
                    /// Minimum rating to join. Leave empty to let everyone join the tournament.
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/POST/requestBody/urlEncodedForm/conditions.minRating.rating`.
                    @frozen internal enum conditions_period_minRating_period_ratingPayload: Int, Codable, Hashable, Sendable {
                        case _1000 = 1000
                        case _1100 = 1100
                        case _1200 = 1200
                        case _1300 = 1300
                        case _1400 = 1400
                        case _1500 = 1500
                        case _1600 = 1600
                        case _1700 = 1700
                        case _1800 = 1800
                        case _1900 = 1900
                        case _2000 = 2000
                        case _2100 = 2100
                        case _2200 = 2200
                        case _2300 = 2300
                        case _2400 = 2400
                        case _2500 = 2500
                        case _2600 = 2600
                    }
                    /// Minimum rating to join. Leave empty to let everyone join the tournament.
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/POST/requestBody/urlEncodedForm/conditions.minRating.rating`.
                    internal var conditions_period_minRating_period_rating: Operations.apiTournamentUpdate.Input.Body.urlEncodedFormPayload.conditions_period_minRating_period_ratingPayload?
                    /// Maximum rating to join. Based on best rating reached in the last 7 days. Leave empty to let everyone join the tournament.
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/POST/requestBody/urlEncodedForm/conditions.maxRating.rating`.
                    @frozen internal enum conditions_period_maxRating_period_ratingPayload: Int, Codable, Hashable, Sendable {
                        case _2200 = 2200
                        case _2100 = 2100
                        case _2000 = 2000
                        case _1900 = 1900
                        case _1800 = 1800
                        case _1700 = 1700
                        case _1600 = 1600
                        case _1500 = 1500
                        case _1400 = 1400
                        case _1300 = 1300
                        case _1200 = 1200
                        case _1100 = 1100
                        case _1000 = 1000
                        case _900 = 900
                        case _800 = 800
                    }
                    /// Maximum rating to join. Based on best rating reached in the last 7 days. Leave empty to let everyone join the tournament.
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/POST/requestBody/urlEncodedForm/conditions.maxRating.rating`.
                    internal var conditions_period_maxRating_period_rating: Operations.apiTournamentUpdate.Input.Body.urlEncodedFormPayload.conditions_period_maxRating_period_ratingPayload?
                    /// Minimum number of rated games required to join.
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/POST/requestBody/urlEncodedForm/conditions.nbRatedGame.nb`.
                    @frozen internal enum conditions_period_nbRatedGame_period_nbPayload: Int, Codable, Hashable, Sendable {
                        case _0 = 0
                        case _5 = 5
                        case _10 = 10
                        case _15 = 15
                        case _20 = 20
                        case _30 = 30
                        case _40 = 40
                        case _50 = 50
                        case _75 = 75
                        case _100 = 100
                        case _150 = 150
                        case _200 = 200
                    }
                    /// Minimum number of rated games required to join.
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/POST/requestBody/urlEncodedForm/conditions.nbRatedGame.nb`.
                    internal var conditions_period_nbRatedGame_period_nb: Operations.apiTournamentUpdate.Input.Body.urlEncodedFormPayload.conditions_period_nbRatedGame_period_nbPayload?
                    /// Predefined list of usernames that are allowed to join, separated by commas.
                    /// If this list is non-empty, then usernames absent from this list will be forbidden to join.
                    /// Adding `%titled` to the list additionally allows any titled player to join.
                    /// Example: `thibault,german11,%titled`
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/POST/requestBody/urlEncodedForm/conditions.allowList`.
                    internal var conditions_period_allowList: Swift.String?
                    /// Whether bots are allowed to join the tournament.
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/POST/requestBody/urlEncodedForm/conditions.bots`.
                    internal var conditions_period_bots: Swift.Bool?
                    /// Minium account age in days required to join.
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/POST/requestBody/urlEncodedForm/conditions.accountAge`.
                    @frozen internal enum conditions_period_accountAgePayload: Int, Codable, Hashable, Sendable {
                        case _1 = 1
                        case _3 = 3
                        case _7 = 7
                        case _14 = 14
                        case _30 = 30
                        case _60 = 60
                        case _90 = 90
                        case _180 = 180
                        case _365 = 365
                        case _730 = 730
                        case _1095 = 1095
                    }
                    /// Minium account age in days required to join.
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/POST/requestBody/urlEncodedForm/conditions.accountAge`.
                    internal var conditions_period_accountAge: Operations.apiTournamentUpdate.Input.Body.urlEncodedFormPayload.conditions_period_accountAgePayload?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: The tournament name. Leave empty to get a random Grandmaster name
                    ///   - clockTime: Clock initial time in minutes
                    ///   - clockIncrement: Clock increment in seconds
                    ///   - minutes: How long the tournament lasts, in minutes
                    ///   - waitMinutes: How long to wait before starting the tournament, from now, in minutes
                    ///   - startDate: Timestamp (in milliseconds) to start the tournament at a given date and time. Overrides the `waitMinutes` setting
                    ///   - variant:
                    ///   - rated: Games are rated and impact players ratings
                    ///   - position:
                    ///   - berserkable: Whether the players can use berserk. Only allowed if clockIncrement <= clockTime * 2
                    ///   - streakable: After 2 wins, consecutive wins grant 4 points instead of 2.
                    ///   - hasChat: Whether the players can discuss in a chat
                    ///   - description: Anything you want to tell players about the tournament
                    ///   - password: Make the tournament private, and restrict access with a password
                    ///   - conditions_period_minRating_period_rating: Minimum rating to join. Leave empty to let everyone join the tournament.
                    ///   - conditions_period_maxRating_period_rating: Maximum rating to join. Based on best rating reached in the last 7 days. Leave empty to let everyone join the tournament.
                    ///   - conditions_period_nbRatedGame_period_nb: Minimum number of rated games required to join.
                    ///   - conditions_period_allowList: Predefined list of usernames that are allowed to join, separated by commas.
                    ///   - conditions_period_bots: Whether bots are allowed to join the tournament.
                    ///   - conditions_period_accountAge: Minium account age in days required to join.
                    internal init(
                        name: Swift.String? = nil,
                        clockTime: Swift.Double,
                        clockIncrement: Operations.apiTournamentUpdate.Input.Body.urlEncodedFormPayload.clockIncrementPayload,
                        minutes: Operations.apiTournamentUpdate.Input.Body.urlEncodedFormPayload.minutesPayload,
                        waitMinutes: Operations.apiTournamentUpdate.Input.Body.urlEncodedFormPayload.waitMinutesPayload? = nil,
                        startDate: Swift.Int64? = nil,
                        variant: Components.Schemas.VariantKey? = nil,
                        rated: Swift.Bool? = nil,
                        position: Components.Schemas.FromPositionFEN? = nil,
                        berserkable: Swift.Bool? = nil,
                        streakable: Swift.Bool? = nil,
                        hasChat: Swift.Bool? = nil,
                        description: Swift.String? = nil,
                        password: Swift.String? = nil,
                        conditions_period_minRating_period_rating: Operations.apiTournamentUpdate.Input.Body.urlEncodedFormPayload.conditions_period_minRating_period_ratingPayload? = nil,
                        conditions_period_maxRating_period_rating: Operations.apiTournamentUpdate.Input.Body.urlEncodedFormPayload.conditions_period_maxRating_period_ratingPayload? = nil,
                        conditions_period_nbRatedGame_period_nb: Operations.apiTournamentUpdate.Input.Body.urlEncodedFormPayload.conditions_period_nbRatedGame_period_nbPayload? = nil,
                        conditions_period_allowList: Swift.String? = nil,
                        conditions_period_bots: Swift.Bool? = nil,
                        conditions_period_accountAge: Operations.apiTournamentUpdate.Input.Body.urlEncodedFormPayload.conditions_period_accountAgePayload? = nil
                    ) {
                        self.name = name
                        self.clockTime = clockTime
                        self.clockIncrement = clockIncrement
                        self.minutes = minutes
                        self.waitMinutes = waitMinutes
                        self.startDate = startDate
                        self.variant = variant
                        self.rated = rated
                        self.position = position
                        self.berserkable = berserkable
                        self.streakable = streakable
                        self.hasChat = hasChat
                        self.description = description
                        self.password = password
                        self.conditions_period_minRating_period_rating = conditions_period_minRating_period_rating
                        self.conditions_period_maxRating_period_rating = conditions_period_maxRating_period_rating
                        self.conditions_period_nbRatedGame_period_nb = conditions_period_nbRatedGame_period_nb
                        self.conditions_period_allowList = conditions_period_allowList
                        self.conditions_period_bots = conditions_period_bots
                        self.conditions_period_accountAge = conditions_period_accountAge
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case name
                        case clockTime
                        case clockIncrement
                        case minutes
                        case waitMinutes
                        case startDate
                        case variant
                        case rated
                        case position
                        case berserkable
                        case streakable
                        case hasChat
                        case description
                        case password
                        case conditions_period_minRating_period_rating = "conditions.minRating.rating"
                        case conditions_period_maxRating_period_rating = "conditions.maxRating.rating"
                        case conditions_period_nbRatedGame_period_nb = "conditions.nbRatedGame.nb"
                        case conditions_period_allowList = "conditions.allowList"
                        case conditions_period_bots = "conditions.bots"
                        case conditions_period_accountAge = "conditions.accountAge"
                    }
                }
                /// - Remark: Generated from `#/paths/api/tournament/{id}/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.apiTournamentUpdate.Input.Body.urlEncodedFormPayload)
            }
            internal var body: Operations.apiTournamentUpdate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.apiTournamentUpdate.Input.Path,
                headers: Operations.apiTournamentUpdate.Input.Headers = .init(),
                body: Operations.apiTournamentUpdate.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/tournament/{id}/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiTournamentUpdate.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/tournament/{id}/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ArenaTournamentFull)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ArenaTournamentFull {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiTournamentUpdate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiTournamentUpdate.Output.Ok.Headers = .init(),
                    body: Operations.apiTournamentUpdate.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The Arena tournament was successfully updated.
            ///
            /// - Remark: Generated from `#/paths//api/tournament/{id}/post(apiTournamentUpdate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiTournamentUpdate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiTournamentUpdate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/tournament/{id}/POST/responses/400/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiTournamentUpdate.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.apiTournamentUpdate.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// The update of the Arena tournament failed.
            ///
            /// - Remark: Generated from `#/paths//api/tournament/{id}/post(apiTournamentUpdate)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.apiTournamentUpdate.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.apiTournamentUpdate.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Join an Arena tournament
    ///
    /// Join an Arena tournament, possibly with a password and/or a team.
    /// Also unpauses if you had previously [paused](#operation/apiTournamentWithdraw) the tournament.
    ///
    ///
    /// - Remark: HTTP `POST /api/tournament/{id}/join`.
    /// - Remark: Generated from `#/paths//api/tournament/{id}/join/post(apiTournamentJoin)`.
    internal enum apiTournamentJoin {
        internal static let id: Swift.String = "apiTournamentJoin"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/tournament/{id}/join/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// The tournament ID.
                ///
                /// - Remark: Generated from `#/paths/api/tournament/{id}/join/POST/path/id`.
                internal var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: The tournament ID.
                internal init(id: Swift.String) {
                    self.id = id
                }
            }
            internal var path: Operations.apiTournamentJoin.Input.Path
            /// - Remark: Generated from `#/paths/api/tournament/{id}/join/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiTournamentJoin.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiTournamentJoin.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiTournamentJoin.Input.Headers
            /// - Remark: Generated from `#/paths/api/tournament/{id}/join/POST/requestBody`.
            @frozen internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/tournament/{id}/join/POST/requestBody/urlEncodedForm`.
                internal struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// The tournament password, if one is required.
                    /// Can also be a [user-specific entry code](https://github.com/lichess-org/api/tree/master/example/tournament-entry-code)
                    /// generated and shared by the organizer.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/join/POST/requestBody/urlEncodedForm/password`.
                    internal var password: Swift.String?
                    /// The team to join the tournament with, for team battle tournaments
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/join/POST/requestBody/urlEncodedForm/team`.
                    internal var team: Swift.String?
                    /// If the tournament is started, attempt to pair the user,
                    /// even if they are not connected to the tournament page.
                    /// This expires after one minute, to avoid pairing a user who is long gone.
                    /// You may call "join" again to extend the waiting.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/join/POST/requestBody/urlEncodedForm/pairMeAsap`.
                    internal var pairMeAsap: Swift.Bool?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - password: The tournament password, if one is required.
                    ///   - team: The team to join the tournament with, for team battle tournaments
                    ///   - pairMeAsap: If the tournament is started, attempt to pair the user,
                    internal init(
                        password: Swift.String? = nil,
                        team: Swift.String? = nil,
                        pairMeAsap: Swift.Bool? = nil
                    ) {
                        self.password = password
                        self.team = team
                        self.pairMeAsap = pairMeAsap
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case password
                        case team
                        case pairMeAsap
                    }
                }
                /// - Remark: Generated from `#/paths/api/tournament/{id}/join/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.apiTournamentJoin.Input.Body.urlEncodedFormPayload)
            }
            internal var body: Operations.apiTournamentJoin.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.apiTournamentJoin.Input.Path,
                headers: Operations.apiTournamentJoin.Input.Headers = .init(),
                body: Operations.apiTournamentJoin.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/tournament/{id}/join/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/join/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiTournamentJoin.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/tournament/{id}/join/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/join/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiTournamentJoin.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiTournamentJoin.Output.Ok.Headers = .init(),
                    body: Operations.apiTournamentJoin.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The tournament was successfully joined.
            ///
            /// - Remark: Generated from `#/paths//api/tournament/{id}/join/post(apiTournamentJoin)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiTournamentJoin.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiTournamentJoin.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/tournament/{id}/join/POST/responses/400/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/join/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiTournamentJoin.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.apiTournamentJoin.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Joining the tournament failed.
            ///
            /// - Remark: Generated from `#/paths//api/tournament/{id}/join/post(apiTournamentJoin)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.apiTournamentJoin.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.apiTournamentJoin.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Pause or leave an Arena tournament
    ///
    /// Leave a future Arena tournament, or take a break on an ongoing Arena tournament.
    /// It's possible to join again later. Points and streaks are preserved.
    ///
    ///
    /// - Remark: HTTP `POST /api/tournament/{id}/withdraw`.
    /// - Remark: Generated from `#/paths//api/tournament/{id}/withdraw/post(apiTournamentWithdraw)`.
    internal enum apiTournamentWithdraw {
        internal static let id: Swift.String = "apiTournamentWithdraw"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/tournament/{id}/withdraw/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// The tournament ID.
                ///
                /// - Remark: Generated from `#/paths/api/tournament/{id}/withdraw/POST/path/id`.
                internal var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: The tournament ID.
                internal init(id: Swift.String) {
                    self.id = id
                }
            }
            internal var path: Operations.apiTournamentWithdraw.Input.Path
            /// - Remark: Generated from `#/paths/api/tournament/{id}/withdraw/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiTournamentWithdraw.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiTournamentWithdraw.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiTournamentWithdraw.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.apiTournamentWithdraw.Input.Path,
                headers: Operations.apiTournamentWithdraw.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/tournament/{id}/withdraw/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/withdraw/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiTournamentWithdraw.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/tournament/{id}/withdraw/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/withdraw/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiTournamentWithdraw.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiTournamentWithdraw.Output.Ok.Headers = .init(),
                    body: Operations.apiTournamentWithdraw.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The tournament was successfully paused or left.
            ///
            /// - Remark: Generated from `#/paths//api/tournament/{id}/withdraw/post(apiTournamentWithdraw)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiTournamentWithdraw.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiTournamentWithdraw.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/tournament/{id}/withdraw/POST/responses/400/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/withdraw/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiTournamentWithdraw.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.apiTournamentWithdraw.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Pausing/leaving the tournament failed.
            ///
            /// - Remark: Generated from `#/paths//api/tournament/{id}/withdraw/post(apiTournamentWithdraw)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.apiTournamentWithdraw.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.apiTournamentWithdraw.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Terminate an Arena tournament
    ///
    /// Terminate an Arena tournament
    ///
    ///
    /// - Remark: HTTP `POST /api/tournament/{id}/terminate`.
    /// - Remark: Generated from `#/paths//api/tournament/{id}/terminate/post(apiTournamentTerminate)`.
    internal enum apiTournamentTerminate {
        internal static let id: Swift.String = "apiTournamentTerminate"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/tournament/{id}/terminate/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// The tournament ID.
                ///
                /// - Remark: Generated from `#/paths/api/tournament/{id}/terminate/POST/path/id`.
                internal var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: The tournament ID.
                internal init(id: Swift.String) {
                    self.id = id
                }
            }
            internal var path: Operations.apiTournamentTerminate.Input.Path
            /// - Remark: Generated from `#/paths/api/tournament/{id}/terminate/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiTournamentTerminate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiTournamentTerminate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiTournamentTerminate.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.apiTournamentTerminate.Input.Path,
                headers: Operations.apiTournamentTerminate.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/tournament/{id}/terminate/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/terminate/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiTournamentTerminate.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/tournament/{id}/terminate/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/terminate/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiTournamentTerminate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiTournamentTerminate.Output.Ok.Headers = .init(),
                    body: Operations.apiTournamentTerminate.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The tournament was successfully terminated.
            ///
            /// - Remark: Generated from `#/paths//api/tournament/{id}/terminate/post(apiTournamentTerminate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiTournamentTerminate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiTournamentTerminate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/tournament/{id}/terminate/POST/responses/400/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/terminate/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiTournamentTerminate.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.apiTournamentTerminate.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Terminating the tournament failed.
            ///
            /// - Remark: Generated from `#/paths//api/tournament/{id}/terminate/post(apiTournamentTerminate)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.apiTournamentTerminate.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.apiTournamentTerminate.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a team battle
    ///
    /// Set the teams and number of leaders of a team battle.
    /// To update the other attributes of a team battle, use the [tournament update endpoint](#operation/apiTournamentUpdate).
    ///
    ///
    /// - Remark: HTTP `POST /api/tournament/team-battle/{id}`.
    /// - Remark: Generated from `#/paths//api/tournament/team-battle/{id}/post(apiTournamentTeamBattlePost)`.
    internal enum apiTournamentTeamBattlePost {
        internal static let id: Swift.String = "apiTournamentTeamBattlePost"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/tournament/team-battle/{id}/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// The tournament ID
                ///
                /// - Remark: Generated from `#/paths/api/tournament/team-battle/{id}/POST/path/id`.
                internal var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: The tournament ID
                internal init(id: Swift.String) {
                    self.id = id
                }
            }
            internal var path: Operations.apiTournamentTeamBattlePost.Input.Path
            /// - Remark: Generated from `#/paths/api/tournament/team-battle/{id}/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiTournamentTeamBattlePost.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiTournamentTeamBattlePost.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiTournamentTeamBattlePost.Input.Headers
            /// - Remark: Generated from `#/paths/api/tournament/team-battle/{id}/POST/requestBody`.
            @frozen internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/tournament/team-battle/{id}/POST/requestBody/urlEncodedForm`.
                internal struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// All team IDs of the team battle, separated by commas.
                    /// Make sure to always send the full list.
                    /// Teams that are not in the list will be removed from the team battle.
                    /// Example: `coders,zhigalko_sergei-fan-club,hhSwTKZv`
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/team-battle/{id}/POST/requestBody/urlEncodedForm/teams`.
                    internal var teams: Swift.String
                    /// Number team leaders per team.
                    ///
                    /// - Remark: Generated from `#/paths/api/tournament/team-battle/{id}/POST/requestBody/urlEncodedForm/nbLeaders`.
                    internal var nbLeaders: Swift.Int
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - teams: All team IDs of the team battle, separated by commas.
                    ///   - nbLeaders: Number team leaders per team.
                    internal init(
                        teams: Swift.String,
                        nbLeaders: Swift.Int
                    ) {
                        self.teams = teams
                        self.nbLeaders = nbLeaders
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case teams
                        case nbLeaders
                    }
                }
                /// - Remark: Generated from `#/paths/api/tournament/team-battle/{id}/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.apiTournamentTeamBattlePost.Input.Body.urlEncodedFormPayload)
            }
            internal var body: Operations.apiTournamentTeamBattlePost.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.apiTournamentTeamBattlePost.Input.Path,
                headers: Operations.apiTournamentTeamBattlePost.Input.Headers = .init(),
                body: Operations.apiTournamentTeamBattlePost.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/tournament/team-battle/{id}/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/tournament/team-battle/{id}/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiTournamentTeamBattlePost.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/tournament/team-battle/{id}/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/tournament/team-battle/{id}/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ArenaTournamentFull)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ArenaTournamentFull {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiTournamentTeamBattlePost.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiTournamentTeamBattlePost.Output.Ok.Headers = .init(),
                    body: Operations.apiTournamentTeamBattlePost.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The team battle tournament was successfully updated.
            ///
            /// - Remark: Generated from `#/paths//api/tournament/team-battle/{id}/post(apiTournamentTeamBattlePost)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiTournamentTeamBattlePost.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiTournamentTeamBattlePost.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/tournament/team-battle/{id}/POST/responses/400/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/tournament/team-battle/{id}/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiTournamentTeamBattlePost.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.apiTournamentTeamBattlePost.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// The update of the team battle tournament failed.
            ///
            /// - Remark: Generated from `#/paths//api/tournament/team-battle/{id}/post(apiTournamentTeamBattlePost)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.apiTournamentTeamBattlePost.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.apiTournamentTeamBattlePost.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Export games of an Arena tournament
    ///
    /// Download games of a tournament in PGN or [ndjson](#section/Introduction/Streaming-with-ND-JSON) format.
    /// Games are sorted by reverse chronological order (most recent first).
    /// The game stream is throttled, depending on who is making the request:
    ///   - Anonymous request: 20 games per second
    ///   - [OAuth2 authenticated](#section/Introduction/Authentication) request: 30 games per second
    ///
    ///
    /// - Remark: HTTP `GET /api/tournament/{id}/games`.
    /// - Remark: Generated from `#/paths//api/tournament/{id}/games/get(gamesByTournament)`.
    internal enum gamesByTournament {
        internal static let id: Swift.String = "gamesByTournament"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/tournament/{id}/games/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// The tournament ID.
                ///
                /// - Remark: Generated from `#/paths/api/tournament/{id}/games/GET/path/id`.
                internal var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: The tournament ID.
                internal init(id: Swift.String) {
                    self.id = id
                }
            }
            internal var path: Operations.gamesByTournament.Input.Path
            /// - Remark: Generated from `#/paths/api/tournament/{id}/games/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Only games of a particular player. Leave empty to fetch games of all players.
                ///
                /// - Remark: Generated from `#/paths/api/tournament/{id}/games/GET/query/player`.
                internal var player: Swift.String?
                /// Include the PGN moves.
                ///
                /// - Remark: Generated from `#/paths/api/tournament/{id}/games/GET/query/moves`.
                internal var moves: Swift.Bool?
                /// Include the full PGN within the JSON response, in a `pgn` field.
                ///
                /// - Remark: Generated from `#/paths/api/tournament/{id}/games/GET/query/pgnInJson`.
                internal var pgnInJson: Swift.Bool?
                /// Include the PGN tags.
                ///
                /// - Remark: Generated from `#/paths/api/tournament/{id}/games/GET/query/tags`.
                internal var tags: Swift.Bool?
                /// Include clock status when available.
                /// Either as PGN comments: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`
                /// Or in a `clocks` JSON field, as centisecond integers, depending on the response type.
                ///
                ///
                /// - Remark: Generated from `#/paths/api/tournament/{id}/games/GET/query/clocks`.
                internal var clocks: Swift.Bool?
                /// Include analysis evaluations and comments, when available.
                /// Either as PGN comments: `12. Bxf6 { [%eval 0.23] } a3 { [%eval -1.09] }`
                /// Or in an `analysis` JSON field, depending on the response type.
                ///
                ///
                /// - Remark: Generated from `#/paths/api/tournament/{id}/games/GET/query/evals`.
                internal var evals: Swift.Bool?
                /// Include [accuracy percent](https://lichess.org/page/accuracy) of each player, when available. Only available in JSON.
                ///
                ///
                /// - Remark: Generated from `#/paths/api/tournament/{id}/games/GET/query/accuracy`.
                internal var accuracy: Swift.Bool?
                /// Include the opening name.
                /// Example: `[Opening "King's Gambit Accepted, King's Knight Gambit"]`
                ///
                ///
                /// - Remark: Generated from `#/paths/api/tournament/{id}/games/GET/query/opening`.
                internal var opening: Swift.Bool?
                /// Plies which mark the beginning of the middlegame and endgame.
                /// Only available in JSON
                ///
                ///
                /// - Remark: Generated from `#/paths/api/tournament/{id}/games/GET/query/division`.
                internal var division: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - player: Only games of a particular player. Leave empty to fetch games of all players.
                ///   - moves: Include the PGN moves.
                ///   - pgnInJson: Include the full PGN within the JSON response, in a `pgn` field.
                ///   - tags: Include the PGN tags.
                ///   - clocks: Include clock status when available.
                ///   - evals: Include analysis evaluations and comments, when available.
                ///   - accuracy: Include [accuracy percent](https://lichess.org/page/accuracy) of each player, when available. Only available in JSON.
                ///   - opening: Include the opening name.
                ///   - division: Plies which mark the beginning of the middlegame and endgame.
                internal init(
                    player: Swift.String? = nil,
                    moves: Swift.Bool? = nil,
                    pgnInJson: Swift.Bool? = nil,
                    tags: Swift.Bool? = nil,
                    clocks: Swift.Bool? = nil,
                    evals: Swift.Bool? = nil,
                    accuracy: Swift.Bool? = nil,
                    opening: Swift.Bool? = nil,
                    division: Swift.Bool? = nil
                ) {
                    self.player = player
                    self.moves = moves
                    self.pgnInJson = pgnInJson
                    self.tags = tags
                    self.clocks = clocks
                    self.evals = evals
                    self.accuracy = accuracy
                    self.opening = opening
                    self.division = division
                }
            }
            internal var query: Operations.gamesByTournament.Input.Query
            /// - Remark: Generated from `#/paths/api/tournament/{id}/games/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gamesByTournament.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gamesByTournament.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.gamesByTournament.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.gamesByTournament.Input.Path,
                query: Operations.gamesByTournament.Input.Query = .init(),
                headers: Operations.gamesByTournament.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/tournament/{id}/games/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/games/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.gamesByTournament.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/tournament/{id}/games/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/games/GET/responses/200/content/application\/x-chess-pgn`.
                    case application_x_hyphen_chess_hyphen_pgn(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_chess_hyphen_pgn`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_chess_hyphen_pgn`.
                    /// - SeeAlso: `.application_x_hyphen_chess_hyphen_pgn`.
                    internal var application_x_hyphen_chess_hyphen_pgn: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_chess_hyphen_pgn(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/x-chess-pgn",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/games/GET/responses/200/content/application\/x-ndjson`.
                    case application_x_hyphen_ndjson(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_ndjson`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_ndjson`.
                    /// - SeeAlso: `.application_x_hyphen_ndjson`.
                    internal var application_x_hyphen_ndjson: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_ndjson(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/x-ndjson",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.gamesByTournament.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.gamesByTournament.Output.Ok.Headers = .init(),
                    body: Operations.gamesByTournament.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The list of games of an Arena tournament.
            ///
            /// - Remark: Generated from `#/paths//api/tournament/{id}/games/get(gamesByTournament)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.gamesByTournament.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.gamesByTournament.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_chess_hyphen_pgn
            case application_x_hyphen_ndjson
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-chess-pgn":
                    self = .application_x_hyphen_chess_hyphen_pgn
                case "application/x-ndjson":
                    self = .application_x_hyphen_ndjson
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_chess_hyphen_pgn:
                    return "application/x-chess-pgn"
                case .application_x_hyphen_ndjson:
                    return "application/x-ndjson"
                }
            }
            internal static var allCases: [Self] {
                [
                    .application_x_hyphen_chess_hyphen_pgn,
                    .application_x_hyphen_ndjson
                ]
            }
        }
    }
    /// Get results of an Arena tournament
    ///
    /// Players of an Arena tournament, with their score and performance, sorted by rank (best first).
    /// **Players are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON)**, i.e. one JSON object per line.
    /// If called on an ongoing tournament, results can be inconsistent
    /// due to ranking changes while the players are being streamed.
    /// Use on finished tournaments for guaranteed consistency.
    ///
    ///
    /// - Remark: HTTP `GET /api/tournament/{id}/results`.
    /// - Remark: Generated from `#/paths//api/tournament/{id}/results/get(resultsByTournament)`.
    internal enum resultsByTournament {
        internal static let id: Swift.String = "resultsByTournament"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/tournament/{id}/results/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// The tournament ID.
                ///
                /// - Remark: Generated from `#/paths/api/tournament/{id}/results/GET/path/id`.
                internal var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: The tournament ID.
                internal init(id: Swift.String) {
                    self.id = id
                }
            }
            internal var path: Operations.resultsByTournament.Input.Path
            /// - Remark: Generated from `#/paths/api/tournament/{id}/results/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Max number of players to fetch
                ///
                /// - Remark: Generated from `#/paths/api/tournament/{id}/results/GET/query/nb`.
                internal var nb: Swift.Int?
                /// Add a `sheet` field to the player document.
                /// It's an expensive server computation that slows down the stream.
                ///
                ///
                /// - Remark: Generated from `#/paths/api/tournament/{id}/results/GET/query/sheet`.
                internal var sheet: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - nb: Max number of players to fetch
                ///   - sheet: Add a `sheet` field to the player document.
                internal init(
                    nb: Swift.Int? = nil,
                    sheet: Swift.Bool? = nil
                ) {
                    self.nb = nb
                    self.sheet = sheet
                }
            }
            internal var query: Operations.resultsByTournament.Input.Query
            /// - Remark: Generated from `#/paths/api/tournament/{id}/results/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.resultsByTournament.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.resultsByTournament.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.resultsByTournament.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.resultsByTournament.Input.Path,
                query: Operations.resultsByTournament.Input.Query = .init(),
                headers: Operations.resultsByTournament.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/tournament/{id}/results/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/results/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.resultsByTournament.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/tournament/{id}/results/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/results/GET/responses/200/content/application\/x-ndjson`.
                    case application_x_hyphen_ndjson(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_ndjson`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_ndjson`.
                    /// - SeeAlso: `.application_x_hyphen_ndjson`.
                    internal var application_x_hyphen_ndjson: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_ndjson(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.resultsByTournament.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.resultsByTournament.Output.Ok.Headers = .init(),
                    body: Operations.resultsByTournament.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The results of the Arena tournament.
            ///
            /// - Remark: Generated from `#/paths//api/tournament/{id}/results/get(resultsByTournament)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.resultsByTournament.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.resultsByTournament.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_ndjson
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-ndjson":
                    self = .application_x_hyphen_ndjson
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_ndjson:
                    return "application/x-ndjson"
                }
            }
            internal static var allCases: [Self] {
                [
                    .application_x_hyphen_ndjson
                ]
            }
        }
    }
    /// Get team standing of a team battle
    ///
    /// Teams of a team battle tournament, with top players, sorted by rank (best first).
    ///
    ///
    /// - Remark: HTTP `GET /api/tournament/{id}/teams`.
    /// - Remark: Generated from `#/paths//api/tournament/{id}/teams/get(teamsByTournament)`.
    internal enum teamsByTournament {
        internal static let id: Swift.String = "teamsByTournament"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/tournament/{id}/teams/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// The tournament ID.
                ///
                /// - Remark: Generated from `#/paths/api/tournament/{id}/teams/GET/path/id`.
                internal var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: The tournament ID.
                internal init(id: Swift.String) {
                    self.id = id
                }
            }
            internal var path: Operations.teamsByTournament.Input.Path
            /// - Remark: Generated from `#/paths/api/tournament/{id}/teams/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teamsByTournament.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teamsByTournament.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.teamsByTournament.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.teamsByTournament.Input.Path,
                headers: Operations.teamsByTournament.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/tournament/{id}/teams/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/teams/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.teamsByTournament.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/tournament/{id}/teams/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/teams/GET/responses/200/content/json`.
                    internal struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/api/tournament/{id}/teams/GET/responses/200/content/json/id`.
                        internal var id: Swift.String
                        /// - Remark: Generated from `#/paths/api/tournament/{id}/teams/GET/responses/200/content/json/teamsPayload`.
                        internal struct teamsPayloadPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/api/tournament/{id}/teams/GET/responses/200/content/json/teamsPayload/rank`.
                            internal var rank: Swift.Double
                            /// - Remark: Generated from `#/paths/api/tournament/{id}/teams/GET/responses/200/content/json/teamsPayload/id`.
                            internal var id: Swift.String
                            /// - Remark: Generated from `#/paths/api/tournament/{id}/teams/GET/responses/200/content/json/teamsPayload/score`.
                            internal var score: Swift.Double
                            /// - Remark: Generated from `#/paths/api/tournament/{id}/teams/GET/responses/200/content/json/teamsPayload/playersPayload`.
                            internal struct playersPayloadPayload: Codable, Hashable, Sendable {
                                /// - Remark: Generated from `#/paths/api/tournament/{id}/teams/GET/responses/200/content/json/teamsPayload/playersPayload/user`.
                                internal var user: Components.Schemas.LightUser
                                /// - Remark: Generated from `#/paths/api/tournament/{id}/teams/GET/responses/200/content/json/teamsPayload/playersPayload/score`.
                                internal var score: Swift.Double?
                                /// Creates a new `playersPayloadPayload`.
                                ///
                                /// - Parameters:
                                ///   - user:
                                ///   - score:
                                internal init(
                                    user: Components.Schemas.LightUser,
                                    score: Swift.Double? = nil
                                ) {
                                    self.user = user
                                    self.score = score
                                }
                                internal enum CodingKeys: String, CodingKey {
                                    case user
                                    case score
                                }
                            }
                            /// - Remark: Generated from `#/paths/api/tournament/{id}/teams/GET/responses/200/content/json/teamsPayload/players`.
                            internal typealias playersPayload = [Operations.teamsByTournament.Output.Ok.Body.jsonPayload.teamsPayloadPayload.playersPayloadPayload]
                            /// - Remark: Generated from `#/paths/api/tournament/{id}/teams/GET/responses/200/content/json/teamsPayload/players`.
                            internal var players: Operations.teamsByTournament.Output.Ok.Body.jsonPayload.teamsPayloadPayload.playersPayload
                            /// Creates a new `teamsPayloadPayload`.
                            ///
                            /// - Parameters:
                            ///   - rank:
                            ///   - id:
                            ///   - score:
                            ///   - players:
                            internal init(
                                rank: Swift.Double,
                                id: Swift.String,
                                score: Swift.Double,
                                players: Operations.teamsByTournament.Output.Ok.Body.jsonPayload.teamsPayloadPayload.playersPayload
                            ) {
                                self.rank = rank
                                self.id = id
                                self.score = score
                                self.players = players
                            }
                            internal enum CodingKeys: String, CodingKey {
                                case rank
                                case id
                                case score
                                case players
                            }
                        }
                        /// - Remark: Generated from `#/paths/api/tournament/{id}/teams/GET/responses/200/content/json/teams`.
                        internal typealias teamsPayload = [Operations.teamsByTournament.Output.Ok.Body.jsonPayload.teamsPayloadPayload]
                        /// - Remark: Generated from `#/paths/api/tournament/{id}/teams/GET/responses/200/content/json/teams`.
                        internal var teams: Operations.teamsByTournament.Output.Ok.Body.jsonPayload.teamsPayload
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - id:
                        ///   - teams:
                        internal init(
                            id: Swift.String,
                            teams: Operations.teamsByTournament.Output.Ok.Body.jsonPayload.teamsPayload
                        ) {
                            self.id = id
                            self.teams = teams
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case id
                            case teams
                        }
                    }
                    /// - Remark: Generated from `#/paths/api/tournament/{id}/teams/GET/responses/200/content/application\/json`.
                    case json(Operations.teamsByTournament.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.teamsByTournament.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.teamsByTournament.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.teamsByTournament.Output.Ok.Headers = .init(),
                    body: Operations.teamsByTournament.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The list of teams of a team battle tournament, with their respective top players.
            ///
            /// - Remark: Generated from `#/paths//api/tournament/{id}/teams/get(teamsByTournament)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teamsByTournament.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.teamsByTournament.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get tournaments created by a user
    ///
    /// Get all tournaments created by a given user.
    /// Tournaments are sorted by reverse chronological order of start date (last starting first).
    /// Tournaments are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    /// The stream is throttled, depending on who is making the request:
    ///   - Anonymous request: 20 tournaments per second
    ///   - [OAuth2 authenticated](#section/Introduction/Authentication) request: 30 tournaments per second
    ///   - Authenticated, downloading your own tournaments: 50 tournaments per second
    ///
    ///
    /// - Remark: HTTP `GET /api/user/{username}/tournament/created`.
    /// - Remark: Generated from `#/paths//api/user/{username}/tournament/created/get(apiUserNameTournamentCreated)`.
    internal enum apiUserNameTournamentCreated {
        internal static let id: Swift.String = "apiUserNameTournamentCreated"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/user/{username}/tournament/created/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// The user whose created tournaments to fetch
                ///
                /// - Remark: Generated from `#/paths/api/user/{username}/tournament/created/GET/path/username`.
                internal var username: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username: The user whose created tournaments to fetch
                internal init(username: Swift.String) {
                    self.username = username
                }
            }
            internal var path: Operations.apiUserNameTournamentCreated.Input.Path
            /// - Remark: Generated from `#/paths/api/user/{username}/tournament/created/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Max number of tournaments to fetch
                ///
                /// - Remark: Generated from `#/paths/api/user/{username}/tournament/created/GET/query/nb`.
                internal var nb: Swift.Int?
                /// - Remark: Generated from `#/paths/api/user/{username}/tournament/created/GET/query/status`.
                @frozen internal enum statusPayload: Int, Codable, Hashable, Sendable {
                    case _10 = 10
                    case _20 = 20
                    case _30 = 30
                }
                /// Include tournaments in the given status: "Created" (10), "Started" (20), "Finished" (30)
                /// You can add this parameter more than once to include tournaments in different statuses.
                /// Example: `?status=10&status=20`
                ///
                ///
                /// - Remark: Generated from `#/paths/api/user/{username}/tournament/created/GET/query/status`.
                internal var status: Operations.apiUserNameTournamentCreated.Input.Query.statusPayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - nb: Max number of tournaments to fetch
                ///   - status: Include tournaments in the given status: "Created" (10), "Started" (20), "Finished" (30)
                internal init(
                    nb: Swift.Int? = nil,
                    status: Operations.apiUserNameTournamentCreated.Input.Query.statusPayload? = nil
                ) {
                    self.nb = nb
                    self.status = status
                }
            }
            internal var query: Operations.apiUserNameTournamentCreated.Input.Query
            /// - Remark: Generated from `#/paths/api/user/{username}/tournament/created/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiUserNameTournamentCreated.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiUserNameTournamentCreated.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiUserNameTournamentCreated.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.apiUserNameTournamentCreated.Input.Path,
                query: Operations.apiUserNameTournamentCreated.Input.Query = .init(),
                headers: Operations.apiUserNameTournamentCreated.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/user/{username}/tournament/created/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/user/{username}/tournament/created/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiUserNameTournamentCreated.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/user/{username}/tournament/created/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/user/{username}/tournament/created/GET/responses/200/content/application\/x-ndjson`.
                    case application_x_hyphen_ndjson(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_ndjson`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_ndjson`.
                    /// - SeeAlso: `.application_x_hyphen_ndjson`.
                    internal var application_x_hyphen_ndjson: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_ndjson(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiUserNameTournamentCreated.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiUserNameTournamentCreated.Output.Ok.Headers = .init(),
                    body: Operations.apiUserNameTournamentCreated.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The list of tournaments created by the user.
            ///
            /// - Remark: Generated from `#/paths//api/user/{username}/tournament/created/get(apiUserNameTournamentCreated)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiUserNameTournamentCreated.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiUserNameTournamentCreated.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_ndjson
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-ndjson":
                    self = .application_x_hyphen_ndjson
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_ndjson:
                    return "application/x-ndjson"
                }
            }
            internal static var allCases: [Self] {
                [
                    .application_x_hyphen_ndjson
                ]
            }
        }
    }
    /// Get tournaments played by a user
    ///
    /// Get all tournaments played by a given user.
    /// Tournaments are sorted by reverse chronological order of start date (last played first).
    /// Tournaments are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    /// The stream is throttled, depending on who is making the request:
    ///   - Anonymous request: 20 tournaments per second
    ///   - [OAuth2 authenticated](#section/Introduction/Authentication) request: 30 tournaments per second
    ///   - Authenticated, downloading your own tournaments: 50 tournaments per second
    ///
    ///
    /// - Remark: HTTP `GET /api/user/{username}/tournament/played`.
    /// - Remark: Generated from `#/paths//api/user/{username}/tournament/played/get(apiUserNameTournamentPlayed)`.
    internal enum apiUserNameTournamentPlayed {
        internal static let id: Swift.String = "apiUserNameTournamentPlayed"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/user/{username}/tournament/played/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// The user whose played tournaments to fetch
                ///
                /// - Remark: Generated from `#/paths/api/user/{username}/tournament/played/GET/path/username`.
                internal var username: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username: The user whose played tournaments to fetch
                internal init(username: Swift.String) {
                    self.username = username
                }
            }
            internal var path: Operations.apiUserNameTournamentPlayed.Input.Path
            /// - Remark: Generated from `#/paths/api/user/{username}/tournament/played/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Max number of tournaments to fetch
                ///
                /// - Remark: Generated from `#/paths/api/user/{username}/tournament/played/GET/query/nb`.
                internal var nb: Swift.Int?
                /// Include the player performance rating in the response, at some cost for the server.
                ///
                ///
                /// - Remark: Generated from `#/paths/api/user/{username}/tournament/played/GET/query/performance`.
                internal var performance: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - nb: Max number of tournaments to fetch
                ///   - performance: Include the player performance rating in the response, at some cost for the server.
                internal init(
                    nb: Swift.Int? = nil,
                    performance: Swift.Bool? = nil
                ) {
                    self.nb = nb
                    self.performance = performance
                }
            }
            internal var query: Operations.apiUserNameTournamentPlayed.Input.Query
            /// - Remark: Generated from `#/paths/api/user/{username}/tournament/played/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiUserNameTournamentPlayed.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiUserNameTournamentPlayed.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiUserNameTournamentPlayed.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.apiUserNameTournamentPlayed.Input.Path,
                query: Operations.apiUserNameTournamentPlayed.Input.Query = .init(),
                headers: Operations.apiUserNameTournamentPlayed.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/user/{username}/tournament/played/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/user/{username}/tournament/played/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiUserNameTournamentPlayed.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/user/{username}/tournament/played/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/user/{username}/tournament/played/GET/responses/200/content/application\/x-ndjson`.
                    case application_x_hyphen_ndjson(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_ndjson`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_ndjson`.
                    /// - SeeAlso: `.application_x_hyphen_ndjson`.
                    internal var application_x_hyphen_ndjson: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_ndjson(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiUserNameTournamentPlayed.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiUserNameTournamentPlayed.Output.Ok.Headers = .init(),
                    body: Operations.apiUserNameTournamentPlayed.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The list of tournaments played by the user.
            ///
            /// - Remark: Generated from `#/paths//api/user/{username}/tournament/played/get(apiUserNameTournamentPlayed)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiUserNameTournamentPlayed.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiUserNameTournamentPlayed.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_ndjson
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-ndjson":
                    self = .application_x_hyphen_ndjson
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_ndjson:
                    return "application/x-ndjson"
                }
            }
            internal static var allCases: [Self] {
                [
                    .application_x_hyphen_ndjson
                ]
            }
        }
    }
    /// Create a new Swiss tournament
    ///
    /// Create a Swiss tournament for your team.
    /// This endpoint mirrors the Swiss tournament form from your team pagee.
    /// You can create up to 12 tournaments per day.
    /// Additional restrictions:
    ///   - clock.limit + clock.increment > 0
    ///   - 15s and 0+1 variant tournaments cannot be rated
    ///
    ///
    /// - Remark: HTTP `POST /api/swiss/new/{teamId}`.
    /// - Remark: Generated from `#/paths//api/swiss/new/{teamId}/post(apiSwissNew)`.
    internal enum apiSwissNew {
        internal static let id: Swift.String = "apiSwissNew"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/swiss/new/{teamId}/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// ID of the team
                ///
                /// - Remark: Generated from `#/paths/api/swiss/new/{teamId}/POST/path/teamId`.
                internal var teamId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - teamId: ID of the team
                internal init(teamId: Swift.String) {
                    self.teamId = teamId
                }
            }
            internal var path: Operations.apiSwissNew.Input.Path
            /// - Remark: Generated from `#/paths/api/swiss/new/{teamId}/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiSwissNew.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiSwissNew.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiSwissNew.Input.Headers
            /// - Remark: Generated from `#/paths/api/swiss/new/{teamId}/POST/requestBody`.
            @frozen internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/swiss/new/{teamId}/POST/requestBody/urlEncodedForm`.
                internal struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// The tournament name. Leave empty to get a random Grandmaster name
                    ///
                    /// - Remark: Generated from `#/paths/api/swiss/new/{teamId}/POST/requestBody/urlEncodedForm/name`.
                    internal var name: Swift.String?
                    /// Clock initial time in seconds
                    ///
                    /// - Remark: Generated from `#/paths/api/swiss/new/{teamId}/POST/requestBody/urlEncodedForm/clock.limit`.
                    internal var clock_period_limit: Swift.Double
                    /// Clock increment in seconds
                    ///
                    /// - Remark: Generated from `#/paths/api/swiss/new/{teamId}/POST/requestBody/urlEncodedForm/clock.increment`.
                    internal var clock_period_increment: Swift.Int
                    /// Maximum number of rounds to play
                    ///
                    /// - Remark: Generated from `#/paths/api/swiss/new/{teamId}/POST/requestBody/urlEncodedForm/nbRounds`.
                    internal var nbRounds: Swift.Int
                    /// Timestamp in milliseconds to start the tournament at a given date and time. By default, it starts 10 minutes after creation.
                    ///
                    /// - Remark: Generated from `#/paths/api/swiss/new/{teamId}/POST/requestBody/urlEncodedForm/startsAt`.
                    internal var startsAt: Swift.Int64?
                    /// How long to wait between each round, in seconds.
                    /// Set to 99999999 to manually schedule each round from the tournament UI.
                    /// If empty or -1, a sensible value is picked automatically.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/api/swiss/new/{teamId}/POST/requestBody/urlEncodedForm/roundInterval`.
                    @frozen internal enum roundIntervalPayload: Int, Codable, Hashable, Sendable {
                        case _n1 = -1
                        case _5 = 5
                        case _10 = 10
                        case _20 = 20
                        case _30 = 30
                        case _45 = 45
                        case _60 = 60
                        case _120 = 120
                        case _180 = 180
                        case _300 = 300
                        case _600 = 600
                        case _900 = 900
                        case _1200 = 1200
                        case _1800 = 1800
                        case _2700 = 2700
                        case _3600 = 3600
                        case _86400 = 86400
                        case _172800 = 172800
                        case _604800 = 604800
                        case _99999999 = 99999999
                    }
                    /// How long to wait between each round, in seconds.
                    /// Set to 99999999 to manually schedule each round from the tournament UI.
                    /// If empty or -1, a sensible value is picked automatically.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/api/swiss/new/{teamId}/POST/requestBody/urlEncodedForm/roundInterval`.
                    internal var roundInterval: Operations.apiSwissNew.Input.Body.urlEncodedFormPayload.roundIntervalPayload?
                    /// - Remark: Generated from `#/paths/api/swiss/new/{teamId}/POST/requestBody/urlEncodedForm/variant`.
                    internal var variant: Components.Schemas.VariantKey?
                    /// - Remark: Generated from `#/paths/api/swiss/new/{teamId}/POST/requestBody/urlEncodedForm/position`.
                    internal var position: Components.Schemas.SwissFromPositionFEN?
                    /// Anything you want to tell players about the tournament
                    ///
                    /// - Remark: Generated from `#/paths/api/swiss/new/{teamId}/POST/requestBody/urlEncodedForm/description`.
                    internal var description: Swift.String?
                    /// Games are rated and impact players ratings
                    ///
                    /// - Remark: Generated from `#/paths/api/swiss/new/{teamId}/POST/requestBody/urlEncodedForm/rated`.
                    internal var rated: Swift.Bool?
                    /// Make the tournament private and restrict access with a password.
                    ///
                    /// - Remark: Generated from `#/paths/api/swiss/new/{teamId}/POST/requestBody/urlEncodedForm/password`.
                    internal var password: Swift.String?
                    /// Usernames of players that must not play together.
                    /// Two usernames per line, separated by a space.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/api/swiss/new/{teamId}/POST/requestBody/urlEncodedForm/forbiddenPairings`.
                    internal var forbiddenPairings: Swift.String?
                    /// Manual pairings for the next round.
                    /// Two usernames per line, separated by a space. Example:
                    /// ```
                    /// PlayerA PlayerB
                    /// PlayerC PlayerD
                    /// ```
                    /// To give a bye (1 point) to a player instead of a pairing, add a line like so:
                    /// ```
                    /// PlayerE 1
                    /// ```
                    /// Missing players will be considered absent and get zero points.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/api/swiss/new/{teamId}/POST/requestBody/urlEncodedForm/manualPairings`.
                    internal var manualPairings: Swift.String?
                    /// Who can read and write in the chat.
                    /// - 0  = No-one
                    /// - 10 = Only team leaders
                    /// - 20 = Only team members
                    /// - 30 = All Lichess players
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/api/swiss/new/{teamId}/POST/requestBody/urlEncodedForm/chatFor`.
                    internal var chatFor: Swift.Double?
                    /// Minimum rating to join. Leave empty to let everyone join the tournament.
                    ///
                    /// - Remark: Generated from `#/paths/api/swiss/new/{teamId}/POST/requestBody/urlEncodedForm/conditions.minRating.rating`.
                    @frozen internal enum conditions_period_minRating_period_ratingPayload: Int, Codable, Hashable, Sendable {
                        case _1000 = 1000
                        case _1100 = 1100
                        case _1200 = 1200
                        case _1300 = 1300
                        case _1400 = 1400
                        case _1500 = 1500
                        case _1600 = 1600
                        case _1700 = 1700
                        case _1800 = 1800
                        case _1900 = 1900
                        case _2000 = 2000
                        case _2100 = 2100
                        case _2200 = 2200
                        case _2300 = 2300
                        case _2400 = 2400
                        case _2500 = 2500
                        case _2600 = 2600
                    }
                    /// Minimum rating to join. Leave empty to let everyone join the tournament.
                    ///
                    /// - Remark: Generated from `#/paths/api/swiss/new/{teamId}/POST/requestBody/urlEncodedForm/conditions.minRating.rating`.
                    internal var conditions_period_minRating_period_rating: Operations.apiSwissNew.Input.Body.urlEncodedFormPayload.conditions_period_minRating_period_ratingPayload?
                    /// Maximum rating to join. Based on best rating reached in the last 7 days. Leave empty to let everyone join the tournament.
                    ///
                    /// - Remark: Generated from `#/paths/api/swiss/new/{teamId}/POST/requestBody/urlEncodedForm/conditions.maxRating.rating`.
                    @frozen internal enum conditions_period_maxRating_period_ratingPayload: Int, Codable, Hashable, Sendable {
                        case _2200 = 2200
                        case _2100 = 2100
                        case _2000 = 2000
                        case _1900 = 1900
                        case _1800 = 1800
                        case _1700 = 1700
                        case _1600 = 1600
                        case _1500 = 1500
                        case _1400 = 1400
                        case _1300 = 1300
                        case _1200 = 1200
                        case _1100 = 1100
                        case _1000 = 1000
                        case _900 = 900
                        case _800 = 800
                    }
                    /// Maximum rating to join. Based on best rating reached in the last 7 days. Leave empty to let everyone join the tournament.
                    ///
                    /// - Remark: Generated from `#/paths/api/swiss/new/{teamId}/POST/requestBody/urlEncodedForm/conditions.maxRating.rating`.
                    internal var conditions_period_maxRating_period_rating: Operations.apiSwissNew.Input.Body.urlEncodedFormPayload.conditions_period_maxRating_period_ratingPayload?
                    /// Minimum number of rated games required to join.
                    ///
                    /// - Remark: Generated from `#/paths/api/swiss/new/{teamId}/POST/requestBody/urlEncodedForm/conditions.nbRatedGame.nb`.
                    internal var conditions_period_nbRatedGame_period_nb: Swift.Int?
                    /// Only let players join if they have played their last swiss game.
                    /// If they failed to show up in a recent swiss event, they won't be able to enter yours.
                    /// This results in a better swiss experience for the players who actually show up.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/api/swiss/new/{teamId}/POST/requestBody/urlEncodedForm/conditions.playYourGames`.
                    internal var conditions_period_playYourGames: Swift.Bool?
                    /// Predefined list of usernames that are allowed to join, separated by commas.
                    /// If this list is non-empty, then usernames absent from this list will be forbidden to join.
                    /// Adding `%titled` to the list additionally allows any titled player to join.
                    /// Example: `thibault,german11,%titled`
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/api/swiss/new/{teamId}/POST/requestBody/urlEncodedForm/conditions.allowList`.
                    internal var conditions_period_allowList: Swift.String?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: The tournament name. Leave empty to get a random Grandmaster name
                    ///   - clock_period_limit: Clock initial time in seconds
                    ///   - clock_period_increment: Clock increment in seconds
                    ///   - nbRounds: Maximum number of rounds to play
                    ///   - startsAt: Timestamp in milliseconds to start the tournament at a given date and time. By default, it starts 10 minutes after creation.
                    ///   - roundInterval: How long to wait between each round, in seconds.
                    ///   - variant:
                    ///   - position:
                    ///   - description: Anything you want to tell players about the tournament
                    ///   - rated: Games are rated and impact players ratings
                    ///   - password: Make the tournament private and restrict access with a password.
                    ///   - forbiddenPairings: Usernames of players that must not play together.
                    ///   - manualPairings: Manual pairings for the next round.
                    ///   - chatFor: Who can read and write in the chat.
                    ///   - conditions_period_minRating_period_rating: Minimum rating to join. Leave empty to let everyone join the tournament.
                    ///   - conditions_period_maxRating_period_rating: Maximum rating to join. Based on best rating reached in the last 7 days. Leave empty to let everyone join the tournament.
                    ///   - conditions_period_nbRatedGame_period_nb: Minimum number of rated games required to join.
                    ///   - conditions_period_playYourGames: Only let players join if they have played their last swiss game.
                    ///   - conditions_period_allowList: Predefined list of usernames that are allowed to join, separated by commas.
                    internal init(
                        name: Swift.String? = nil,
                        clock_period_limit: Swift.Double,
                        clock_period_increment: Swift.Int,
                        nbRounds: Swift.Int,
                        startsAt: Swift.Int64? = nil,
                        roundInterval: Operations.apiSwissNew.Input.Body.urlEncodedFormPayload.roundIntervalPayload? = nil,
                        variant: Components.Schemas.VariantKey? = nil,
                        position: Components.Schemas.SwissFromPositionFEN? = nil,
                        description: Swift.String? = nil,
                        rated: Swift.Bool? = nil,
                        password: Swift.String? = nil,
                        forbiddenPairings: Swift.String? = nil,
                        manualPairings: Swift.String? = nil,
                        chatFor: Swift.Double? = nil,
                        conditions_period_minRating_period_rating: Operations.apiSwissNew.Input.Body.urlEncodedFormPayload.conditions_period_minRating_period_ratingPayload? = nil,
                        conditions_period_maxRating_period_rating: Operations.apiSwissNew.Input.Body.urlEncodedFormPayload.conditions_period_maxRating_period_ratingPayload? = nil,
                        conditions_period_nbRatedGame_period_nb: Swift.Int? = nil,
                        conditions_period_playYourGames: Swift.Bool? = nil,
                        conditions_period_allowList: Swift.String? = nil
                    ) {
                        self.name = name
                        self.clock_period_limit = clock_period_limit
                        self.clock_period_increment = clock_period_increment
                        self.nbRounds = nbRounds
                        self.startsAt = startsAt
                        self.roundInterval = roundInterval
                        self.variant = variant
                        self.position = position
                        self.description = description
                        self.rated = rated
                        self.password = password
                        self.forbiddenPairings = forbiddenPairings
                        self.manualPairings = manualPairings
                        self.chatFor = chatFor
                        self.conditions_period_minRating_period_rating = conditions_period_minRating_period_rating
                        self.conditions_period_maxRating_period_rating = conditions_period_maxRating_period_rating
                        self.conditions_period_nbRatedGame_period_nb = conditions_period_nbRatedGame_period_nb
                        self.conditions_period_playYourGames = conditions_period_playYourGames
                        self.conditions_period_allowList = conditions_period_allowList
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case name
                        case clock_period_limit = "clock.limit"
                        case clock_period_increment = "clock.increment"
                        case nbRounds
                        case startsAt
                        case roundInterval
                        case variant
                        case position
                        case description
                        case rated
                        case password
                        case forbiddenPairings
                        case manualPairings
                        case chatFor
                        case conditions_period_minRating_period_rating = "conditions.minRating.rating"
                        case conditions_period_maxRating_period_rating = "conditions.maxRating.rating"
                        case conditions_period_nbRatedGame_period_nb = "conditions.nbRatedGame.nb"
                        case conditions_period_playYourGames = "conditions.playYourGames"
                        case conditions_period_allowList = "conditions.allowList"
                    }
                }
                /// - Remark: Generated from `#/paths/api/swiss/new/{teamId}/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.apiSwissNew.Input.Body.urlEncodedFormPayload)
            }
            internal var body: Operations.apiSwissNew.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.apiSwissNew.Input.Path,
                headers: Operations.apiSwissNew.Input.Headers = .init(),
                body: Operations.apiSwissNew.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/swiss/new/{teamId}/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/swiss/new/{teamId}/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiSwissNew.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/swiss/new/{teamId}/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/swiss/new/{teamId}/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.SwissTournament)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.SwissTournament {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiSwissNew.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiSwissNew.Output.Ok.Headers = .init(),
                    body: Operations.apiSwissNew.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The Swiss tournament was successfully created.
            ///
            /// - Remark: Generated from `#/paths//api/swiss/new/{teamId}/post(apiSwissNew)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiSwissNew.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiSwissNew.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/swiss/new/{teamId}/POST/responses/400/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/swiss/new/{teamId}/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiSwissNew.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.apiSwissNew.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// The creation of the Swiss tournament failed.
            ///
            /// - Remark: Generated from `#/paths//api/swiss/new/{teamId}/post(apiSwissNew)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.apiSwissNew.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.apiSwissNew.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get info about a Swiss tournament
    ///
    /// Get detailed info about a Swiss tournament.
    ///
    ///
    /// - Remark: HTTP `GET /api/swiss/{id}`.
    /// - Remark: Generated from `#/paths//api/swiss/{id}/get(swiss)`.
    internal enum swiss {
        internal static let id: Swift.String = "swiss"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/swiss/{id}/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// The Swiss tournament ID.
                ///
                /// - Remark: Generated from `#/paths/api/swiss/{id}/GET/path/id`.
                internal var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: The Swiss tournament ID.
                internal init(id: Swift.String) {
                    self.id = id
                }
            }
            internal var path: Operations.swiss.Input.Path
            /// - Remark: Generated from `#/paths/api/swiss/{id}/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.swiss.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.swiss.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.swiss.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.swiss.Input.Path,
                headers: Operations.swiss.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/swiss/{id}/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.swiss.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/swiss/{id}/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.SwissTournament)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.SwissTournament {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.swiss.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.swiss.Output.Ok.Headers = .init(),
                    body: Operations.swiss.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The information of the Swiss tournament.
            ///
            /// - Remark: Generated from `#/paths//api/swiss/{id}/get(swiss)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.swiss.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.swiss.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a Swiss tournament
    ///
    /// Update a Swiss tournament.
    /// Be mindful not to make important changes to ongoing tournaments.
    /// Additional restrictions:
    ///   - clock.limit + clock.increment > 0
    ///   - 15s and 0+1 variant tournaments cannot be rated
    ///
    ///
    /// - Remark: HTTP `POST /api/swiss/{id}/edit`.
    /// - Remark: Generated from `#/paths//api/swiss/{id}/edit/post(apiSwissUpdate)`.
    internal enum apiSwissUpdate {
        internal static let id: Swift.String = "apiSwissUpdate"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/swiss/{id}/edit/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// The tournament ID.
                ///
                /// - Remark: Generated from `#/paths/api/swiss/{id}/edit/POST/path/id`.
                internal var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: The tournament ID.
                internal init(id: Swift.String) {
                    self.id = id
                }
            }
            internal var path: Operations.apiSwissUpdate.Input.Path
            /// - Remark: Generated from `#/paths/api/swiss/{id}/edit/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiSwissUpdate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiSwissUpdate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiSwissUpdate.Input.Headers
            /// - Remark: Generated from `#/paths/api/swiss/{id}/edit/POST/requestBody`.
            @frozen internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/swiss/{id}/edit/POST/requestBody/urlEncodedForm`.
                internal struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// The tournament name. Leave empty to get a random Grandmaster name
                    ///
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/edit/POST/requestBody/urlEncodedForm/name`.
                    internal var name: Swift.String?
                    /// Clock initial time in seconds
                    ///
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/edit/POST/requestBody/urlEncodedForm/clock.limit`.
                    internal var clock_period_limit: Swift.Double
                    /// Clock increment in seconds
                    ///
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/edit/POST/requestBody/urlEncodedForm/clock.increment`.
                    internal var clock_period_increment: Swift.Int
                    /// Maximum number of rounds to play
                    ///
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/edit/POST/requestBody/urlEncodedForm/nbRounds`.
                    internal var nbRounds: Swift.Int
                    /// Timestamp in milliseconds to start the tournament at a given date and time. By default, it starts 10 minutes after creation.
                    ///
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/edit/POST/requestBody/urlEncodedForm/startsAt`.
                    internal var startsAt: Swift.Int64?
                    /// How long to wait between each round, in seconds.
                    /// Set to 99999999 to manually schedule each round from the tournament UI, or [with the API](#tag/Swiss-tournaments/operation/apiSwissScheduleNextRound).
                    /// If empty or -1, a sensible value is picked automatically.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/edit/POST/requestBody/urlEncodedForm/roundInterval`.
                    @frozen internal enum roundIntervalPayload: Int, Codable, Hashable, Sendable {
                        case _n1 = -1
                        case _5 = 5
                        case _10 = 10
                        case _20 = 20
                        case _30 = 30
                        case _45 = 45
                        case _60 = 60
                        case _120 = 120
                        case _180 = 180
                        case _300 = 300
                        case _600 = 600
                        case _900 = 900
                        case _1200 = 1200
                        case _1800 = 1800
                        case _2700 = 2700
                        case _3600 = 3600
                        case _86400 = 86400
                        case _172800 = 172800
                        case _604800 = 604800
                        case _99999999 = 99999999
                    }
                    /// How long to wait between each round, in seconds.
                    /// Set to 99999999 to manually schedule each round from the tournament UI, or [with the API](#tag/Swiss-tournaments/operation/apiSwissScheduleNextRound).
                    /// If empty or -1, a sensible value is picked automatically.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/edit/POST/requestBody/urlEncodedForm/roundInterval`.
                    internal var roundInterval: Operations.apiSwissUpdate.Input.Body.urlEncodedFormPayload.roundIntervalPayload?
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/edit/POST/requestBody/urlEncodedForm/variant`.
                    internal var variant: Components.Schemas.VariantKey?
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/edit/POST/requestBody/urlEncodedForm/position`.
                    internal var position: Components.Schemas.SwissFromPositionFEN?
                    /// Anything you want to tell players about the tournament
                    ///
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/edit/POST/requestBody/urlEncodedForm/description`.
                    internal var description: Swift.String?
                    /// Games are rated and impact players ratings
                    ///
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/edit/POST/requestBody/urlEncodedForm/rated`.
                    internal var rated: Swift.Bool?
                    /// Make the tournament private and restrict access with a password.
                    ///
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/edit/POST/requestBody/urlEncodedForm/password`.
                    internal var password: Swift.String?
                    /// Usernames of players that must not play together.
                    /// Two usernames per line, separated by a space.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/edit/POST/requestBody/urlEncodedForm/forbiddenPairings`.
                    internal var forbiddenPairings: Swift.String?
                    /// Manual pairings for the next round.
                    /// Two usernames per line, separated by a space.
                    /// Present players without a valid pairing will be given a bye, which is worth 1 point.
                    /// Forfeited players will get 0 points.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/edit/POST/requestBody/urlEncodedForm/manualPairings`.
                    internal var manualPairings: Swift.String?
                    /// Who can read and write in the chat.
                    /// - 0  = No-one
                    /// - 10 = Only team leaders
                    /// - 20 = Only team members
                    /// - 30 = All Lichess players
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/edit/POST/requestBody/urlEncodedForm/chatFor`.
                    internal var chatFor: Swift.Double?
                    /// Minimum rating to join. Leave empty to let everyone join the tournament.
                    ///
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/edit/POST/requestBody/urlEncodedForm/conditions.minRating.rating`.
                    @frozen internal enum conditions_period_minRating_period_ratingPayload: Int, Codable, Hashable, Sendable {
                        case _1000 = 1000
                        case _1100 = 1100
                        case _1200 = 1200
                        case _1300 = 1300
                        case _1400 = 1400
                        case _1500 = 1500
                        case _1600 = 1600
                        case _1700 = 1700
                        case _1800 = 1800
                        case _1900 = 1900
                        case _2000 = 2000
                        case _2100 = 2100
                        case _2200 = 2200
                        case _2300 = 2300
                        case _2400 = 2400
                        case _2500 = 2500
                        case _2600 = 2600
                    }
                    /// Minimum rating to join. Leave empty to let everyone join the tournament.
                    ///
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/edit/POST/requestBody/urlEncodedForm/conditions.minRating.rating`.
                    internal var conditions_period_minRating_period_rating: Operations.apiSwissUpdate.Input.Body.urlEncodedFormPayload.conditions_period_minRating_period_ratingPayload?
                    /// Maximum rating to join. Based on best rating reached in the last 7 days. Leave empty to let everyone join the tournament.
                    ///
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/edit/POST/requestBody/urlEncodedForm/conditions.maxRating.rating`.
                    @frozen internal enum conditions_period_maxRating_period_ratingPayload: Int, Codable, Hashable, Sendable {
                        case _2200 = 2200
                        case _2100 = 2100
                        case _2000 = 2000
                        case _1900 = 1900
                        case _1800 = 1800
                        case _1700 = 1700
                        case _1600 = 1600
                        case _1500 = 1500
                        case _1400 = 1400
                        case _1300 = 1300
                        case _1200 = 1200
                        case _1100 = 1100
                        case _1000 = 1000
                        case _900 = 900
                        case _800 = 800
                    }
                    /// Maximum rating to join. Based on best rating reached in the last 7 days. Leave empty to let everyone join the tournament.
                    ///
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/edit/POST/requestBody/urlEncodedForm/conditions.maxRating.rating`.
                    internal var conditions_period_maxRating_period_rating: Operations.apiSwissUpdate.Input.Body.urlEncodedFormPayload.conditions_period_maxRating_period_ratingPayload?
                    /// Minimum number of rated games required to join.
                    ///
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/edit/POST/requestBody/urlEncodedForm/conditions.nbRatedGame.nb`.
                    internal var conditions_period_nbRatedGame_period_nb: Swift.Int?
                    /// Only let players join if they have played their last swiss game.
                    /// If they failed to show up in a recent swiss event, they won't be able to enter yours.
                    /// This results in a better swiss experience for the players who actually show up.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/edit/POST/requestBody/urlEncodedForm/conditions.playYourGames`.
                    internal var conditions_period_playYourGames: Swift.Bool?
                    /// Predefined list of usernames that are allowed to join, separated by commas.
                    /// If this list is non-empty, then usernames absent from this list will be forbidden to join.
                    /// Adding `%titled` to the list additionally allows any titled player to join.
                    /// Example: `thibault,german11,%titled`
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/edit/POST/requestBody/urlEncodedForm/conditions.allowList`.
                    internal var conditions_period_allowList: Swift.String?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: The tournament name. Leave empty to get a random Grandmaster name
                    ///   - clock_period_limit: Clock initial time in seconds
                    ///   - clock_period_increment: Clock increment in seconds
                    ///   - nbRounds: Maximum number of rounds to play
                    ///   - startsAt: Timestamp in milliseconds to start the tournament at a given date and time. By default, it starts 10 minutes after creation.
                    ///   - roundInterval: How long to wait between each round, in seconds.
                    ///   - variant:
                    ///   - position:
                    ///   - description: Anything you want to tell players about the tournament
                    ///   - rated: Games are rated and impact players ratings
                    ///   - password: Make the tournament private and restrict access with a password.
                    ///   - forbiddenPairings: Usernames of players that must not play together.
                    ///   - manualPairings: Manual pairings for the next round.
                    ///   - chatFor: Who can read and write in the chat.
                    ///   - conditions_period_minRating_period_rating: Minimum rating to join. Leave empty to let everyone join the tournament.
                    ///   - conditions_period_maxRating_period_rating: Maximum rating to join. Based on best rating reached in the last 7 days. Leave empty to let everyone join the tournament.
                    ///   - conditions_period_nbRatedGame_period_nb: Minimum number of rated games required to join.
                    ///   - conditions_period_playYourGames: Only let players join if they have played their last swiss game.
                    ///   - conditions_period_allowList: Predefined list of usernames that are allowed to join, separated by commas.
                    internal init(
                        name: Swift.String? = nil,
                        clock_period_limit: Swift.Double,
                        clock_period_increment: Swift.Int,
                        nbRounds: Swift.Int,
                        startsAt: Swift.Int64? = nil,
                        roundInterval: Operations.apiSwissUpdate.Input.Body.urlEncodedFormPayload.roundIntervalPayload? = nil,
                        variant: Components.Schemas.VariantKey? = nil,
                        position: Components.Schemas.SwissFromPositionFEN? = nil,
                        description: Swift.String? = nil,
                        rated: Swift.Bool? = nil,
                        password: Swift.String? = nil,
                        forbiddenPairings: Swift.String? = nil,
                        manualPairings: Swift.String? = nil,
                        chatFor: Swift.Double? = nil,
                        conditions_period_minRating_period_rating: Operations.apiSwissUpdate.Input.Body.urlEncodedFormPayload.conditions_period_minRating_period_ratingPayload? = nil,
                        conditions_period_maxRating_period_rating: Operations.apiSwissUpdate.Input.Body.urlEncodedFormPayload.conditions_period_maxRating_period_ratingPayload? = nil,
                        conditions_period_nbRatedGame_period_nb: Swift.Int? = nil,
                        conditions_period_playYourGames: Swift.Bool? = nil,
                        conditions_period_allowList: Swift.String? = nil
                    ) {
                        self.name = name
                        self.clock_period_limit = clock_period_limit
                        self.clock_period_increment = clock_period_increment
                        self.nbRounds = nbRounds
                        self.startsAt = startsAt
                        self.roundInterval = roundInterval
                        self.variant = variant
                        self.position = position
                        self.description = description
                        self.rated = rated
                        self.password = password
                        self.forbiddenPairings = forbiddenPairings
                        self.manualPairings = manualPairings
                        self.chatFor = chatFor
                        self.conditions_period_minRating_period_rating = conditions_period_minRating_period_rating
                        self.conditions_period_maxRating_period_rating = conditions_period_maxRating_period_rating
                        self.conditions_period_nbRatedGame_period_nb = conditions_period_nbRatedGame_period_nb
                        self.conditions_period_playYourGames = conditions_period_playYourGames
                        self.conditions_period_allowList = conditions_period_allowList
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case name
                        case clock_period_limit = "clock.limit"
                        case clock_period_increment = "clock.increment"
                        case nbRounds
                        case startsAt
                        case roundInterval
                        case variant
                        case position
                        case description
                        case rated
                        case password
                        case forbiddenPairings
                        case manualPairings
                        case chatFor
                        case conditions_period_minRating_period_rating = "conditions.minRating.rating"
                        case conditions_period_maxRating_period_rating = "conditions.maxRating.rating"
                        case conditions_period_nbRatedGame_period_nb = "conditions.nbRatedGame.nb"
                        case conditions_period_playYourGames = "conditions.playYourGames"
                        case conditions_period_allowList = "conditions.allowList"
                    }
                }
                /// - Remark: Generated from `#/paths/api/swiss/{id}/edit/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.apiSwissUpdate.Input.Body.urlEncodedFormPayload)
            }
            internal var body: Operations.apiSwissUpdate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.apiSwissUpdate.Input.Path,
                headers: Operations.apiSwissUpdate.Input.Headers = .init(),
                body: Operations.apiSwissUpdate.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/swiss/{id}/edit/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/edit/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiSwissUpdate.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/swiss/{id}/edit/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/edit/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.SwissTournament)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.SwissTournament {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiSwissUpdate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiSwissUpdate.Output.Ok.Headers = .init(),
                    body: Operations.apiSwissUpdate.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The Swiss tournament was successfully updated.
            ///
            /// - Remark: Generated from `#/paths//api/swiss/{id}/edit/post(apiSwissUpdate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiSwissUpdate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiSwissUpdate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/swiss/{id}/edit/POST/responses/400/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/edit/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiSwissUpdate.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.apiSwissUpdate.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Updating the swiss failed.
            ///
            /// - Remark: Generated from `#/paths//api/swiss/{id}/edit/post(apiSwissUpdate)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.apiSwissUpdate.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.apiSwissUpdate.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/swiss/{id}/edit/POST/responses/401/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/edit/POST/responses/401/content/application\/json`.
                    case json(Components.Schemas.SwissUnauthorisedEdit)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.SwissUnauthorisedEdit {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiSwissUpdate.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.apiSwissUpdate.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// This user cannot update this Swiss.
            ///
            /// - Remark: Generated from `#/paths//api/swiss/{id}/edit/post(apiSwissUpdate)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.apiSwissUpdate.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.apiSwissUpdate.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Manually schedule the next round
    ///
    /// Manually schedule the next round date and time of a Swiss tournament.
    /// This sets the `roundInterval` field to `99999999`, i.e. manual scheduling.
    /// All further rounds will need to be manually scheduled, unless the `roundInterval` field is changed back to automatic scheduling.
    ///
    ///
    /// - Remark: HTTP `POST /api/swiss/{id}/schedule-next-round`.
    /// - Remark: Generated from `#/paths//api/swiss/{id}/schedule-next-round/post(apiSwissScheduleNextRound)`.
    internal enum apiSwissScheduleNextRound {
        internal static let id: Swift.String = "apiSwissScheduleNextRound"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/swiss/{id}/schedule-next-round/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// The tournament ID.
                ///
                /// - Remark: Generated from `#/paths/api/swiss/{id}/schedule-next-round/POST/path/id`.
                internal var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: The tournament ID.
                internal init(id: Swift.String) {
                    self.id = id
                }
            }
            internal var path: Operations.apiSwissScheduleNextRound.Input.Path
            /// - Remark: Generated from `#/paths/api/swiss/{id}/schedule-next-round/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiSwissScheduleNextRound.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiSwissScheduleNextRound.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiSwissScheduleNextRound.Input.Headers
            /// - Remark: Generated from `#/paths/api/swiss/{id}/schedule-next-round/POST/requestBody`.
            @frozen internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/swiss/{id}/schedule-next-round/POST/requestBody/urlEncodedForm`.
                internal struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Timestamp in milliseconds to start the next round at a given date and time.
                    ///
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/schedule-next-round/POST/requestBody/urlEncodedForm/date`.
                    internal var date: Swift.Int64?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - date: Timestamp in milliseconds to start the next round at a given date and time.
                    internal init(date: Swift.Int64? = nil) {
                        self.date = date
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case date
                    }
                }
                /// - Remark: Generated from `#/paths/api/swiss/{id}/schedule-next-round/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.apiSwissScheduleNextRound.Input.Body.urlEncodedFormPayload)
            }
            internal var body: Operations.apiSwissScheduleNextRound.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.apiSwissScheduleNextRound.Input.Path,
                headers: Operations.apiSwissScheduleNextRound.Input.Headers = .init(),
                body: Operations.apiSwissScheduleNextRound.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct NoContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/swiss/{id}/schedule-next-round/POST/responses/204/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/schedule-next-round/POST/responses/204/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiSwissScheduleNextRound.Output.NoContent.Headers
                /// Creates a new `NoContent`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                internal init(headers: Operations.apiSwissScheduleNextRound.Output.NoContent.Headers = .init()) {
                    self.headers = headers
                }
            }
            /// The Swiss tournament was successfully updated.
            ///
            /// - Remark: Generated from `#/paths//api/swiss/{id}/schedule-next-round/post(apiSwissScheduleNextRound)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.apiSwissScheduleNextRound.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            internal var noContent: Operations.apiSwissScheduleNextRound.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/swiss/{id}/schedule-next-round/POST/responses/400/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/schedule-next-round/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiSwissScheduleNextRound.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.apiSwissScheduleNextRound.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Updating the swiss failed.
            ///
            /// - Remark: Generated from `#/paths//api/swiss/{id}/schedule-next-round/post(apiSwissScheduleNextRound)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.apiSwissScheduleNextRound.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.apiSwissScheduleNextRound.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/swiss/{id}/schedule-next-round/POST/responses/401/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/schedule-next-round/POST/responses/401/content/application\/json`.
                    case json(Components.Schemas.SwissUnauthorisedEdit)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.SwissUnauthorisedEdit {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiSwissScheduleNextRound.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.apiSwissScheduleNextRound.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// This user cannot update this Swiss.
            ///
            /// - Remark: Generated from `#/paths//api/swiss/{id}/schedule-next-round/post(apiSwissScheduleNextRound)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.apiSwissScheduleNextRound.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.apiSwissScheduleNextRound.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Join a Swiss tournament
    ///
    /// Join a Swiss tournament, possibly with a password.
    ///
    ///
    /// - Remark: HTTP `POST /api/swiss/{id}/join`.
    /// - Remark: Generated from `#/paths//api/swiss/{id}/join/post(apiSwissJoin)`.
    internal enum apiSwissJoin {
        internal static let id: Swift.String = "apiSwissJoin"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/swiss/{id}/join/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// The tournament ID.
                ///
                /// - Remark: Generated from `#/paths/api/swiss/{id}/join/POST/path/id`.
                internal var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: The tournament ID.
                internal init(id: Swift.String) {
                    self.id = id
                }
            }
            internal var path: Operations.apiSwissJoin.Input.Path
            /// - Remark: Generated from `#/paths/api/swiss/{id}/join/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiSwissJoin.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiSwissJoin.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiSwissJoin.Input.Headers
            /// - Remark: Generated from `#/paths/api/swiss/{id}/join/POST/requestBody`.
            @frozen internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/swiss/{id}/join/POST/requestBody/urlEncodedForm`.
                internal struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// The tournament password, if one is required
                    ///
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/join/POST/requestBody/urlEncodedForm/password`.
                    internal var password: Swift.String?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - password: The tournament password, if one is required
                    internal init(password: Swift.String? = nil) {
                        self.password = password
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case password
                    }
                }
                /// - Remark: Generated from `#/paths/api/swiss/{id}/join/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.apiSwissJoin.Input.Body.urlEncodedFormPayload)
            }
            internal var body: Operations.apiSwissJoin.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.apiSwissJoin.Input.Path,
                headers: Operations.apiSwissJoin.Input.Headers = .init(),
                body: Operations.apiSwissJoin.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/swiss/{id}/join/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/join/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiSwissJoin.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/swiss/{id}/join/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/join/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiSwissJoin.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiSwissJoin.Output.Ok.Headers = .init(),
                    body: Operations.apiSwissJoin.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The tournament was successfully joined.
            ///
            /// - Remark: Generated from `#/paths//api/swiss/{id}/join/post(apiSwissJoin)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiSwissJoin.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiSwissJoin.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/swiss/{id}/join/POST/responses/400/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/join/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiSwissJoin.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.apiSwissJoin.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Joining the tournament failed.
            ///
            /// - Remark: Generated from `#/paths//api/swiss/{id}/join/post(apiSwissJoin)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.apiSwissJoin.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.apiSwissJoin.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Pause or leave a swiss tournament
    ///
    /// Leave a future Swiss tournament, or take a break on an ongoing Swiss tournament.
    /// It's possible to join again later. Points are preserved.
    ///
    ///
    /// - Remark: HTTP `POST /api/swiss/{id}/withdraw`.
    /// - Remark: Generated from `#/paths//api/swiss/{id}/withdraw/post(apiSwissWithdraw)`.
    internal enum apiSwissWithdraw {
        internal static let id: Swift.String = "apiSwissWithdraw"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/swiss/{id}/withdraw/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// The tournament ID.
                ///
                /// - Remark: Generated from `#/paths/api/swiss/{id}/withdraw/POST/path/id`.
                internal var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: The tournament ID.
                internal init(id: Swift.String) {
                    self.id = id
                }
            }
            internal var path: Operations.apiSwissWithdraw.Input.Path
            /// - Remark: Generated from `#/paths/api/swiss/{id}/withdraw/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiSwissWithdraw.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiSwissWithdraw.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiSwissWithdraw.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.apiSwissWithdraw.Input.Path,
                headers: Operations.apiSwissWithdraw.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/swiss/{id}/withdraw/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/withdraw/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiSwissWithdraw.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/swiss/{id}/withdraw/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/withdraw/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiSwissWithdraw.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiSwissWithdraw.Output.Ok.Headers = .init(),
                    body: Operations.apiSwissWithdraw.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The tournament was successfully paused or left.
            ///
            /// - Remark: Generated from `#/paths//api/swiss/{id}/withdraw/post(apiSwissWithdraw)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiSwissWithdraw.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiSwissWithdraw.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Terminate a Swiss tournament
    ///
    /// Terminate a Swiss tournament
    ///
    ///
    /// - Remark: HTTP `POST /api/swiss/{id}/terminate`.
    /// - Remark: Generated from `#/paths//api/swiss/{id}/terminate/post(apiSwissTerminate)`.
    internal enum apiSwissTerminate {
        internal static let id: Swift.String = "apiSwissTerminate"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/swiss/{id}/terminate/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// The Swiss tournament ID.
                ///
                /// - Remark: Generated from `#/paths/api/swiss/{id}/terminate/POST/path/id`.
                internal var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: The Swiss tournament ID.
                internal init(id: Swift.String) {
                    self.id = id
                }
            }
            internal var path: Operations.apiSwissTerminate.Input.Path
            /// - Remark: Generated from `#/paths/api/swiss/{id}/terminate/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiSwissTerminate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiSwissTerminate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiSwissTerminate.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.apiSwissTerminate.Input.Path,
                headers: Operations.apiSwissTerminate.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/swiss/{id}/terminate/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/terminate/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiSwissTerminate.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/swiss/{id}/terminate/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/terminate/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiSwissTerminate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiSwissTerminate.Output.Ok.Headers = .init(),
                    body: Operations.apiSwissTerminate.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The Swiss tournament was successfully terminated.
            ///
            /// - Remark: Generated from `#/paths//api/swiss/{id}/terminate/post(apiSwissTerminate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiSwissTerminate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiSwissTerminate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/swiss/{id}/terminate/POST/responses/400/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/terminate/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiSwissTerminate.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.apiSwissTerminate.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Terminating the Swiss tournament failed.
            ///
            /// - Remark: Generated from `#/paths//api/swiss/{id}/terminate/post(apiSwissTerminate)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.apiSwissTerminate.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.apiSwissTerminate.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Export TRF of a Swiss tournament
    ///
    /// Download a tournament in the Tournament Report File format, the FIDE standard.
    /// Documentation: <https://www.fide.com/FIDE/handbook/C04Annex2_TRF16.pdf>
    /// Example: <https://lichess.org/swiss/j8rtJ5GL.trf>
    ///
    ///
    /// - Remark: HTTP `GET /swiss/{id}.trf`.
    /// - Remark: Generated from `#/paths//swiss/{id}.trf/get(swissTrf)`.
    internal enum swissTrf {
        internal static let id: Swift.String = "swissTrf"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/swiss/{id}.trf/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// The tournament ID.
                ///
                /// - Remark: Generated from `#/paths/swiss/{id}.trf/GET/path/id`.
                internal var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: The tournament ID.
                internal init(id: Swift.String) {
                    self.id = id
                }
            }
            internal var path: Operations.swissTrf.Input.Path
            /// - Remark: Generated from `#/paths/swiss/{id}.trf/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.swissTrf.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.swissTrf.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.swissTrf.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.swissTrf.Input.Path,
                headers: Operations.swissTrf.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/swiss/{id}.trf/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/swiss/{id}.trf/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.swissTrf.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/swiss/{id}.trf/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/swiss/{id}.trf/GET/responses/200/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    internal var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.swissTrf.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.swissTrf.Output.Ok.Headers = .init(),
                    body: Operations.swissTrf.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The TRF representation of a Swiss tournament.
            ///
            /// - Remark: Generated from `#/paths//swiss/{id}.trf/get(swissTrf)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.swissTrf.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.swissTrf.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case plainText
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .plainText:
                    return "text/plain"
                }
            }
            internal static var allCases: [Self] {
                [
                    .plainText
                ]
            }
        }
    }
    /// Export games of a Swiss tournament
    ///
    /// Download games of a swiss tournament in PGN or [ndjson](#section/Introduction/Streaming-with-ND-JSON) format.
    /// Games are sorted by chronological order.
    /// The game stream is throttled, depending on who is making the request:
    ///   - Anonymous request: 20 games per second
    ///   - [OAuth2 authenticated](#section/Introduction/Authentication) request: 30 games per second
    ///
    ///
    /// - Remark: HTTP `GET /api/swiss/{id}/games`.
    /// - Remark: Generated from `#/paths//api/swiss/{id}/games/get(gamesBySwiss)`.
    internal enum gamesBySwiss {
        internal static let id: Swift.String = "gamesBySwiss"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/swiss/{id}/games/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// The tournament ID.
                ///
                /// - Remark: Generated from `#/paths/api/swiss/{id}/games/GET/path/id`.
                internal var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: The tournament ID.
                internal init(id: Swift.String) {
                    self.id = id
                }
            }
            internal var path: Operations.gamesBySwiss.Input.Path
            /// - Remark: Generated from `#/paths/api/swiss/{id}/games/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Only the games played by a given player
                ///
                /// - Remark: Generated from `#/paths/api/swiss/{id}/games/GET/query/player`.
                internal var player: Swift.String?
                /// Include the PGN moves.
                ///
                /// - Remark: Generated from `#/paths/api/swiss/{id}/games/GET/query/moves`.
                internal var moves: Swift.Bool?
                /// Include the full PGN within the JSON response, in a `pgn` field.
                ///
                /// - Remark: Generated from `#/paths/api/swiss/{id}/games/GET/query/pgnInJson`.
                internal var pgnInJson: Swift.Bool?
                /// Include the PGN tags.
                ///
                /// - Remark: Generated from `#/paths/api/swiss/{id}/games/GET/query/tags`.
                internal var tags: Swift.Bool?
                /// Include clock status when available.
                /// Either as PGN comments: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`
                /// Or in a `clocks` JSON field, as centisecond integers, depending on the response type.
                ///
                ///
                /// - Remark: Generated from `#/paths/api/swiss/{id}/games/GET/query/clocks`.
                internal var clocks: Swift.Bool?
                /// Include analysis evaluations and comments, when available.
                /// Either as PGN comments: `12. Bxf6 { [%eval 0.23] } a3 { [%eval -1.09] }`
                /// Or in an `analysis` JSON field, depending on the response type.
                ///
                ///
                /// - Remark: Generated from `#/paths/api/swiss/{id}/games/GET/query/evals`.
                internal var evals: Swift.Bool?
                /// Include [accuracy percent](https://lichess.org/page/accuracy) of each player, when available. Only available in JSON.
                ///
                ///
                /// - Remark: Generated from `#/paths/api/swiss/{id}/games/GET/query/accuracy`.
                internal var accuracy: Swift.Bool?
                /// Include the opening name.
                /// Example: `[Opening "King's Gambit Accepted, King's Knight Gambit"]`
                ///
                ///
                /// - Remark: Generated from `#/paths/api/swiss/{id}/games/GET/query/opening`.
                internal var opening: Swift.Bool?
                /// Plies which mark the beginning of the middlegame and endgame.
                /// Only available in JSON
                ///
                ///
                /// - Remark: Generated from `#/paths/api/swiss/{id}/games/GET/query/division`.
                internal var division: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - player: Only the games played by a given player
                ///   - moves: Include the PGN moves.
                ///   - pgnInJson: Include the full PGN within the JSON response, in a `pgn` field.
                ///   - tags: Include the PGN tags.
                ///   - clocks: Include clock status when available.
                ///   - evals: Include analysis evaluations and comments, when available.
                ///   - accuracy: Include [accuracy percent](https://lichess.org/page/accuracy) of each player, when available. Only available in JSON.
                ///   - opening: Include the opening name.
                ///   - division: Plies which mark the beginning of the middlegame and endgame.
                internal init(
                    player: Swift.String? = nil,
                    moves: Swift.Bool? = nil,
                    pgnInJson: Swift.Bool? = nil,
                    tags: Swift.Bool? = nil,
                    clocks: Swift.Bool? = nil,
                    evals: Swift.Bool? = nil,
                    accuracy: Swift.Bool? = nil,
                    opening: Swift.Bool? = nil,
                    division: Swift.Bool? = nil
                ) {
                    self.player = player
                    self.moves = moves
                    self.pgnInJson = pgnInJson
                    self.tags = tags
                    self.clocks = clocks
                    self.evals = evals
                    self.accuracy = accuracy
                    self.opening = opening
                    self.division = division
                }
            }
            internal var query: Operations.gamesBySwiss.Input.Query
            /// - Remark: Generated from `#/paths/api/swiss/{id}/games/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gamesBySwiss.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gamesBySwiss.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.gamesBySwiss.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.gamesBySwiss.Input.Path,
                query: Operations.gamesBySwiss.Input.Query = .init(),
                headers: Operations.gamesBySwiss.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/swiss/{id}/games/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/games/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.gamesBySwiss.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/swiss/{id}/games/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/games/GET/responses/200/content/application\/x-chess-pgn`.
                    case application_x_hyphen_chess_hyphen_pgn(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_chess_hyphen_pgn`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_chess_hyphen_pgn`.
                    /// - SeeAlso: `.application_x_hyphen_chess_hyphen_pgn`.
                    internal var application_x_hyphen_chess_hyphen_pgn: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_chess_hyphen_pgn(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/x-chess-pgn",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/games/GET/responses/200/content/application\/x-ndjson`.
                    case application_x_hyphen_ndjson(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_ndjson`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_ndjson`.
                    /// - SeeAlso: `.application_x_hyphen_ndjson`.
                    internal var application_x_hyphen_ndjson: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_ndjson(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/x-ndjson",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.gamesBySwiss.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.gamesBySwiss.Output.Ok.Headers = .init(),
                    body: Operations.gamesBySwiss.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The list of games of a Swiss tournament.
            ///
            /// - Remark: Generated from `#/paths//api/swiss/{id}/games/get(gamesBySwiss)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.gamesBySwiss.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.gamesBySwiss.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_chess_hyphen_pgn
            case application_x_hyphen_ndjson
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-chess-pgn":
                    self = .application_x_hyphen_chess_hyphen_pgn
                case "application/x-ndjson":
                    self = .application_x_hyphen_ndjson
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_chess_hyphen_pgn:
                    return "application/x-chess-pgn"
                case .application_x_hyphen_ndjson:
                    return "application/x-ndjson"
                }
            }
            internal static var allCases: [Self] {
                [
                    .application_x_hyphen_chess_hyphen_pgn,
                    .application_x_hyphen_ndjson
                ]
            }
        }
    }
    /// Get results of a swiss tournament
    ///
    /// Players of a swiss tournament, with their score and performance, sorted by rank (best first).
    /// Players are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    /// If called on an ongoing tournament, results can be inconsistent
    /// due to ranking changes while the players are being streamed.
    /// Use on finished tournaments for guaranteed consistency.
    ///
    ///
    /// - Remark: HTTP `GET /api/swiss/{id}/results`.
    /// - Remark: Generated from `#/paths//api/swiss/{id}/results/get(resultsBySwiss)`.
    internal enum resultsBySwiss {
        internal static let id: Swift.String = "resultsBySwiss"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/swiss/{id}/results/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// The tournament ID.
                ///
                /// - Remark: Generated from `#/paths/api/swiss/{id}/results/GET/path/id`.
                internal var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: The tournament ID.
                internal init(id: Swift.String) {
                    self.id = id
                }
            }
            internal var path: Operations.resultsBySwiss.Input.Path
            /// - Remark: Generated from `#/paths/api/swiss/{id}/results/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Max number of players to fetch
                ///
                /// - Remark: Generated from `#/paths/api/swiss/{id}/results/GET/query/nb`.
                internal var nb: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - nb: Max number of players to fetch
                internal init(nb: Swift.Int? = nil) {
                    self.nb = nb
                }
            }
            internal var query: Operations.resultsBySwiss.Input.Query
            /// - Remark: Generated from `#/paths/api/swiss/{id}/results/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.resultsBySwiss.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.resultsBySwiss.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.resultsBySwiss.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.resultsBySwiss.Input.Path,
                query: Operations.resultsBySwiss.Input.Query = .init(),
                headers: Operations.resultsBySwiss.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/swiss/{id}/results/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/results/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.resultsBySwiss.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/swiss/{id}/results/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/swiss/{id}/results/GET/responses/200/content/application\/x-ndjson`.
                    case application_x_hyphen_ndjson(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_ndjson`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_ndjson`.
                    /// - SeeAlso: `.application_x_hyphen_ndjson`.
                    internal var application_x_hyphen_ndjson: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_ndjson(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.resultsBySwiss.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.resultsBySwiss.Output.Ok.Headers = .init(),
                    body: Operations.resultsBySwiss.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The results of a Swiss tournament.
            ///
            /// - Remark: Generated from `#/paths//api/swiss/{id}/results/get(resultsBySwiss)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.resultsBySwiss.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.resultsBySwiss.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_ndjson
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-ndjson":
                    self = .application_x_hyphen_ndjson
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_ndjson:
                    return "application/x-ndjson"
                }
            }
            internal static var allCases: [Self] {
                [
                    .application_x_hyphen_ndjson
                ]
            }
        }
    }
    /// Get team swiss tournaments
    ///
    /// Get all swiss tournaments of a team.
    /// Tournaments are sorted by reverse chronological order of start date (last starting first).
    /// Tournaments are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    ///
    ///
    /// - Remark: HTTP `GET /api/team/{teamId}/swiss`.
    /// - Remark: Generated from `#/paths//api/team/{teamId}/swiss/get(apiTeamSwiss)`.
    internal enum apiTeamSwiss {
        internal static let id: Swift.String = "apiTeamSwiss"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/team/{teamId}/swiss/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/team/{teamId}/swiss/GET/path/teamId`.
                internal var teamId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - teamId:
                internal init(teamId: Swift.String) {
                    self.teamId = teamId
                }
            }
            internal var path: Operations.apiTeamSwiss.Input.Path
            /// - Remark: Generated from `#/paths/api/team/{teamId}/swiss/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// How many tournaments to download.
                ///
                /// - Remark: Generated from `#/paths/api/team/{teamId}/swiss/GET/query/max`.
                internal var max: Swift.Int?
                /// - Remark: Generated from `#/paths/api/team/{teamId}/swiss/GET/query/status`.
                internal struct statusPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/api/team/{teamId}/swiss/GET/query/status/value1`.
                    internal var value1: Components.Schemas.SwissStatus
                    /// - Remark: Generated from `#/paths/api/team/{teamId}/swiss/GET/query/status/value2`.
                    internal var value2: OpenAPIRuntime.OpenAPIValueContainer
                    /// Creates a new `statusPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    ///   - value2:
                    internal init(
                        value1: Components.Schemas.SwissStatus,
                        value2: OpenAPIRuntime.OpenAPIValueContainer
                    ) {
                        self.value1 = value1
                        self.value2 = value2
                    }
                    internal init(from decoder: any Decoder) throws {
                        value1 = try decoder.decodeFromSingleValueContainer()
                        value2 = try .init(from: decoder)
                    }
                    internal func encode(to encoder: any Encoder) throws {
                        try encoder.encodeToSingleValueContainer(value1)
                    }
                }
                /// [Filter] Only swiss tournaments in this current state.
                ///
                ///
                /// - Remark: Generated from `#/paths/api/team/{teamId}/swiss/GET/query/status`.
                internal var status: Operations.apiTeamSwiss.Input.Query.statusPayload?
                /// [Filter] Only swiss tournaments created by a given user.
                ///
                ///
                /// - Remark: Generated from `#/paths/api/team/{teamId}/swiss/GET/query/createdBy`.
                internal var createdBy: Swift.String?
                /// [Filter] Only swiss tournaments with a given name.
                ///
                ///
                /// - Remark: Generated from `#/paths/api/team/{teamId}/swiss/GET/query/name`.
                internal var name: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - max: How many tournaments to download.
                ///   - status: [Filter] Only swiss tournaments in this current state.
                ///   - createdBy: [Filter] Only swiss tournaments created by a given user.
                ///   - name: [Filter] Only swiss tournaments with a given name.
                internal init(
                    max: Swift.Int? = nil,
                    status: Operations.apiTeamSwiss.Input.Query.statusPayload? = nil,
                    createdBy: Swift.String? = nil,
                    name: Swift.String? = nil
                ) {
                    self.max = max
                    self.status = status
                    self.createdBy = createdBy
                    self.name = name
                }
            }
            internal var query: Operations.apiTeamSwiss.Input.Query
            /// - Remark: Generated from `#/paths/api/team/{teamId}/swiss/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiTeamSwiss.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiTeamSwiss.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiTeamSwiss.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.apiTeamSwiss.Input.Path,
                query: Operations.apiTeamSwiss.Input.Query = .init(),
                headers: Operations.apiTeamSwiss.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/team/{teamId}/swiss/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/team/{teamId}/swiss/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiTeamSwiss.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/team/{teamId}/swiss/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/team/{teamId}/swiss/GET/responses/200/content/application\/x-ndjson`.
                    case application_x_hyphen_ndjson(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_ndjson`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_ndjson`.
                    /// - SeeAlso: `.application_x_hyphen_ndjson`.
                    internal var application_x_hyphen_ndjson: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_ndjson(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiTeamSwiss.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiTeamSwiss.Output.Ok.Headers = .init(),
                    body: Operations.apiTeamSwiss.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The list of Swiss tournaments of a team.
            ///
            /// - Remark: Generated from `#/paths//api/team/{teamId}/swiss/get(apiTeamSwiss)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiTeamSwiss.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiTeamSwiss.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_ndjson
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-ndjson":
                    self = .application_x_hyphen_ndjson
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_ndjson:
                    return "application/x-ndjson"
                }
            }
            internal static var allCases: [Self] {
                [
                    .application_x_hyphen_ndjson
                ]
            }
        }
    }
    /// Export one study chapter
    ///
    /// Download one study chapter in PGN format.
    ///
    ///
    /// - Remark: HTTP `GET /api/study/{studyId}/{chapterId}.pgn`.
    /// - Remark: Generated from `#/paths//api/study/{studyId}/{chapterId}.pgn/get(studyChapterPgn)`.
    internal enum studyChapterPgn {
        internal static let id: Swift.String = "studyChapterPgn"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/study/{studyId}/{chapterId}.pgn/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// The study ID
                ///
                /// - Remark: Generated from `#/paths/api/study/{studyId}/{chapterId}.pgn/GET/path/studyId`.
                internal var studyId: Swift.String
                /// The chapter ID
                ///
                /// - Remark: Generated from `#/paths/api/study/{studyId}/{chapterId}.pgn/GET/path/chapterId`.
                internal var chapterId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - studyId: The study ID
                ///   - chapterId: The chapter ID
                internal init(
                    studyId: Swift.String,
                    chapterId: Swift.String
                ) {
                    self.studyId = studyId
                    self.chapterId = chapterId
                }
            }
            internal var path: Operations.studyChapterPgn.Input.Path
            /// - Remark: Generated from `#/paths/api/study/{studyId}/{chapterId}.pgn/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Include clock comments in the PGN moves, when available.
                /// Example: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`
                ///
                ///
                /// - Remark: Generated from `#/paths/api/study/{studyId}/{chapterId}.pgn/GET/query/clocks`.
                internal var clocks: Swift.Bool?
                /// Include analysis and annotator comments in the PGN moves, when available.
                /// Example: `12. Bxf6 { [%eval 0.23] } a3 { White is in a pickle. }`
                ///
                ///
                /// - Remark: Generated from `#/paths/api/study/{studyId}/{chapterId}.pgn/GET/query/comments`.
                internal var comments: Swift.Bool?
                /// Include non-mainline moves, when available.
                /// Example: `4. d4 Bb4+ (4... Nc6 5. Nf3 Bb4+ 6. Bd2 (6. Nbd2 O-O 7. O-O) 6... Bd6) 5. Nd2`
                ///
                ///
                /// - Remark: Generated from `#/paths/api/study/{studyId}/{chapterId}.pgn/GET/query/variations`.
                internal var variations: Swift.Bool?
                /// Add a `Orientation` PGN tag with the chapter predefined orientation.
                /// Example: `[Orientation "white"]`
                ///
                ///
                /// - Remark: Generated from `#/paths/api/study/{studyId}/{chapterId}.pgn/GET/query/orientation`.
                internal var orientation: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - clocks: Include clock comments in the PGN moves, when available.
                ///   - comments: Include analysis and annotator comments in the PGN moves, when available.
                ///   - variations: Include non-mainline moves, when available.
                ///   - orientation: Add a `Orientation` PGN tag with the chapter predefined orientation.
                internal init(
                    clocks: Swift.Bool? = nil,
                    comments: Swift.Bool? = nil,
                    variations: Swift.Bool? = nil,
                    orientation: Swift.Bool? = nil
                ) {
                    self.clocks = clocks
                    self.comments = comments
                    self.variations = variations
                    self.orientation = orientation
                }
            }
            internal var query: Operations.studyChapterPgn.Input.Query
            /// - Remark: Generated from `#/paths/api/study/{studyId}/{chapterId}.pgn/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.studyChapterPgn.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.studyChapterPgn.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.studyChapterPgn.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.studyChapterPgn.Input.Path,
                query: Operations.studyChapterPgn.Input.Query = .init(),
                headers: Operations.studyChapterPgn.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/study/{studyId}/{chapterId}.pgn/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/study/{studyId}/{chapterId}.pgn/GET/responses/200/content/application\/x-chess-pgn`.
                    case application_x_hyphen_chess_hyphen_pgn(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_chess_hyphen_pgn`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_chess_hyphen_pgn`.
                    /// - SeeAlso: `.application_x_hyphen_chess_hyphen_pgn`.
                    internal var application_x_hyphen_chess_hyphen_pgn: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_chess_hyphen_pgn(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.studyChapterPgn.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.studyChapterPgn.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The chapter of the study.
            ///
            /// - Remark: Generated from `#/paths//api/study/{studyId}/{chapterId}.pgn/get(studyChapterPgn)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.studyChapterPgn.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.studyChapterPgn.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_chess_hyphen_pgn
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-chess-pgn":
                    self = .application_x_hyphen_chess_hyphen_pgn
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_chess_hyphen_pgn:
                    return "application/x-chess-pgn"
                }
            }
            internal static var allCases: [Self] {
                [
                    .application_x_hyphen_chess_hyphen_pgn
                ]
            }
        }
    }
    /// Export all chapters
    ///
    /// Download all chapters of a study in PGN format.
    ///
    ///
    /// - Remark: HTTP `GET /api/study/{studyId}.pgn`.
    /// - Remark: Generated from `#/paths//api/study/{studyId}.pgn/get(studyAllChaptersPgn)`.
    internal enum studyAllChaptersPgn {
        internal static let id: Swift.String = "studyAllChaptersPgn"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/study/{studyId}.pgn/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// The study ID
                ///
                /// - Remark: Generated from `#/paths/api/study/{studyId}.pgn/GET/path/studyId`.
                internal var studyId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - studyId: The study ID
                internal init(studyId: Swift.String) {
                    self.studyId = studyId
                }
            }
            internal var path: Operations.studyAllChaptersPgn.Input.Path
            /// - Remark: Generated from `#/paths/api/study/{studyId}.pgn/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Include clock comments in the PGN moves, when available.
                /// Example: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`
                ///
                ///
                /// - Remark: Generated from `#/paths/api/study/{studyId}.pgn/GET/query/clocks`.
                internal var clocks: Swift.Bool?
                /// Include analysis and annotator comments in the PGN moves, when available.
                /// Example: `12. Bxf6 { [%eval 0.23] } a3 { White is in a pickle. }`
                ///
                ///
                /// - Remark: Generated from `#/paths/api/study/{studyId}.pgn/GET/query/comments`.
                internal var comments: Swift.Bool?
                /// Include non-mainline moves, when available.
                /// Example: `4. d4 Bb4+ (4... Nc6 5. Nf3 Bb4+ 6. Bd2 (6. Nbd2 O-O 7. O-O) 6... Bd6) 5. Nd2`
                ///
                ///
                /// - Remark: Generated from `#/paths/api/study/{studyId}.pgn/GET/query/variations`.
                internal var variations: Swift.Bool?
                /// Add a `Orientation` PGN tag with the chapter predefined orientation.
                /// Example: `[Orientation "white"]`
                ///
                ///
                /// - Remark: Generated from `#/paths/api/study/{studyId}.pgn/GET/query/orientation`.
                internal var orientation: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - clocks: Include clock comments in the PGN moves, when available.
                ///   - comments: Include analysis and annotator comments in the PGN moves, when available.
                ///   - variations: Include non-mainline moves, when available.
                ///   - orientation: Add a `Orientation` PGN tag with the chapter predefined orientation.
                internal init(
                    clocks: Swift.Bool? = nil,
                    comments: Swift.Bool? = nil,
                    variations: Swift.Bool? = nil,
                    orientation: Swift.Bool? = nil
                ) {
                    self.clocks = clocks
                    self.comments = comments
                    self.variations = variations
                    self.orientation = orientation
                }
            }
            internal var query: Operations.studyAllChaptersPgn.Input.Query
            /// - Remark: Generated from `#/paths/api/study/{studyId}.pgn/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.studyAllChaptersPgn.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.studyAllChaptersPgn.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.studyAllChaptersPgn.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.studyAllChaptersPgn.Input.Path,
                query: Operations.studyAllChaptersPgn.Input.Query = .init(),
                headers: Operations.studyAllChaptersPgn.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/study/{studyId}.pgn/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/study/{studyId}.pgn/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// - Remark: Generated from `#/paths/api/study/{studyId}.pgn/GET/responses/200/headers/Last-Modified`.
                    internal var Last_hyphen_Modified: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    ///   - Last_hyphen_Modified:
                    internal init(
                        Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil,
                        Last_hyphen_Modified: Swift.String? = nil
                    ) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                        self.Last_hyphen_Modified = Last_hyphen_Modified
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.studyAllChaptersPgn.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/study/{studyId}.pgn/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/study/{studyId}.pgn/GET/responses/200/content/application\/x-chess-pgn`.
                    case application_x_hyphen_chess_hyphen_pgn(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_chess_hyphen_pgn`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_chess_hyphen_pgn`.
                    /// - SeeAlso: `.application_x_hyphen_chess_hyphen_pgn`.
                    internal var application_x_hyphen_chess_hyphen_pgn: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_chess_hyphen_pgn(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.studyAllChaptersPgn.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.studyAllChaptersPgn.Output.Ok.Headers = .init(),
                    body: Operations.studyAllChaptersPgn.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The PGN representation of the study.
            ///
            /// - Remark: Generated from `#/paths//api/study/{studyId}.pgn/get(studyAllChaptersPgn)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.studyAllChaptersPgn.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.studyAllChaptersPgn.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_chess_hyphen_pgn
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-chess-pgn":
                    self = .application_x_hyphen_chess_hyphen_pgn
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_chess_hyphen_pgn:
                    return "application/x-chess-pgn"
                }
            }
            internal static var allCases: [Self] {
                [
                    .application_x_hyphen_chess_hyphen_pgn
                ]
            }
        }
    }
    /// Study metadata
    ///
    /// Only get the study headers, including `Last-Modified`.
    ///
    ///
    /// - Remark: HTTP `HEAD /api/study/{studyId}.pgn`.
    /// - Remark: Generated from `#/paths//api/study/{studyId}.pgn/head(studyAllChaptersHead)`.
    internal enum studyAllChaptersHead {
        internal static let id: Swift.String = "studyAllChaptersHead"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/study/{studyId}.pgn/HEAD/path`.
            internal struct Path: Sendable, Hashable {
                /// The study ID
                ///
                /// - Remark: Generated from `#/paths/api/study/{studyId}.pgn/HEAD/path/studyId`.
                internal var studyId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - studyId: The study ID
                internal init(studyId: Swift.String) {
                    self.studyId = studyId
                }
            }
            internal var path: Operations.studyAllChaptersHead.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            internal init(path: Operations.studyAllChaptersHead.Input.Path) {
                self.path = path
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct NoContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/study/{studyId}.pgn/HEAD/responses/204/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/study/{studyId}.pgn/HEAD/responses/204/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// - Remark: Generated from `#/paths/api/study/{studyId}.pgn/HEAD/responses/204/headers/Last-Modified`.
                    internal var Last_hyphen_Modified: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    ///   - Last_hyphen_Modified:
                    internal init(
                        Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil,
                        Last_hyphen_Modified: Swift.String? = nil
                    ) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                        self.Last_hyphen_Modified = Last_hyphen_Modified
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.studyAllChaptersHead.Output.NoContent.Headers
                /// Creates a new `NoContent`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                internal init(headers: Operations.studyAllChaptersHead.Output.NoContent.Headers = .init()) {
                    self.headers = headers
                }
            }
            /// The study headers.
            ///
            /// - Remark: Generated from `#/paths//api/study/{studyId}.pgn/head(studyAllChaptersHead)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.studyAllChaptersHead.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            internal var noContent: Operations.studyAllChaptersHead.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Import PGN into a study
    ///
    /// Imports arbitrary PGN into an existing [study](https://lichess.org/study). Creates a new chapter in the study.
    /// If the PGN contains multiple games (separated by 2 or more newlines)
    /// then multiple chapters will be created within the study.
    /// Note that a study can contain at most 64 chapters.
    ///
    ///
    /// - Remark: HTTP `POST /api/study/{studyId}/import-pgn`.
    /// - Remark: Generated from `#/paths//api/study/{studyId}/import-pgn/post(apiStudyImportPGN)`.
    internal enum apiStudyImportPGN {
        internal static let id: Swift.String = "apiStudyImportPGN"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/study/{studyId}/import-pgn/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// ID of the study
                ///
                /// - Remark: Generated from `#/paths/api/study/{studyId}/import-pgn/POST/path/studyId`.
                internal var studyId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - studyId: ID of the study
                internal init(studyId: Swift.String) {
                    self.studyId = studyId
                }
            }
            internal var path: Operations.apiStudyImportPGN.Input.Path
            /// - Remark: Generated from `#/paths/api/study/{studyId}/import-pgn/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiStudyImportPGN.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiStudyImportPGN.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiStudyImportPGN.Input.Headers
            /// - Remark: Generated from `#/paths/api/study/{studyId}/import-pgn/POST/requestBody`.
            @frozen internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/study/{studyId}/import-pgn/POST/requestBody/urlEncodedForm`.
                internal struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// PGN to import. Can contain multiple games separated by 2 or more newlines.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/api/study/{studyId}/import-pgn/POST/requestBody/urlEncodedForm/pgn`.
                    internal var pgn: Swift.String
                    /// Name of the new chapter.
                    /// If not specified, or if multiple chapters are created, the names will be inferred from the PGN tags.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/api/study/{studyId}/import-pgn/POST/requestBody/urlEncodedForm/name`.
                    internal var name: Swift.String?
                    /// Default board orientation.
                    ///
                    /// - Remark: Generated from `#/paths/api/study/{studyId}/import-pgn/POST/requestBody/urlEncodedForm/orientation`.
                    @frozen internal enum orientationPayload: String, Codable, Hashable, Sendable {
                        case white = "white"
                        case black = "black"
                    }
                    /// Default board orientation.
                    ///
                    /// - Remark: Generated from `#/paths/api/study/{studyId}/import-pgn/POST/requestBody/urlEncodedForm/orientation`.
                    internal var orientation: Operations.apiStudyImportPGN.Input.Body.urlEncodedFormPayload.orientationPayload?
                    /// - Remark: Generated from `#/paths/api/study/{studyId}/import-pgn/POST/requestBody/urlEncodedForm/variant`.
                    internal var variant: Components.Schemas.VariantKey?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - pgn: PGN to import. Can contain multiple games separated by 2 or more newlines.
                    ///   - name: Name of the new chapter.
                    ///   - orientation: Default board orientation.
                    ///   - variant:
                    internal init(
                        pgn: Swift.String,
                        name: Swift.String? = nil,
                        orientation: Operations.apiStudyImportPGN.Input.Body.urlEncodedFormPayload.orientationPayload? = nil,
                        variant: Components.Schemas.VariantKey? = nil
                    ) {
                        self.pgn = pgn
                        self.name = name
                        self.orientation = orientation
                        self.variant = variant
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case pgn
                        case name
                        case orientation
                        case variant
                    }
                }
                /// - Remark: Generated from `#/paths/api/study/{studyId}/import-pgn/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.apiStudyImportPGN.Input.Body.urlEncodedFormPayload)
            }
            internal var body: Operations.apiStudyImportPGN.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.apiStudyImportPGN.Input.Path,
                headers: Operations.apiStudyImportPGN.Input.Headers = .init(),
                body: Operations.apiStudyImportPGN.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/study/{studyId}/import-pgn/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/study/{studyId}/import-pgn/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiStudyImportPGN.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/study/{studyId}/import-pgn/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/study/{studyId}/import-pgn/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.StudyImportPgnChapters)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.StudyImportPgnChapters {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiStudyImportPGN.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiStudyImportPGN.Output.Ok.Headers = .init(),
                    body: Operations.apiStudyImportPGN.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The chapters that were created.
            ///
            /// - Remark: Generated from `#/paths//api/study/{studyId}/import-pgn/post(apiStudyImportPGN)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiStudyImportPGN.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiStudyImportPGN.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/study/{studyId}/import-pgn/POST/responses/400/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/study/{studyId}/import-pgn/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiStudyImportPGN.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.apiStudyImportPGN.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// The creation of the chapter(s) failed.
            ///
            /// - Remark: Generated from `#/paths//api/study/{studyId}/import-pgn/post(apiStudyImportPGN)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.apiStudyImportPGN.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.apiStudyImportPGN.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Export all studies of a user
    ///
    /// Download all chapters of all studies of a user in PGN format.
    /// If authenticated, then all public, unlisted, and private studies are included.
    /// If not, only public (non-unlisted) studies are included.
    ///
    ///
    /// - Remark: HTTP `GET /study/by/{username}/export.pgn`.
    /// - Remark: Generated from `#/paths//study/by/{username}/export.pgn/get(studyExportAllPgn)`.
    internal enum studyExportAllPgn {
        internal static let id: Swift.String = "studyExportAllPgn"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/study/by/{username}/export.pgn/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// The user whose studies we export
                ///
                /// - Remark: Generated from `#/paths/study/by/{username}/export.pgn/GET/path/username`.
                internal var username: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username: The user whose studies we export
                internal init(username: Swift.String) {
                    self.username = username
                }
            }
            internal var path: Operations.studyExportAllPgn.Input.Path
            /// - Remark: Generated from `#/paths/study/by/{username}/export.pgn/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Include clock comments in the PGN moves, when available.
                /// Example: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`
                ///
                ///
                /// - Remark: Generated from `#/paths/study/by/{username}/export.pgn/GET/query/clocks`.
                internal var clocks: Swift.Bool?
                /// Include analysis and annotator comments in the PGN moves, when available.
                /// Example: `12. Bxf6 { [%eval 0.23] } a3 { White is in a pickle. }`
                ///
                ///
                /// - Remark: Generated from `#/paths/study/by/{username}/export.pgn/GET/query/comments`.
                internal var comments: Swift.Bool?
                /// Include non-mainline moves, when available.
                /// Example: `4. d4 Bb4+ (4... Nc6 5. Nf3 Bb4+ 6. Bd2 (6. Nbd2 O-O 7. O-O) 6... Bd6) 5. Nd2`
                ///
                ///
                /// - Remark: Generated from `#/paths/study/by/{username}/export.pgn/GET/query/variations`.
                internal var variations: Swift.Bool?
                /// Add a `Orientation` PGN tag with the chapter predefined orientation.
                /// Example: `[Orientation "white"]`
                ///
                ///
                /// - Remark: Generated from `#/paths/study/by/{username}/export.pgn/GET/query/orientation`.
                internal var orientation: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - clocks: Include clock comments in the PGN moves, when available.
                ///   - comments: Include analysis and annotator comments in the PGN moves, when available.
                ///   - variations: Include non-mainline moves, when available.
                ///   - orientation: Add a `Orientation` PGN tag with the chapter predefined orientation.
                internal init(
                    clocks: Swift.Bool? = nil,
                    comments: Swift.Bool? = nil,
                    variations: Swift.Bool? = nil,
                    orientation: Swift.Bool? = nil
                ) {
                    self.clocks = clocks
                    self.comments = comments
                    self.variations = variations
                    self.orientation = orientation
                }
            }
            internal var query: Operations.studyExportAllPgn.Input.Query
            /// - Remark: Generated from `#/paths/study/by/{username}/export.pgn/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.studyExportAllPgn.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.studyExportAllPgn.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.studyExportAllPgn.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.studyExportAllPgn.Input.Path,
                query: Operations.studyExportAllPgn.Input.Query = .init(),
                headers: Operations.studyExportAllPgn.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/study/by/{username}/export.pgn/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/study/by/{username}/export.pgn/GET/responses/200/content/application\/x-chess-pgn`.
                    case application_x_hyphen_chess_hyphen_pgn(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_chess_hyphen_pgn`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_chess_hyphen_pgn`.
                    /// - SeeAlso: `.application_x_hyphen_chess_hyphen_pgn`.
                    internal var application_x_hyphen_chess_hyphen_pgn: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_chess_hyphen_pgn(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.studyExportAllPgn.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.studyExportAllPgn.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The studies of the user.
            ///
            /// - Remark: Generated from `#/paths//study/by/{username}/export.pgn/get(studyExportAllPgn)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.studyExportAllPgn.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.studyExportAllPgn.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_chess_hyphen_pgn
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-chess-pgn":
                    self = .application_x_hyphen_chess_hyphen_pgn
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_chess_hyphen_pgn:
                    return "application/x-chess-pgn"
                }
            }
            internal static var allCases: [Self] {
                [
                    .application_x_hyphen_chess_hyphen_pgn
                ]
            }
        }
    }
    /// List studies of a user
    ///
    /// Get metadata (name and dates) of all studies of a user.
    /// If authenticated, then all public, unlisted, and private studies are included.
    /// If not, only public (non-unlisted) studies are included.
    /// Studies are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    ///
    ///
    /// - Remark: HTTP `GET /api/study/by/{username}`.
    /// - Remark: Generated from `#/paths//api/study/by/{username}/get(studyListMetadata)`.
    internal enum studyListMetadata {
        internal static let id: Swift.String = "studyListMetadata"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/study/by/{username}/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// The user whose studies we list
                ///
                /// - Remark: Generated from `#/paths/api/study/by/{username}/GET/path/username`.
                internal var username: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username: The user whose studies we list
                internal init(username: Swift.String) {
                    self.username = username
                }
            }
            internal var path: Operations.studyListMetadata.Input.Path
            /// - Remark: Generated from `#/paths/api/study/by/{username}/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.studyListMetadata.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.studyListMetadata.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.studyListMetadata.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.studyListMetadata.Input.Path,
                headers: Operations.studyListMetadata.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/study/by/{username}/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/study/by/{username}/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.studyListMetadata.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/study/by/{username}/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/study/by/{username}/GET/responses/200/content/application\/x-ndjson`.
                    case application_x_hyphen_ndjson(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_ndjson`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_ndjson`.
                    /// - SeeAlso: `.application_x_hyphen_ndjson`.
                    internal var application_x_hyphen_ndjson: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_ndjson(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.studyListMetadata.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.studyListMetadata.Output.Ok.Headers = .init(),
                    body: Operations.studyListMetadata.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The list of studies.
            ///
            /// - Remark: Generated from `#/paths//api/study/by/{username}/get(studyListMetadata)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.studyListMetadata.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.studyListMetadata.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_ndjson
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-ndjson":
                    self = .application_x_hyphen_ndjson
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_ndjson:
                    return "application/x-ndjson"
                }
            }
            internal static var allCases: [Self] {
                [
                    .application_x_hyphen_ndjson
                ]
            }
        }
    }
    /// Delete a study chapter
    ///
    /// Delete a chapter of a study you own. This is definitive.
    /// A study must have at least one chapter; so if you delete the last chapter,
    /// an empty one will be automatically created to replace it.
    ///
    ///
    /// - Remark: HTTP `DELETE /api/study/{studyId}/{chapterId}`.
    /// - Remark: Generated from `#/paths//api/study/{studyId}/{chapterId}/delete(apiStudyStudyIdChapterIdDelete)`.
    internal enum apiStudyStudyIdChapterIdDelete {
        internal static let id: Swift.String = "apiStudyStudyIdChapterIdDelete"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/study/{studyId}/{chapterId}/DELETE/path`.
            internal struct Path: Sendable, Hashable {
                /// The study ID
                ///
                /// - Remark: Generated from `#/paths/api/study/{studyId}/{chapterId}/DELETE/path/studyId`.
                internal var studyId: Swift.String
                /// The chapter ID
                ///
                /// - Remark: Generated from `#/paths/api/study/{studyId}/{chapterId}/DELETE/path/chapterId`.
                internal var chapterId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - studyId: The study ID
                ///   - chapterId: The chapter ID
                internal init(
                    studyId: Swift.String,
                    chapterId: Swift.String
                ) {
                    self.studyId = studyId
                    self.chapterId = chapterId
                }
            }
            internal var path: Operations.apiStudyStudyIdChapterIdDelete.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            internal init(path: Operations.apiStudyStudyIdChapterIdDelete.Input.Path) {
                self.path = path
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct NoContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/study/{studyId}/{chapterId}/DELETE/responses/204/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/study/{studyId}/{chapterId}/DELETE/responses/204/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiStudyStudyIdChapterIdDelete.Output.NoContent.Headers
                /// Creates a new `NoContent`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                internal init(headers: Operations.apiStudyStudyIdChapterIdDelete.Output.NoContent.Headers = .init()) {
                    self.headers = headers
                }
            }
            /// Chapter successfully deleted
            ///
            /// - Remark: Generated from `#/paths//api/study/{studyId}/{chapterId}/delete(apiStudyStudyIdChapterIdDelete)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.apiStudyStudyIdChapterIdDelete.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            internal var noContent: Operations.apiStudyStudyIdChapterIdDelete.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Get official broadcasts
    ///
    /// Returns ongoing official broadcasts sorted by tier. 
    /// After that, returns finished broadcasts sorted by most recent sync time.
    /// Broadcasts are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    ///
    ///
    /// - Remark: HTTP `GET /api/broadcast`.
    /// - Remark: Generated from `#/paths//api/broadcast/get(broadcastsOfficial)`.
    internal enum broadcastsOfficial {
        internal static let id: Swift.String = "broadcastsOfficial"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/broadcast/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Max number of broadcasts to fetch
                ///
                /// - Remark: Generated from `#/paths/api/broadcast/GET/query/nb`.
                internal var nb: Swift.Int?
                /// Convert the "description" field from markdown to HTML
                ///
                /// - Remark: Generated from `#/paths/api/broadcast/GET/query/html`.
                internal var html: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - nb: Max number of broadcasts to fetch
                ///   - html: Convert the "description" field from markdown to HTML
                internal init(
                    nb: Swift.Int? = nil,
                    html: Swift.Bool? = nil
                ) {
                    self.nb = nb
                    self.html = html
                }
            }
            internal var query: Operations.broadcastsOfficial.Input.Query
            /// - Remark: Generated from `#/paths/api/broadcast/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.broadcastsOfficial.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.broadcastsOfficial.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.broadcastsOfficial.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.broadcastsOfficial.Input.Query = .init(),
                headers: Operations.broadcastsOfficial.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/broadcast/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/broadcast/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.broadcastsOfficial.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/broadcast/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/broadcast/GET/responses/200/content/application\/x-ndjson`.
                    case application_x_hyphen_ndjson(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_ndjson`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_ndjson`.
                    /// - SeeAlso: `.application_x_hyphen_ndjson`.
                    internal var application_x_hyphen_ndjson: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_ndjson(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.broadcastsOfficial.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.broadcastsOfficial.Output.Ok.Headers = .init(),
                    body: Operations.broadcastsOfficial.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The list of official broadcasts.
            ///
            /// - Remark: Generated from `#/paths//api/broadcast/get(broadcastsOfficial)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.broadcastsOfficial.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.broadcastsOfficial.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_ndjson
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-ndjson":
                    self = .application_x_hyphen_ndjson
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_ndjson:
                    return "application/x-ndjson"
                }
            }
            internal static var allCases: [Self] {
                [
                    .application_x_hyphen_ndjson
                ]
            }
        }
    }
    /// Get paginated top broadcast previews
    ///
    /// The same data, in the same order, as can be seen on [https://lichess.org/broadcast](/broadcast).
    ///
    ///
    /// - Remark: HTTP `GET /api/broadcast/top`.
    /// - Remark: Generated from `#/paths//api/broadcast/top/get(broadcastsTop)`.
    internal enum broadcastsTop {
        internal static let id: Swift.String = "broadcastsTop"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/broadcast/top/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Which page to fetch. Only page 1 has "active" broadcasts.
                ///
                /// - Remark: Generated from `#/paths/api/broadcast/top/GET/query/page`.
                internal var page: Swift.Int?
                /// Convert the "description" field from markdown to HTML
                ///
                /// - Remark: Generated from `#/paths/api/broadcast/top/GET/query/html`.
                internal var html: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - page: Which page to fetch. Only page 1 has "active" broadcasts.
                ///   - html: Convert the "description" field from markdown to HTML
                internal init(
                    page: Swift.Int? = nil,
                    html: Swift.Bool? = nil
                ) {
                    self.page = page
                    self.html = html
                }
            }
            internal var query: Operations.broadcastsTop.Input.Query
            /// - Remark: Generated from `#/paths/api/broadcast/top/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.broadcastsTop.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.broadcastsTop.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.broadcastsTop.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.broadcastsTop.Input.Query = .init(),
                headers: Operations.broadcastsTop.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/broadcast/top/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/broadcast/top/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.broadcastsTop.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/broadcast/top/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/broadcast/top/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.BroadcastTop)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.BroadcastTop {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.broadcastsTop.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.broadcastsTop.Output.Ok.Headers = .init(),
                    body: Operations.broadcastsTop.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Paginated top broadcast previews.
            ///
            /// - Remark: Generated from `#/paths//api/broadcast/top/get(broadcastsTop)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.broadcastsTop.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.broadcastsTop.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get broadcasts created by a user
    ///
    /// Get all incoming, ongoing, and finished official broadcasts.
    /// The broadcasts are sorted by created date, most recent first.
    ///
    ///
    /// - Remark: HTTP `GET /api/broadcast/by/{username}`.
    /// - Remark: Generated from `#/paths//api/broadcast/by/{username}/get(broadcastsByUser)`.
    internal enum broadcastsByUser {
        internal static let id: Swift.String = "broadcastsByUser"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/broadcast/by/{username}/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/broadcast/by/{username}/GET/path/username`.
                internal var username: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username:
                internal init(username: Swift.String) {
                    self.username = username
                }
            }
            internal var path: Operations.broadcastsByUser.Input.Path
            /// - Remark: Generated from `#/paths/api/broadcast/by/{username}/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/broadcast/by/{username}/GET/query/page`.
                internal var page: Swift.Double?
                /// Convert the "description" field from markdown to HTML
                ///
                /// - Remark: Generated from `#/paths/api/broadcast/by/{username}/GET/query/html`.
                internal var html: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - page:
                ///   - html: Convert the "description" field from markdown to HTML
                internal init(
                    page: Swift.Double? = nil,
                    html: Swift.Bool? = nil
                ) {
                    self.page = page
                    self.html = html
                }
            }
            internal var query: Operations.broadcastsByUser.Input.Query
            /// - Remark: Generated from `#/paths/api/broadcast/by/{username}/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.broadcastsByUser.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.broadcastsByUser.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.broadcastsByUser.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.broadcastsByUser.Input.Path,
                query: Operations.broadcastsByUser.Input.Query = .init(),
                headers: Operations.broadcastsByUser.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/broadcast/by/{username}/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/broadcast/by/{username}/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.broadcastsByUser.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/broadcast/by/{username}/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/broadcast/by/{username}/GET/responses/200/content/json`.
                    internal struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/api/broadcast/by/{username}/GET/responses/200/content/json/currentPage`.
                        internal var currentPage: Swift.Double
                        /// - Remark: Generated from `#/paths/api/broadcast/by/{username}/GET/responses/200/content/json/maxPerPage`.
                        internal var maxPerPage: Swift.Double
                        /// - Remark: Generated from `#/paths/api/broadcast/by/{username}/GET/responses/200/content/json/currentPageResults`.
                        internal var currentPageResults: [Components.Schemas.BroadcastByUser]
                        /// - Remark: Generated from `#/paths/api/broadcast/by/{username}/GET/responses/200/content/json/nbResults`.
                        internal var nbResults: Swift.Double
                        /// - Remark: Generated from `#/paths/api/broadcast/by/{username}/GET/responses/200/content/json/previousPage`.
                        internal var previousPage: Swift.Double?
                        /// - Remark: Generated from `#/paths/api/broadcast/by/{username}/GET/responses/200/content/json/nextPage`.
                        internal var nextPage: Swift.Double?
                        /// - Remark: Generated from `#/paths/api/broadcast/by/{username}/GET/responses/200/content/json/nbPages`.
                        internal var nbPages: Swift.Double
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - currentPage:
                        ///   - maxPerPage:
                        ///   - currentPageResults:
                        ///   - nbResults:
                        ///   - previousPage:
                        ///   - nextPage:
                        ///   - nbPages:
                        internal init(
                            currentPage: Swift.Double,
                            maxPerPage: Swift.Double,
                            currentPageResults: [Components.Schemas.BroadcastByUser],
                            nbResults: Swift.Double,
                            previousPage: Swift.Double? = nil,
                            nextPage: Swift.Double? = nil,
                            nbPages: Swift.Double
                        ) {
                            self.currentPage = currentPage
                            self.maxPerPage = maxPerPage
                            self.currentPageResults = currentPageResults
                            self.nbResults = nbResults
                            self.previousPage = previousPage
                            self.nextPage = nextPage
                            self.nbPages = nbPages
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case currentPage
                            case maxPerPage
                            case currentPageResults
                            case nbResults
                            case previousPage
                            case nextPage
                            case nbPages
                        }
                    }
                    /// - Remark: Generated from `#/paths/api/broadcast/by/{username}/GET/responses/200/content/application\/json`.
                    case json(Operations.broadcastsByUser.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.broadcastsByUser.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.broadcastsByUser.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.broadcastsByUser.Output.Ok.Headers = .init(),
                    body: Operations.broadcastsByUser.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// A paginated list of the broadcasts created by a user.
            ///
            /// - Remark: Generated from `#/paths//api/broadcast/by/{username}/get(broadcastsByUser)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.broadcastsByUser.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.broadcastsByUser.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Search broadcasts
    ///
    /// Search across recent official broadcasts.
    ///
    ///
    /// - Remark: HTTP `GET /api/broadcast/search`.
    /// - Remark: Generated from `#/paths//api/broadcast/search/get(broadcastsSearch)`.
    internal enum broadcastsSearch {
        internal static let id: Swift.String = "broadcastsSearch"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/broadcast/search/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Which page to fetch.
                ///
                /// - Remark: Generated from `#/paths/api/broadcast/search/GET/query/page`.
                internal var page: Swift.Int?
                /// Search term
                ///
                /// - Remark: Generated from `#/paths/api/broadcast/search/GET/query/q`.
                internal var q: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - page: Which page to fetch.
                ///   - q: Search term
                internal init(
                    page: Swift.Int? = nil,
                    q: Swift.String? = nil
                ) {
                    self.page = page
                    self.q = q
                }
            }
            internal var query: Operations.broadcastsSearch.Input.Query
            /// - Remark: Generated from `#/paths/api/broadcast/search/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.broadcastsSearch.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.broadcastsSearch.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.broadcastsSearch.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.broadcastsSearch.Input.Query = .init(),
                headers: Operations.broadcastsSearch.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/broadcast/search/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/broadcast/search/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.broadcastsSearch.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/broadcast/search/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/broadcast/search/GET/responses/200/content/json`.
                    internal struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/api/broadcast/search/GET/responses/200/content/json/currentPage`.
                        internal var currentPage: Swift.Double
                        /// - Remark: Generated from `#/paths/api/broadcast/search/GET/responses/200/content/json/maxPerPage`.
                        internal var maxPerPage: Swift.Double
                        /// - Remark: Generated from `#/paths/api/broadcast/search/GET/responses/200/content/json/currentPageResults`.
                        internal var currentPageResults: [Components.Schemas.BroadcastWithLastRound]
                        /// - Remark: Generated from `#/paths/api/broadcast/search/GET/responses/200/content/json/previousPage`.
                        internal var previousPage: Swift.Double?
                        /// - Remark: Generated from `#/paths/api/broadcast/search/GET/responses/200/content/json/nextPage`.
                        internal var nextPage: Swift.Double?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - currentPage:
                        ///   - maxPerPage:
                        ///   - currentPageResults:
                        ///   - previousPage:
                        ///   - nextPage:
                        internal init(
                            currentPage: Swift.Double,
                            maxPerPage: Swift.Double,
                            currentPageResults: [Components.Schemas.BroadcastWithLastRound],
                            previousPage: Swift.Double? = nil,
                            nextPage: Swift.Double? = nil
                        ) {
                            self.currentPage = currentPage
                            self.maxPerPage = maxPerPage
                            self.currentPageResults = currentPageResults
                            self.previousPage = previousPage
                            self.nextPage = nextPage
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case currentPage
                            case maxPerPage
                            case currentPageResults
                            case previousPage
                            case nextPage
                        }
                    }
                    /// - Remark: Generated from `#/paths/api/broadcast/search/GET/responses/200/content/application\/json`.
                    case json(Operations.broadcastsSearch.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.broadcastsSearch.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.broadcastsSearch.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.broadcastsSearch.Output.Ok.Headers = .init(),
                    body: Operations.broadcastsSearch.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Paginated top broadcast previews.
            ///
            /// - Remark: Generated from `#/paths//api/broadcast/search/get(broadcastsSearch)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.broadcastsSearch.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.broadcastsSearch.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a broadcast tournament
    ///
    /// Create a new broadcast tournament to relay external games.
    /// This endpoint accepts the same form data as the [web form](https://lichess.org/broadcast/new).
    ///
    ///
    /// - Remark: HTTP `POST /broadcast/new`.
    /// - Remark: Generated from `#/paths//broadcast/new/post(broadcastTourCreate)`.
    internal enum broadcastTourCreate {
        internal static let id: Swift.String = "broadcastTourCreate"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/broadcast/new/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.broadcastTourCreate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.broadcastTourCreate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.broadcastTourCreate.Input.Headers
            /// - Remark: Generated from `#/paths/broadcast/new/POST/requestBody`.
            @frozen internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/broadcast/new/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Components.Schemas.BroadcastForm)
            }
            internal var body: Operations.broadcastTourCreate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            internal init(
                headers: Operations.broadcastTourCreate.Input.Headers = .init(),
                body: Operations.broadcastTourCreate.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/broadcast/new/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/broadcast/new/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.broadcastTourCreate.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/broadcast/new/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/broadcast/new/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.BroadcastWithRounds)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.BroadcastWithRounds {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.broadcastTourCreate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.broadcastTourCreate.Output.Ok.Headers = .init(),
                    body: Operations.broadcastTourCreate.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The broadcast tournament was successfully created.
            ///
            /// - Remark: Generated from `#/paths//broadcast/new/post(broadcastTourCreate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.broadcastTourCreate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.broadcastTourCreate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/broadcast/new/POST/responses/400/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/broadcast/new/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.broadcastTourCreate.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.broadcastTourCreate.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// The creation of the broadcast tournament failed.
            ///
            /// - Remark: Generated from `#/paths//broadcast/new/post(broadcastTourCreate)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.broadcastTourCreate.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.broadcastTourCreate.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a broadcast tournament
    ///
    /// Get information about a broadcast tournament.
    ///
    ///
    /// - Remark: HTTP `GET /api/broadcast/{broadcastTournamentId}`.
    /// - Remark: Generated from `#/paths//api/broadcast/{broadcastTournamentId}/get(broadcastTourGet)`.
    internal enum broadcastTourGet {
        internal static let id: Swift.String = "broadcastTourGet"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/broadcast/{broadcastTournamentId}/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// The broadcast tournament ID
                ///
                /// - Remark: Generated from `#/paths/api/broadcast/{broadcastTournamentId}/GET/path/broadcastTournamentId`.
                internal var broadcastTournamentId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - broadcastTournamentId: The broadcast tournament ID
                internal init(broadcastTournamentId: Swift.String) {
                    self.broadcastTournamentId = broadcastTournamentId
                }
            }
            internal var path: Operations.broadcastTourGet.Input.Path
            /// - Remark: Generated from `#/paths/api/broadcast/{broadcastTournamentId}/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.broadcastTourGet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.broadcastTourGet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.broadcastTourGet.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.broadcastTourGet.Input.Path,
                headers: Operations.broadcastTourGet.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/broadcast/{broadcastTournamentId}/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/broadcast/{broadcastTournamentId}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.BroadcastWithRounds)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.BroadcastWithRounds {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.broadcastTourGet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.broadcastTourGet.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The information about the broadcast tournament.
            ///
            /// - Remark: Generated from `#/paths//api/broadcast/{broadcastTournamentId}/get(broadcastTourGet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.broadcastTourGet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.broadcastTourGet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get players of a broadcast
    ///
    /// Get the list of players of a broadcast tournament, if available.
    ///
    ///
    /// - Remark: HTTP `GET /broadcast/{broadcastTournamentId}/players`.
    /// - Remark: Generated from `#/paths//broadcast/{broadcastTournamentId}/players/get(broadcastPlayersGet)`.
    internal enum broadcastPlayersGet {
        internal static let id: Swift.String = "broadcastPlayersGet"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/broadcast/{broadcastTournamentId}/players/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// The broadcast tournament ID
                ///
                /// - Remark: Generated from `#/paths/broadcast/{broadcastTournamentId}/players/GET/path/broadcastTournamentId`.
                internal var broadcastTournamentId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - broadcastTournamentId: The broadcast tournament ID
                internal init(broadcastTournamentId: Swift.String) {
                    self.broadcastTournamentId = broadcastTournamentId
                }
            }
            internal var path: Operations.broadcastPlayersGet.Input.Path
            /// - Remark: Generated from `#/paths/broadcast/{broadcastTournamentId}/players/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.broadcastPlayersGet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.broadcastPlayersGet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.broadcastPlayersGet.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.broadcastPlayersGet.Input.Path,
                headers: Operations.broadcastPlayersGet.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/broadcast/{broadcastTournamentId}/players/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/broadcast/{broadcastTournamentId}/players/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.BroadcastPlayerEntry])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: [Components.Schemas.BroadcastPlayerEntry] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.broadcastPlayersGet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.broadcastPlayersGet.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The broadcast players
            ///
            /// - Remark: Generated from `#/paths//broadcast/{broadcastTournamentId}/players/get(broadcastPlayersGet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.broadcastPlayersGet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.broadcastPlayersGet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update your broadcast tournament
    ///
    /// Update information about a broadcast tournament that you created.
    /// This endpoint accepts the same form data as the web form.
    /// All fields must be populated with data. Missing fields will override the broadcast with empty data.
    ///
    ///
    /// - Remark: HTTP `POST /broadcast/{broadcastTournamentId}/edit`.
    /// - Remark: Generated from `#/paths//broadcast/{broadcastTournamentId}/edit/post(broadcastTourUpdate)`.
    internal enum broadcastTourUpdate {
        internal static let id: Swift.String = "broadcastTourUpdate"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/broadcast/{broadcastTournamentId}/edit/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// The broadcast ID
                ///
                /// - Remark: Generated from `#/paths/broadcast/{broadcastTournamentId}/edit/POST/path/broadcastTournamentId`.
                internal var broadcastTournamentId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - broadcastTournamentId: The broadcast ID
                internal init(broadcastTournamentId: Swift.String) {
                    self.broadcastTournamentId = broadcastTournamentId
                }
            }
            internal var path: Operations.broadcastTourUpdate.Input.Path
            /// - Remark: Generated from `#/paths/broadcast/{broadcastTournamentId}/edit/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.broadcastTourUpdate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.broadcastTourUpdate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.broadcastTourUpdate.Input.Headers
            /// - Remark: Generated from `#/paths/broadcast/{broadcastTournamentId}/edit/POST/requestBody`.
            @frozen internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/broadcast/{broadcastTournamentId}/edit/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Components.Schemas.BroadcastForm)
            }
            internal var body: Operations.broadcastTourUpdate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.broadcastTourUpdate.Input.Path,
                headers: Operations.broadcastTourUpdate.Input.Headers = .init(),
                body: Operations.broadcastTourUpdate.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/broadcast/{broadcastTournamentId}/edit/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/broadcast/{broadcastTournamentId}/edit/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.broadcastTourUpdate.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/broadcast/{broadcastTournamentId}/edit/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/broadcast/{broadcastTournamentId}/edit/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.broadcastTourUpdate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.broadcastTourUpdate.Output.Ok.Headers = .init(),
                    body: Operations.broadcastTourUpdate.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The broadcast tournament was successfully edited.
            ///
            /// - Remark: Generated from `#/paths//broadcast/{broadcastTournamentId}/edit/post(broadcastTourUpdate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.broadcastTourUpdate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.broadcastTourUpdate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/broadcast/{broadcastTournamentId}/edit/POST/responses/400/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/broadcast/{broadcastTournamentId}/edit/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.broadcastTourUpdate.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.broadcastTourUpdate.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// The broadcast tournament update failed.
            ///
            /// - Remark: Generated from `#/paths//broadcast/{broadcastTournamentId}/edit/post(broadcastTourUpdate)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.broadcastTourUpdate.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.broadcastTourUpdate.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a broadcast round
    ///
    /// Create a new broadcast round to relay external games.
    /// This endpoint accepts the same form data as the web form.
    ///
    /// Choose one between `syncUrl`, `syncUrls`, `syncIds` and `syncUsers`, if it is missing, the broadcast needs to be fed by [pushing PGN to it](#operation/broadcastPush)
    ///
    ///
    /// - Remark: HTTP `POST /broadcast/{broadcastTournamentId}/new`.
    /// - Remark: Generated from `#/paths//broadcast/{broadcastTournamentId}/new/post(broadcastRoundCreate)`.
    internal enum broadcastRoundCreate {
        internal static let id: Swift.String = "broadcastRoundCreate"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/broadcast/{broadcastTournamentId}/new/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// The broadcast tournament ID
                ///
                /// - Remark: Generated from `#/paths/broadcast/{broadcastTournamentId}/new/POST/path/broadcastTournamentId`.
                internal var broadcastTournamentId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - broadcastTournamentId: The broadcast tournament ID
                internal init(broadcastTournamentId: Swift.String) {
                    self.broadcastTournamentId = broadcastTournamentId
                }
            }
            internal var path: Operations.broadcastRoundCreate.Input.Path
            /// - Remark: Generated from `#/paths/broadcast/{broadcastTournamentId}/new/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.broadcastRoundCreate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.broadcastRoundCreate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.broadcastRoundCreate.Input.Headers
            /// - Remark: Generated from `#/paths/broadcast/{broadcastTournamentId}/new/POST/requestBody`.
            @frozen internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/broadcast/{broadcastTournamentId}/new/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Components.Schemas.BroadcastRoundForm)
            }
            internal var body: Operations.broadcastRoundCreate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.broadcastRoundCreate.Input.Path,
                headers: Operations.broadcastRoundCreate.Input.Headers = .init(),
                body: Operations.broadcastRoundCreate.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/broadcast/{broadcastTournamentId}/new/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/broadcast/{broadcastTournamentId}/new/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.broadcastRoundCreate.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/broadcast/{broadcastTournamentId}/new/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/broadcast/{broadcastTournamentId}/new/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.BroadcastRoundNew)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.BroadcastRoundNew {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.broadcastRoundCreate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.broadcastRoundCreate.Output.Ok.Headers = .init(),
                    body: Operations.broadcastRoundCreate.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The broadcast round was successfully created.
            ///
            /// - Remark: Generated from `#/paths//broadcast/{broadcastTournamentId}/new/post(broadcastRoundCreate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.broadcastRoundCreate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.broadcastRoundCreate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/broadcast/{broadcastTournamentId}/new/POST/responses/400/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/broadcast/{broadcastTournamentId}/new/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.broadcastRoundCreate.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.broadcastRoundCreate.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// The creation of the broadcast failed.
            ///
            /// - Remark: Generated from `#/paths//broadcast/{broadcastTournamentId}/new/post(broadcastRoundCreate)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.broadcastRoundCreate.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.broadcastRoundCreate.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a broadcast round
    ///
    /// Get information about a broadcast round.
    ///
    ///
    /// - Remark: HTTP `GET /api/broadcast/{broadcastTournamentSlug}/{broadcastRoundSlug}/{broadcastRoundId}`.
    /// - Remark: Generated from `#/paths//api/broadcast/{broadcastTournamentSlug}/{broadcastRoundSlug}/{broadcastRoundId}/get(broadcastRoundGet)`.
    internal enum broadcastRoundGet {
        internal static let id: Swift.String = "broadcastRoundGet"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/broadcast/{broadcastTournamentSlug}/{broadcastRoundSlug}/{broadcastRoundId}/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// The broadcast tournament slug. Only used for SEO, the slug can be safely replaced by `-`. Only the `broadcastRoundId` is actually used.
                ///
                /// - Remark: Generated from `#/paths/api/broadcast/{broadcastTournamentSlug}/{broadcastRoundSlug}/{broadcastRoundId}/GET/path/broadcastTournamentSlug`.
                internal var broadcastTournamentSlug: Swift.String
                /// The broadcast round slug. Only used for SEO, the slug can be safely replaced by `-`. Only the `broadcastRoundId` is actually used.
                ///
                /// - Remark: Generated from `#/paths/api/broadcast/{broadcastTournamentSlug}/{broadcastRoundSlug}/{broadcastRoundId}/GET/path/broadcastRoundSlug`.
                internal var broadcastRoundSlug: Swift.String
                /// The broadcast Round ID
                ///
                /// - Remark: Generated from `#/paths/api/broadcast/{broadcastTournamentSlug}/{broadcastRoundSlug}/{broadcastRoundId}/GET/path/broadcastRoundId`.
                internal var broadcastRoundId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - broadcastTournamentSlug: The broadcast tournament slug. Only used for SEO, the slug can be safely replaced by `-`. Only the `broadcastRoundId` is actually used.
                ///   - broadcastRoundSlug: The broadcast round slug. Only used for SEO, the slug can be safely replaced by `-`. Only the `broadcastRoundId` is actually used.
                ///   - broadcastRoundId: The broadcast Round ID
                internal init(
                    broadcastTournamentSlug: Swift.String,
                    broadcastRoundSlug: Swift.String,
                    broadcastRoundId: Swift.String
                ) {
                    self.broadcastTournamentSlug = broadcastTournamentSlug
                    self.broadcastRoundSlug = broadcastRoundSlug
                    self.broadcastRoundId = broadcastRoundId
                }
            }
            internal var path: Operations.broadcastRoundGet.Input.Path
            /// - Remark: Generated from `#/paths/api/broadcast/{broadcastTournamentSlug}/{broadcastRoundSlug}/{broadcastRoundId}/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.broadcastRoundGet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.broadcastRoundGet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.broadcastRoundGet.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.broadcastRoundGet.Input.Path,
                headers: Operations.broadcastRoundGet.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/broadcast/{broadcastTournamentSlug}/{broadcastRoundSlug}/{broadcastRoundId}/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/broadcast/{broadcastTournamentSlug}/{broadcastRoundSlug}/{broadcastRoundId}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.BroadcastRound)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.BroadcastRound {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.broadcastRoundGet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.broadcastRoundGet.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The information about the broadcast round.
            ///
            /// - Remark: Generated from `#/paths//api/broadcast/{broadcastTournamentSlug}/{broadcastRoundSlug}/{broadcastRoundId}/get(broadcastRoundGet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.broadcastRoundGet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.broadcastRoundGet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a broadcast round
    ///
    /// Update information about a broadcast round.
    /// This endpoint accepts the same form data as the web form.
    /// All fields must be populated with data. Missing fields will override the broadcast with empty data.
    /// For instance, if you omit `startDate`, then any pre-existing start date will be removed.
    ///
    ///
    /// - Remark: HTTP `POST /broadcast/round/{broadcastRoundId}/edit`.
    /// - Remark: Generated from `#/paths//broadcast/round/{broadcastRoundId}/edit/post(broadcastRoundUpdate)`.
    internal enum broadcastRoundUpdate {
        internal static let id: Swift.String = "broadcastRoundUpdate"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/broadcast/round/{broadcastRoundId}/edit/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// The broadcast round ID
                ///
                /// - Remark: Generated from `#/paths/broadcast/round/{broadcastRoundId}/edit/POST/path/broadcastRoundId`.
                internal var broadcastRoundId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - broadcastRoundId: The broadcast round ID
                internal init(broadcastRoundId: Swift.String) {
                    self.broadcastRoundId = broadcastRoundId
                }
            }
            internal var path: Operations.broadcastRoundUpdate.Input.Path
            /// - Remark: Generated from `#/paths/broadcast/round/{broadcastRoundId}/edit/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.broadcastRoundUpdate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.broadcastRoundUpdate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.broadcastRoundUpdate.Input.Headers
            /// - Remark: Generated from `#/paths/broadcast/round/{broadcastRoundId}/edit/POST/requestBody`.
            @frozen internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/broadcast/round/{broadcastRoundId}/edit/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Components.Schemas.BroadcastRoundForm)
            }
            internal var body: Operations.broadcastRoundUpdate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.broadcastRoundUpdate.Input.Path,
                headers: Operations.broadcastRoundUpdate.Input.Headers = .init(),
                body: Operations.broadcastRoundUpdate.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/broadcast/round/{broadcastRoundId}/edit/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/broadcast/round/{broadcastRoundId}/edit/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.broadcastRoundUpdate.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/broadcast/round/{broadcastRoundId}/edit/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/broadcast/round/{broadcastRoundId}/edit/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.BroadcastRound)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.BroadcastRound {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.broadcastRoundUpdate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.broadcastRoundUpdate.Output.Ok.Headers = .init(),
                    body: Operations.broadcastRoundUpdate.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The broadcast round was successfully edited.
            ///
            /// - Remark: Generated from `#/paths//broadcast/round/{broadcastRoundId}/edit/post(broadcastRoundUpdate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.broadcastRoundUpdate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.broadcastRoundUpdate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/broadcast/round/{broadcastRoundId}/edit/POST/responses/400/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/broadcast/round/{broadcastRoundId}/edit/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.broadcastRoundUpdate.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.broadcastRoundUpdate.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// The broadcast round update failed.
            ///
            /// - Remark: Generated from `#/paths//broadcast/round/{broadcastRoundId}/edit/post(broadcastRoundUpdate)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.broadcastRoundUpdate.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.broadcastRoundUpdate.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Reset a broadcast round
    ///
    /// Remove any games from the broadcast round and reset it to its initial state.
    ///
    ///
    /// - Remark: HTTP `POST /api/broadcast/round/{broadcastRoundId}/reset`.
    /// - Remark: Generated from `#/paths//api/broadcast/round/{broadcastRoundId}/reset/post(broadcastRoundReset)`.
    internal enum broadcastRoundReset {
        internal static let id: Swift.String = "broadcastRoundReset"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/broadcast/round/{broadcastRoundId}/reset/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// The broadcast round ID
                ///
                /// - Remark: Generated from `#/paths/api/broadcast/round/{broadcastRoundId}/reset/POST/path/broadcastRoundId`.
                internal var broadcastRoundId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - broadcastRoundId: The broadcast round ID
                internal init(broadcastRoundId: Swift.String) {
                    self.broadcastRoundId = broadcastRoundId
                }
            }
            internal var path: Operations.broadcastRoundReset.Input.Path
            /// - Remark: Generated from `#/paths/api/broadcast/round/{broadcastRoundId}/reset/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.broadcastRoundReset.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.broadcastRoundReset.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.broadcastRoundReset.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.broadcastRoundReset.Input.Path,
                headers: Operations.broadcastRoundReset.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/broadcast/round/{broadcastRoundId}/reset/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/broadcast/round/{broadcastRoundId}/reset/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.broadcastRoundReset.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/broadcast/round/{broadcastRoundId}/reset/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/broadcast/round/{broadcastRoundId}/reset/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.broadcastRoundReset.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.broadcastRoundReset.Output.Ok.Headers = .init(),
                    body: Operations.broadcastRoundReset.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The broadcast round was successfully reset.
            ///
            /// - Remark: Generated from `#/paths//api/broadcast/round/{broadcastRoundId}/reset/post(broadcastRoundReset)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.broadcastRoundReset.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.broadcastRoundReset.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Push PGN to a broadcast round
    ///
    /// Update a broadcast with new PGN.
    /// Only for broadcasts without a source URL.
    ///
    ///
    /// - Remark: HTTP `POST /api/broadcast/round/{broadcastRoundId}/push`.
    /// - Remark: Generated from `#/paths//api/broadcast/round/{broadcastRoundId}/push/post(broadcastPush)`.
    internal enum broadcastPush {
        internal static let id: Swift.String = "broadcastPush"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/broadcast/round/{broadcastRoundId}/push/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// The broadcast round ID
                ///
                /// - Remark: Generated from `#/paths/api/broadcast/round/{broadcastRoundId}/push/POST/path/broadcastRoundId`.
                internal var broadcastRoundId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - broadcastRoundId: The broadcast round ID
                internal init(broadcastRoundId: Swift.String) {
                    self.broadcastRoundId = broadcastRoundId
                }
            }
            internal var path: Operations.broadcastPush.Input.Path
            /// - Remark: Generated from `#/paths/api/broadcast/round/{broadcastRoundId}/push/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.broadcastPush.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.broadcastPush.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.broadcastPush.Input.Headers
            /// - Remark: Generated from `#/paths/api/broadcast/round/{broadcastRoundId}/push/POST/requestBody`.
            @frozen internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/broadcast/round/{broadcastRoundId}/push/POST/requestBody/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
            }
            internal var body: Operations.broadcastPush.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.broadcastPush.Input.Path,
                headers: Operations.broadcastPush.Input.Headers = .init(),
                body: Operations.broadcastPush.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/broadcast/round/{broadcastRoundId}/push/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/broadcast/round/{broadcastRoundId}/push/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.broadcastPush.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/broadcast/round/{broadcastRoundId}/push/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/broadcast/round/{broadcastRoundId}/push/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.BroadcastPgnPush)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.BroadcastPgnPush {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.broadcastPush.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.broadcastPush.Output.Ok.Headers = .init(),
                    body: Operations.broadcastPush.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The broadcast was successfully updated.
            ///
            /// - Remark: Generated from `#/paths//api/broadcast/round/{broadcastRoundId}/push/post(broadcastPush)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.broadcastPush.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.broadcastPush.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/broadcast/round/{broadcastRoundId}/push/POST/responses/400/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/broadcast/round/{broadcastRoundId}/push/POST/responses/400/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.broadcastPush.Output.BadRequest.Headers
                /// - Remark: Generated from `#/paths/api/broadcast/round/{broadcastRoundId}/push/POST/responses/400/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/broadcast/round/{broadcastRoundId}/push/POST/responses/400/content/json`.
                    internal struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/api/broadcast/round/{broadcastRoundId}/push/POST/responses/400/content/json/error`.
                        internal var error: Swift.String?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - error:
                        internal init(error: Swift.String? = nil) {
                            self.error = error
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case error
                        }
                    }
                    /// - Remark: Generated from `#/paths/api/broadcast/round/{broadcastRoundId}/push/POST/responses/400/content/application\/json`.
                    case json(Operations.broadcastPush.Output.BadRequest.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.broadcastPush.Output.BadRequest.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.broadcastPush.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.broadcastPush.Output.BadRequest.Headers = .init(),
                    body: Operations.broadcastPush.Output.BadRequest.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// There was a problem with the pushed PGN.
            ///
            /// - Remark: Generated from `#/paths//api/broadcast/round/{broadcastRoundId}/push/post(broadcastPush)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.broadcastPush.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.broadcastPush.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Stream an ongoing broadcast round as PGN
    ///
    /// This streaming endpoint first sends all games of a broadcast round in PGN format.
    /// Then, it waits for new moves to be played. As soon as it happens, the entire PGN of the game is sent to the stream.
    /// The stream will also send PGNs when games are added to the round.
    /// This is the best way to get updates about an ongoing round. Streaming means no polling,
    /// and no pollings means no latency, and minimum impact on the server.
    ///
    ///
    /// - Remark: HTTP `GET /api/stream/broadcast/round/{broadcastRoundId}.pgn`.
    /// - Remark: Generated from `#/paths//api/stream/broadcast/round/{broadcastRoundId}.pgn/get(broadcastStreamRoundPgn)`.
    internal enum broadcastStreamRoundPgn {
        internal static let id: Swift.String = "broadcastStreamRoundPgn"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/stream/broadcast/round/{broadcastRoundId}.pgn/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// The broadcast round ID
                ///
                /// - Remark: Generated from `#/paths/api/stream/broadcast/round/{broadcastRoundId}.pgn/GET/path/broadcastRoundId`.
                internal var broadcastRoundId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - broadcastRoundId: The broadcast round ID
                internal init(broadcastRoundId: Swift.String) {
                    self.broadcastRoundId = broadcastRoundId
                }
            }
            internal var path: Operations.broadcastStreamRoundPgn.Input.Path
            /// - Remark: Generated from `#/paths/api/stream/broadcast/round/{broadcastRoundId}.pgn/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.broadcastStreamRoundPgn.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.broadcastStreamRoundPgn.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.broadcastStreamRoundPgn.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.broadcastStreamRoundPgn.Input.Path,
                headers: Operations.broadcastStreamRoundPgn.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/stream/broadcast/round/{broadcastRoundId}.pgn/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/stream/broadcast/round/{broadcastRoundId}.pgn/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.broadcastStreamRoundPgn.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/stream/broadcast/round/{broadcastRoundId}.pgn/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/stream/broadcast/round/{broadcastRoundId}.pgn/GET/responses/200/content/application\/x-chess-pgn`.
                    case application_x_hyphen_chess_hyphen_pgn(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_chess_hyphen_pgn`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_chess_hyphen_pgn`.
                    /// - SeeAlso: `.application_x_hyphen_chess_hyphen_pgn`.
                    internal var application_x_hyphen_chess_hyphen_pgn: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_chess_hyphen_pgn(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.broadcastStreamRoundPgn.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.broadcastStreamRoundPgn.Output.Ok.Headers = .init(),
                    body: Operations.broadcastStreamRoundPgn.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The PGN representation of the round games, then the PGNs of games as they are updated.
            ///
            /// - Remark: Generated from `#/paths//api/stream/broadcast/round/{broadcastRoundId}.pgn/get(broadcastStreamRoundPgn)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.broadcastStreamRoundPgn.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.broadcastStreamRoundPgn.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_chess_hyphen_pgn
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-chess-pgn":
                    self = .application_x_hyphen_chess_hyphen_pgn
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_chess_hyphen_pgn:
                    return "application/x-chess-pgn"
                }
            }
            internal static var allCases: [Self] {
                [
                    .application_x_hyphen_chess_hyphen_pgn
                ]
            }
        }
    }
    /// Export one round as PGN
    ///
    /// Download all games of a single round of a broadcast tournament in PGN format.
    /// You *could* poll this endpoint to get updates about a tournament, but it would be slow,
    /// and very inefficient.
    /// Instead, consider [streaming the tournament](#operation/broadcastStreamRoundPgn) to get
    /// a new PGN every time a game is updated, in real-time.
    ///
    ///
    /// - Remark: HTTP `GET /api/broadcast/round/{broadcastRoundId}.pgn`.
    /// - Remark: Generated from `#/paths//api/broadcast/round/{broadcastRoundId}.pgn/get(broadcastRoundPgn)`.
    internal enum broadcastRoundPgn {
        internal static let id: Swift.String = "broadcastRoundPgn"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/broadcast/round/{broadcastRoundId}.pgn/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// The round ID
                ///
                /// - Remark: Generated from `#/paths/api/broadcast/round/{broadcastRoundId}.pgn/GET/path/broadcastRoundId`.
                internal var broadcastRoundId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - broadcastRoundId: The round ID
                internal init(broadcastRoundId: Swift.String) {
                    self.broadcastRoundId = broadcastRoundId
                }
            }
            internal var path: Operations.broadcastRoundPgn.Input.Path
            /// - Remark: Generated from `#/paths/api/broadcast/round/{broadcastRoundId}.pgn/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.broadcastRoundPgn.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.broadcastRoundPgn.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.broadcastRoundPgn.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.broadcastRoundPgn.Input.Path,
                headers: Operations.broadcastRoundPgn.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/broadcast/round/{broadcastRoundId}.pgn/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/broadcast/round/{broadcastRoundId}.pgn/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.broadcastRoundPgn.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/broadcast/round/{broadcastRoundId}.pgn/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/broadcast/round/{broadcastRoundId}.pgn/GET/responses/200/content/application\/x-chess-pgn`.
                    case application_x_hyphen_chess_hyphen_pgn(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_chess_hyphen_pgn`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_chess_hyphen_pgn`.
                    /// - SeeAlso: `.application_x_hyphen_chess_hyphen_pgn`.
                    internal var application_x_hyphen_chess_hyphen_pgn: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_chess_hyphen_pgn(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.broadcastRoundPgn.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.broadcastRoundPgn.Output.Ok.Headers = .init(),
                    body: Operations.broadcastRoundPgn.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The PGN representation of the round.
            ///
            /// - Remark: Generated from `#/paths//api/broadcast/round/{broadcastRoundId}.pgn/get(broadcastRoundPgn)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.broadcastRoundPgn.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.broadcastRoundPgn.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_chess_hyphen_pgn
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-chess-pgn":
                    self = .application_x_hyphen_chess_hyphen_pgn
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_chess_hyphen_pgn:
                    return "application/x-chess-pgn"
                }
            }
            internal static var allCases: [Self] {
                [
                    .application_x_hyphen_chess_hyphen_pgn
                ]
            }
        }
    }
    /// Export all rounds as PGN
    ///
    /// Download all games of all rounds of a broadcast in PGN format.
    /// If a `study:read` [OAuth token](#tag/OAuth) is provided,
    /// the private rounds where the user is a contributor will be available.
    /// You may want to [download only the games of a single round](#operation/broadcastRoundPgn) instead.
    ///
    ///
    /// - Remark: HTTP `GET /api/broadcast/{broadcastTournamentId}.pgn`.
    /// - Remark: Generated from `#/paths//api/broadcast/{broadcastTournamentId}.pgn/get(broadcastAllRoundsPgn)`.
    internal enum broadcastAllRoundsPgn {
        internal static let id: Swift.String = "broadcastAllRoundsPgn"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/broadcast/{broadcastTournamentId}.pgn/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// The broadcast tournament ID
                ///
                /// - Remark: Generated from `#/paths/api/broadcast/{broadcastTournamentId}.pgn/GET/path/broadcastTournamentId`.
                internal var broadcastTournamentId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - broadcastTournamentId: The broadcast tournament ID
                internal init(broadcastTournamentId: Swift.String) {
                    self.broadcastTournamentId = broadcastTournamentId
                }
            }
            internal var path: Operations.broadcastAllRoundsPgn.Input.Path
            /// - Remark: Generated from `#/paths/api/broadcast/{broadcastTournamentId}.pgn/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.broadcastAllRoundsPgn.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.broadcastAllRoundsPgn.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.broadcastAllRoundsPgn.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.broadcastAllRoundsPgn.Input.Path,
                headers: Operations.broadcastAllRoundsPgn.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/broadcast/{broadcastTournamentId}.pgn/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/broadcast/{broadcastTournamentId}.pgn/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.broadcastAllRoundsPgn.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/broadcast/{broadcastTournamentId}.pgn/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/broadcast/{broadcastTournamentId}.pgn/GET/responses/200/content/application\/x-chess-pgn`.
                    case application_x_hyphen_chess_hyphen_pgn(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_chess_hyphen_pgn`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_chess_hyphen_pgn`.
                    /// - SeeAlso: `.application_x_hyphen_chess_hyphen_pgn`.
                    internal var application_x_hyphen_chess_hyphen_pgn: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_chess_hyphen_pgn(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.broadcastAllRoundsPgn.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.broadcastAllRoundsPgn.Output.Ok.Headers = .init(),
                    body: Operations.broadcastAllRoundsPgn.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The PGN representation of the broadcast.
            ///
            /// - Remark: Generated from `#/paths//api/broadcast/{broadcastTournamentId}.pgn/get(broadcastAllRoundsPgn)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.broadcastAllRoundsPgn.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.broadcastAllRoundsPgn.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_chess_hyphen_pgn
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-chess-pgn":
                    self = .application_x_hyphen_chess_hyphen_pgn
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_chess_hyphen_pgn:
                    return "application/x-chess-pgn"
                }
            }
            internal static var allCases: [Self] {
                [
                    .application_x_hyphen_chess_hyphen_pgn
                ]
            }
        }
    }
    /// Get your broadcast rounds
    ///
    /// Stream all broadcast rounds you are a member of.
    /// Also includes broadcasts rounds you did not create, but were invited to.
    /// Also includes broadcasts rounds where you're a non-writing member. See the `writeable` flag in the response.
    /// Rounds are ordered by rank, which is roughly chronological, most recent first, slightly pondered with popularity.
    ///
    ///
    /// - Remark: HTTP `GET /api/broadcast/my-rounds`.
    /// - Remark: Generated from `#/paths//api/broadcast/my-rounds/get(broadcastMyRoundsGet)`.
    internal enum broadcastMyRoundsGet {
        internal static let id: Swift.String = "broadcastMyRoundsGet"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/broadcast/my-rounds/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// How many rounds to get
                ///
                /// - Remark: Generated from `#/paths/api/broadcast/my-rounds/GET/query/nb`.
                internal var nb: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - nb: How many rounds to get
                internal init(nb: Swift.Int? = nil) {
                    self.nb = nb
                }
            }
            internal var query: Operations.broadcastMyRoundsGet.Input.Query
            /// - Remark: Generated from `#/paths/api/broadcast/my-rounds/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.broadcastMyRoundsGet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.broadcastMyRoundsGet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.broadcastMyRoundsGet.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.broadcastMyRoundsGet.Input.Query = .init(),
                headers: Operations.broadcastMyRoundsGet.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/broadcast/my-rounds/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/broadcast/my-rounds/GET/responses/200/content/application\/x-ndjson`.
                    case application_x_hyphen_ndjson(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_ndjson`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_ndjson`.
                    /// - SeeAlso: `.application_x_hyphen_ndjson`.
                    internal var application_x_hyphen_ndjson: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_ndjson(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.broadcastMyRoundsGet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.broadcastMyRoundsGet.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The broadcast rounds with their tournament and a `study.writeable` flag.
            ///
            /// - Remark: Generated from `#/paths//api/broadcast/my-rounds/get(broadcastMyRoundsGet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.broadcastMyRoundsGet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.broadcastMyRoundsGet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_ndjson
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-ndjson":
                    self = .application_x_hyphen_ndjson
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_ndjson:
                    return "application/x-ndjson"
                }
            }
            internal static var allCases: [Self] {
                [
                    .application_x_hyphen_ndjson
                ]
            }
        }
    }
    /// Get a FIDE player
    ///
    /// Get information about a FIDE player.
    ///
    ///
    /// - Remark: HTTP `GET /api/fide/player/{playerId}`.
    /// - Remark: Generated from `#/paths//api/fide/player/{playerId}/get(fidePlayerGet)`.
    internal enum fidePlayerGet {
        internal static let id: Swift.String = "fidePlayerGet"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/fide/player/{playerId}/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// The FIDE player ID.
                ///
                /// - Remark: Generated from `#/paths/api/fide/player/{playerId}/GET/path/playerId`.
                internal var playerId: Swift.Double
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - playerId: The FIDE player ID.
                internal init(playerId: Swift.Double) {
                    self.playerId = playerId
                }
            }
            internal var path: Operations.fidePlayerGet.Input.Path
            /// - Remark: Generated from `#/paths/api/fide/player/{playerId}/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fidePlayerGet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fidePlayerGet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.fidePlayerGet.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.fidePlayerGet.Input.Path,
                headers: Operations.fidePlayerGet.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/fide/player/{playerId}/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/fide/player/{playerId}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.FIDEPlayer)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.FIDEPlayer {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.fidePlayerGet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.fidePlayerGet.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The information about the FIDE player.
            ///
            /// - Remark: Generated from `#/paths//api/fide/player/{playerId}/get(fidePlayerGet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.fidePlayerGet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.fidePlayerGet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Search FIDE players
    ///
    /// List of FIDE players search results for a query.
    ///
    ///
    /// - Remark: HTTP `GET /api/fide/player`.
    /// - Remark: Generated from `#/paths//api/fide/player/get(fidePlayerSearch)`.
    internal enum fidePlayerSearch {
        internal static let id: Swift.String = "fidePlayerSearch"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/fide/player/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// The search query.
                ///
                /// - Remark: Generated from `#/paths/api/fide/player/GET/query/q`.
                internal var q: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - q: The search query.
                internal init(q: Swift.String) {
                    self.q = q
                }
            }
            internal var query: Operations.fidePlayerSearch.Input.Query
            /// - Remark: Generated from `#/paths/api/fide/player/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fidePlayerSearch.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fidePlayerSearch.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.fidePlayerSearch.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.fidePlayerSearch.Input.Query,
                headers: Operations.fidePlayerSearch.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/fide/player/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/fide/player/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.fidePlayerSearch.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/fide/player/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/fide/player/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.FIDEPlayer])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: [Components.Schemas.FIDEPlayer] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.fidePlayerSearch.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.fidePlayerSearch.Output.Ok.Headers = .init(),
                    body: Operations.fidePlayerSearch.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The list of FIDE players.
            ///
            /// - Remark: Generated from `#/paths//api/fide/player/get(fidePlayerSearch)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.fidePlayerSearch.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.fidePlayerSearch.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get current simuls
    ///
    /// Get recently created, started, finished, simuls.
    /// Created and finished simul lists are not exhaustives, only those with
    /// strong enough host will be listed, the same filter is used to display simuls on https://lichess.org/simul.
    /// When [authenticated with OAuth2](#section/Introduction/Authentication), the pending list will be populated with your created, but unstarted simuls.
    ///
    ///
    /// - Remark: HTTP `GET /api/simul`.
    /// - Remark: Generated from `#/paths//api/simul/get(apiSimul)`.
    internal enum apiSimul {
        internal static let id: Swift.String = "apiSimul"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/simul/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiSimul.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiSimul.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiSimul.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            internal init(headers: Operations.apiSimul.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/simul/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/simul/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiSimul.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/simul/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/simul/GET/responses/200/content/json`.
                    internal struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/api/simul/GET/responses/200/content/json/pending`.
                        internal var pending: [Components.Schemas.Simul]?
                        /// - Remark: Generated from `#/paths/api/simul/GET/responses/200/content/json/created`.
                        internal var created: [Components.Schemas.Simul]?
                        /// - Remark: Generated from `#/paths/api/simul/GET/responses/200/content/json/started`.
                        internal var started: [Components.Schemas.Simul]?
                        /// - Remark: Generated from `#/paths/api/simul/GET/responses/200/content/json/finished`.
                        internal var finished: [Components.Schemas.Simul]?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - pending:
                        ///   - created:
                        ///   - started:
                        ///   - finished:
                        internal init(
                            pending: [Components.Schemas.Simul]? = nil,
                            created: [Components.Schemas.Simul]? = nil,
                            started: [Components.Schemas.Simul]? = nil,
                            finished: [Components.Schemas.Simul]? = nil
                        ) {
                            self.pending = pending
                            self.created = created
                            self.started = started
                            self.finished = finished
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case pending
                            case created
                            case started
                            case finished
                        }
                    }
                    /// - Remark: Generated from `#/paths/api/simul/GET/responses/200/content/application\/json`.
                    case json(Operations.apiSimul.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.apiSimul.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiSimul.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiSimul.Output.Ok.Headers = .init(),
                    body: Operations.apiSimul.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The list of simuls.
            ///
            /// - Remark: Generated from `#/paths//api/simul/get(apiSimul)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiSimul.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiSimul.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a single team
    ///
    /// Public info about a team. Includes the list of publicly visible leaders.
    ///
    /// - Remark: HTTP `GET /api/team/{teamId}`.
    /// - Remark: Generated from `#/paths//api/team/{teamId}/get(teamShow)`.
    internal enum teamShow {
        internal static let id: Swift.String = "teamShow"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/team/{teamId}/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/team/{teamId}/GET/path/teamId`.
                internal var teamId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - teamId:
                internal init(teamId: Swift.String) {
                    self.teamId = teamId
                }
            }
            internal var path: Operations.teamShow.Input.Path
            /// - Remark: Generated from `#/paths/api/team/{teamId}/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teamShow.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teamShow.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.teamShow.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.teamShow.Input.Path,
                headers: Operations.teamShow.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/team/{teamId}/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/team/{teamId}/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.teamShow.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/team/{teamId}/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/team/{teamId}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Team)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Team {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.teamShow.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.teamShow.Output.Ok.Headers = .init(),
                    body: Operations.teamShow.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The information about the team.
            ///
            /// - Remark: Generated from `#/paths//api/team/{teamId}/get(teamShow)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teamShow.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.teamShow.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get popular teams
    ///
    /// Paginator of the most popular teams.
    ///
    ///
    /// - Remark: HTTP `GET /api/team/all`.
    /// - Remark: Generated from `#/paths//api/team/all/get(teamAll)`.
    internal enum teamAll {
        internal static let id: Swift.String = "teamAll"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/team/all/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/team/all/GET/query/page`.
                internal var page: Swift.Double?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - page:
                internal init(page: Swift.Double? = nil) {
                    self.page = page
                }
            }
            internal var query: Operations.teamAll.Input.Query
            /// - Remark: Generated from `#/paths/api/team/all/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teamAll.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teamAll.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.teamAll.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.teamAll.Input.Query = .init(),
                headers: Operations.teamAll.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/team/all/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/team/all/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.teamAll.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/team/all/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/team/all/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.TeamPaginatorJson)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.TeamPaginatorJson {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.teamAll.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.teamAll.Output.Ok.Headers = .init(),
                    body: Operations.teamAll.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// A paginated list of the most popular teams.
            ///
            /// - Remark: Generated from `#/paths//api/team/all/get(teamAll)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teamAll.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.teamAll.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Teams of a player
    ///
    /// All the teams a player is a member of.
    ///
    ///
    /// - Remark: HTTP `GET /api/team/of/{username}`.
    /// - Remark: Generated from `#/paths//api/team/of/{username}/get(teamOfUsername)`.
    internal enum teamOfUsername {
        internal static let id: Swift.String = "teamOfUsername"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/team/of/{username}/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/team/of/{username}/GET/path/username`.
                internal var username: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username:
                internal init(username: Swift.String) {
                    self.username = username
                }
            }
            internal var path: Operations.teamOfUsername.Input.Path
            /// - Remark: Generated from `#/paths/api/team/of/{username}/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teamOfUsername.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teamOfUsername.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.teamOfUsername.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.teamOfUsername.Input.Path,
                headers: Operations.teamOfUsername.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/team/of/{username}/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/team/of/{username}/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.teamOfUsername.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/team/of/{username}/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/team/of/{username}/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Team])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: [Components.Schemas.Team] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.teamOfUsername.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.teamOfUsername.Output.Ok.Headers = .init(),
                    body: Operations.teamOfUsername.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The list of teams the user is a member of.
            ///
            /// - Remark: Generated from `#/paths//api/team/of/{username}/get(teamOfUsername)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teamOfUsername.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.teamOfUsername.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Search teams
    ///
    /// Paginator of team search results for a keyword.
    ///
    ///
    /// - Remark: HTTP `GET /api/team/search`.
    /// - Remark: Generated from `#/paths//api/team/search/get(teamSearch)`.
    internal enum teamSearch {
        internal static let id: Swift.String = "teamSearch"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/team/search/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/team/search/GET/query/text`.
                internal var text: Swift.String?
                /// - Remark: Generated from `#/paths/api/team/search/GET/query/page`.
                internal var page: Swift.Double?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - text:
                ///   - page:
                internal init(
                    text: Swift.String? = nil,
                    page: Swift.Double? = nil
                ) {
                    self.text = text
                    self.page = page
                }
            }
            internal var query: Operations.teamSearch.Input.Query
            /// - Remark: Generated from `#/paths/api/team/search/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teamSearch.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teamSearch.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.teamSearch.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.teamSearch.Input.Query = .init(),
                headers: Operations.teamSearch.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/team/search/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/team/search/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.teamSearch.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/team/search/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/team/search/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.TeamPaginatorJson)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.TeamPaginatorJson {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.teamSearch.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.teamSearch.Output.Ok.Headers = .init(),
                    body: Operations.teamSearch.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The paginated list of teams.
            ///
            /// - Remark: Generated from `#/paths//api/team/search/get(teamSearch)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teamSearch.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.teamSearch.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get members of a team
    ///
    /// Members are sorted by reverse chronological order of joining the team (most recent first).
    /// OAuth is only required if the list of members is private.
    /// Up to 5,000 users are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    ///
    ///
    /// - Remark: HTTP `GET /api/team/{teamId}/users`.
    /// - Remark: Generated from `#/paths//api/team/{teamId}/users/get(teamIdUsers)`.
    internal enum teamIdUsers {
        internal static let id: Swift.String = "teamIdUsers"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/team/{teamId}/users/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/team/{teamId}/users/GET/path/teamId`.
                internal var teamId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - teamId:
                internal init(teamId: Swift.String) {
                    self.teamId = teamId
                }
            }
            internal var path: Operations.teamIdUsers.Input.Path
            /// - Remark: Generated from `#/paths/api/team/{teamId}/users/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Full user documents with performance ratings.
                /// This limits the response to 1,000 users.
                ///
                ///
                /// - Remark: Generated from `#/paths/api/team/{teamId}/users/GET/query/full`.
                internal var full: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - full: Full user documents with performance ratings.
                internal init(full: Swift.Bool? = nil) {
                    self.full = full
                }
            }
            internal var query: Operations.teamIdUsers.Input.Query
            /// - Remark: Generated from `#/paths/api/team/{teamId}/users/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teamIdUsers.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teamIdUsers.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.teamIdUsers.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.teamIdUsers.Input.Path,
                query: Operations.teamIdUsers.Input.Query = .init(),
                headers: Operations.teamIdUsers.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/team/{teamId}/users/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/team/{teamId}/users/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.teamIdUsers.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/team/{teamId}/users/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/team/{teamId}/users/GET/responses/200/content/application\/x-ndjson`.
                    case application_x_hyphen_ndjson(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_ndjson`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_ndjson`.
                    /// - SeeAlso: `.application_x_hyphen_ndjson`.
                    internal var application_x_hyphen_ndjson: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_ndjson(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.teamIdUsers.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.teamIdUsers.Output.Ok.Headers = .init(),
                    body: Operations.teamIdUsers.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The list of users in the team.
            ///
            /// - Remark: Generated from `#/paths//api/team/{teamId}/users/get(teamIdUsers)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teamIdUsers.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.teamIdUsers.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_ndjson
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-ndjson":
                    self = .application_x_hyphen_ndjson
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_ndjson:
                    return "application/x-ndjson"
                }
            }
            internal static var allCases: [Self] {
                [
                    .application_x_hyphen_ndjson
                ]
            }
        }
    }
    /// Get team Arena tournaments
    ///
    /// Get all Arena tournaments relevant to a team.
    /// Tournaments are sorted by reverse chronological order of start date (last starting first).
    /// Tournaments are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    ///
    ///
    /// - Remark: HTTP `GET /api/team/{teamId}/arena`.
    /// - Remark: Generated from `#/paths//api/team/{teamId}/arena/get(apiTeamArena)`.
    internal enum apiTeamArena {
        internal static let id: Swift.String = "apiTeamArena"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/team/{teamId}/arena/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// ID of the team
                ///
                /// - Remark: Generated from `#/paths/api/team/{teamId}/arena/GET/path/teamId`.
                internal var teamId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - teamId: ID of the team
                internal init(teamId: Swift.String) {
                    self.teamId = teamId
                }
            }
            internal var path: Operations.apiTeamArena.Input.Path
            /// - Remark: Generated from `#/paths/api/team/{teamId}/arena/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// How many tournaments to download.
                ///
                /// - Remark: Generated from `#/paths/api/team/{teamId}/arena/GET/query/max`.
                internal var max: Swift.Int?
                /// - Remark: Generated from `#/paths/api/team/{teamId}/arena/GET/query/status`.
                internal struct statusPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/api/team/{teamId}/arena/GET/query/status/value1`.
                    internal var value1: Components.Schemas.ArenaStatusName
                    /// - Remark: Generated from `#/paths/api/team/{teamId}/arena/GET/query/status/value2`.
                    internal var value2: OpenAPIRuntime.OpenAPIValueContainer
                    /// Creates a new `statusPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    ///   - value2:
                    internal init(
                        value1: Components.Schemas.ArenaStatusName,
                        value2: OpenAPIRuntime.OpenAPIValueContainer
                    ) {
                        self.value1 = value1
                        self.value2 = value2
                    }
                    internal init(from decoder: any Decoder) throws {
                        value1 = try decoder.decodeFromSingleValueContainer()
                        value2 = try .init(from: decoder)
                    }
                    internal func encode(to encoder: any Encoder) throws {
                        try encoder.encodeToSingleValueContainer(value1)
                    }
                }
                /// [Filter] Only arena tournaments in this current state.
                ///
                ///
                /// - Remark: Generated from `#/paths/api/team/{teamId}/arena/GET/query/status`.
                internal var status: Operations.apiTeamArena.Input.Query.statusPayload?
                /// [Filter] Only arena tournaments created by a given user.
                ///
                ///
                /// - Remark: Generated from `#/paths/api/team/{teamId}/arena/GET/query/createdBy`.
                internal var createdBy: Swift.String?
                /// [Filter] Only arena tournaments with a given name.
                ///
                ///
                /// - Remark: Generated from `#/paths/api/team/{teamId}/arena/GET/query/name`.
                internal var name: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - max: How many tournaments to download.
                ///   - status: [Filter] Only arena tournaments in this current state.
                ///   - createdBy: [Filter] Only arena tournaments created by a given user.
                ///   - name: [Filter] Only arena tournaments with a given name.
                internal init(
                    max: Swift.Int? = nil,
                    status: Operations.apiTeamArena.Input.Query.statusPayload? = nil,
                    createdBy: Swift.String? = nil,
                    name: Swift.String? = nil
                ) {
                    self.max = max
                    self.status = status
                    self.createdBy = createdBy
                    self.name = name
                }
            }
            internal var query: Operations.apiTeamArena.Input.Query
            /// - Remark: Generated from `#/paths/api/team/{teamId}/arena/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiTeamArena.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiTeamArena.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiTeamArena.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.apiTeamArena.Input.Path,
                query: Operations.apiTeamArena.Input.Query = .init(),
                headers: Operations.apiTeamArena.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/team/{teamId}/arena/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/team/{teamId}/arena/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiTeamArena.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/team/{teamId}/arena/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/team/{teamId}/arena/GET/responses/200/content/application\/x-ndjson`.
                    case application_x_hyphen_ndjson(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_ndjson`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_ndjson`.
                    /// - SeeAlso: `.application_x_hyphen_ndjson`.
                    internal var application_x_hyphen_ndjson: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_ndjson(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiTeamArena.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiTeamArena.Output.Ok.Headers = .init(),
                    body: Operations.apiTeamArena.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The list of Arena tournaments of a team.
            ///
            /// - Remark: Generated from `#/paths//api/team/{teamId}/arena/get(apiTeamArena)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiTeamArena.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiTeamArena.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_ndjson
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-ndjson":
                    self = .application_x_hyphen_ndjson
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_ndjson:
                    return "application/x-ndjson"
                }
            }
            internal static var allCases: [Self] {
                [
                    .application_x_hyphen_ndjson
                ]
            }
        }
    }
    /// Join a team
    ///
    /// Join a team.
    /// If the team requires a password but the `password` field is incorrect,
    /// then the call fails with `403 Forbidden`.
    /// Similarly, if the team join policy requires a confirmation but the
    /// `message` parameter is not given, then the call fails with
    /// `403 Forbidden`.
    ///
    ///
    /// - Remark: HTTP `POST /team/{teamId}/join`.
    /// - Remark: Generated from `#/paths//team/{teamId}/join/post(teamIdJoin)`.
    internal enum teamIdJoin {
        internal static let id: Swift.String = "teamIdJoin"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/team/{teamId}/join/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team/{teamId}/join/POST/path/teamId`.
                internal var teamId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - teamId:
                internal init(teamId: Swift.String) {
                    self.teamId = teamId
                }
            }
            internal var path: Operations.teamIdJoin.Input.Path
            /// - Remark: Generated from `#/paths/team/{teamId}/join/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teamIdJoin.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teamIdJoin.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.teamIdJoin.Input.Headers
            /// - Remark: Generated from `#/paths/team/{teamId}/join/POST/requestBody`.
            @frozen internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team/{teamId}/join/POST/requestBody/urlEncodedForm`.
                internal struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Required if team manually reviews admission requests.
                    ///
                    /// - Remark: Generated from `#/paths/team/{teamId}/join/POST/requestBody/urlEncodedForm/message`.
                    internal var message: Swift.String?
                    /// Optional password, if the team requires one.
                    ///
                    /// - Remark: Generated from `#/paths/team/{teamId}/join/POST/requestBody/urlEncodedForm/password`.
                    internal var password: Swift.String?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - message: Required if team manually reviews admission requests.
                    ///   - password: Optional password, if the team requires one.
                    internal init(
                        message: Swift.String? = nil,
                        password: Swift.String? = nil
                    ) {
                        self.message = message
                        self.password = password
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case message
                        case password
                    }
                }
                /// - Remark: Generated from `#/paths/team/{teamId}/join/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.teamIdJoin.Input.Body.urlEncodedFormPayload)
            }
            internal var body: Operations.teamIdJoin.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.teamIdJoin.Input.Path,
                headers: Operations.teamIdJoin.Input.Headers = .init(),
                body: Operations.teamIdJoin.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team/{teamId}/join/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/team/{teamId}/join/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.teamIdJoin.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.teamIdJoin.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The request to join a team was successfully sent.
            ///
            /// - Remark: Generated from `#/paths//team/{teamId}/join/post(teamIdJoin)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teamIdJoin.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.teamIdJoin.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Leave a team
    ///
    /// Leave a team.
    /// - <https://lichess.org/team>
    ///
    ///
    /// - Remark: HTTP `POST /team/{teamId}/quit`.
    /// - Remark: Generated from `#/paths//team/{teamId}/quit/post(teamIdQuit)`.
    internal enum teamIdQuit {
        internal static let id: Swift.String = "teamIdQuit"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/team/{teamId}/quit/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team/{teamId}/quit/POST/path/teamId`.
                internal var teamId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - teamId:
                internal init(teamId: Swift.String) {
                    self.teamId = teamId
                }
            }
            internal var path: Operations.teamIdQuit.Input.Path
            /// - Remark: Generated from `#/paths/team/{teamId}/quit/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teamIdQuit.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teamIdQuit.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.teamIdQuit.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.teamIdQuit.Input.Path,
                headers: Operations.teamIdQuit.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team/{teamId}/quit/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/team/{teamId}/quit/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.teamIdQuit.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.teamIdQuit.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The logged in user has successfully left the team.
            ///
            /// - Remark: Generated from `#/paths//team/{teamId}/quit/post(teamIdQuit)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teamIdQuit.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.teamIdQuit.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get join requests
    ///
    /// Get pending join requests of your team
    ///
    /// - Remark: HTTP `GET /api/team/{teamId}/requests`.
    /// - Remark: Generated from `#/paths//api/team/{teamId}/requests/get(teamRequests)`.
    internal enum teamRequests {
        internal static let id: Swift.String = "teamRequests"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/team/{teamId}/requests/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/team/{teamId}/requests/GET/path/teamId`.
                internal var teamId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - teamId:
                internal init(teamId: Swift.String) {
                    self.teamId = teamId
                }
            }
            internal var path: Operations.teamRequests.Input.Path
            /// - Remark: Generated from `#/paths/api/team/{teamId}/requests/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Get the declined join requests
                ///
                /// - Remark: Generated from `#/paths/api/team/{teamId}/requests/GET/query/declined`.
                internal var declined: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - declined: Get the declined join requests
                internal init(declined: Swift.Bool? = nil) {
                    self.declined = declined
                }
            }
            internal var query: Operations.teamRequests.Input.Query
            /// - Remark: Generated from `#/paths/api/team/{teamId}/requests/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teamRequests.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teamRequests.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.teamRequests.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.teamRequests.Input.Path,
                query: Operations.teamRequests.Input.Query = .init(),
                headers: Operations.teamRequests.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/team/{teamId}/requests/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/team/{teamId}/requests/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.TeamRequestWithUser])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: [Components.Schemas.TeamRequestWithUser] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.teamRequests.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.teamRequests.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The list of pending join requests on your team
            ///
            /// - Remark: Generated from `#/paths//api/team/{teamId}/requests/get(teamRequests)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teamRequests.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.teamRequests.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Accept join request
    ///
    /// Accept someone's request to join your team
    ///
    /// - Remark: HTTP `POST /api/team/{teamId}/request/{userId}/accept`.
    /// - Remark: Generated from `#/paths//api/team/{teamId}/request/{userId}/accept/post(teamRequestAccept)`.
    internal enum teamRequestAccept {
        internal static let id: Swift.String = "teamRequestAccept"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/team/{teamId}/request/{userId}/accept/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/team/{teamId}/request/{userId}/accept/POST/path/teamId`.
                internal var teamId: Swift.String
                /// - Remark: Generated from `#/paths/api/team/{teamId}/request/{userId}/accept/POST/path/userId`.
                internal var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - teamId:
                ///   - userId:
                internal init(
                    teamId: Swift.String,
                    userId: Swift.String
                ) {
                    self.teamId = teamId
                    self.userId = userId
                }
            }
            internal var path: Operations.teamRequestAccept.Input.Path
            /// - Remark: Generated from `#/paths/api/team/{teamId}/request/{userId}/accept/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teamRequestAccept.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teamRequestAccept.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.teamRequestAccept.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.teamRequestAccept.Input.Path,
                headers: Operations.teamRequestAccept.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/team/{teamId}/request/{userId}/accept/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/team/{teamId}/request/{userId}/accept/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.teamRequestAccept.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.teamRequestAccept.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The member has been added to the team.
            ///
            /// - Remark: Generated from `#/paths//api/team/{teamId}/request/{userId}/accept/post(teamRequestAccept)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teamRequestAccept.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.teamRequestAccept.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Decline join request
    ///
    /// Decline someone's request to join your team
    ///
    /// - Remark: HTTP `POST /api/team/{teamId}/request/{userId}/decline`.
    /// - Remark: Generated from `#/paths//api/team/{teamId}/request/{userId}/decline/post(teamRequestDecline)`.
    internal enum teamRequestDecline {
        internal static let id: Swift.String = "teamRequestDecline"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/team/{teamId}/request/{userId}/decline/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/team/{teamId}/request/{userId}/decline/POST/path/teamId`.
                internal var teamId: Swift.String
                /// - Remark: Generated from `#/paths/api/team/{teamId}/request/{userId}/decline/POST/path/userId`.
                internal var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - teamId:
                ///   - userId:
                internal init(
                    teamId: Swift.String,
                    userId: Swift.String
                ) {
                    self.teamId = teamId
                    self.userId = userId
                }
            }
            internal var path: Operations.teamRequestDecline.Input.Path
            /// - Remark: Generated from `#/paths/api/team/{teamId}/request/{userId}/decline/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teamRequestDecline.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teamRequestDecline.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.teamRequestDecline.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.teamRequestDecline.Input.Path,
                headers: Operations.teamRequestDecline.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/team/{teamId}/request/{userId}/decline/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/team/{teamId}/request/{userId}/decline/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.teamRequestDecline.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.teamRequestDecline.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The join request has been declined and is no longer pending.
            ///
            /// - Remark: Generated from `#/paths//api/team/{teamId}/request/{userId}/decline/post(teamRequestDecline)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teamRequestDecline.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.teamRequestDecline.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Kick a user from your team
    ///
    /// Kick a member out of one of your teams.
    /// - <https://lichess.org/team>
    ///
    ///
    /// - Remark: HTTP `POST /api/team/{teamId}/kick/{userId}`.
    /// - Remark: Generated from `#/paths//api/team/{teamId}/kick/{userId}/post(teamIdKickUserId)`.
    internal enum teamIdKickUserId {
        internal static let id: Swift.String = "teamIdKickUserId"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/team/{teamId}/kick/{userId}/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/team/{teamId}/kick/{userId}/POST/path/teamId`.
                internal var teamId: Swift.String
                /// - Remark: Generated from `#/paths/api/team/{teamId}/kick/{userId}/POST/path/userId`.
                internal var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - teamId:
                ///   - userId:
                internal init(
                    teamId: Swift.String,
                    userId: Swift.String
                ) {
                    self.teamId = teamId
                    self.userId = userId
                }
            }
            internal var path: Operations.teamIdKickUserId.Input.Path
            /// - Remark: Generated from `#/paths/api/team/{teamId}/kick/{userId}/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teamIdKickUserId.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teamIdKickUserId.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.teamIdKickUserId.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.teamIdKickUserId.Input.Path,
                headers: Operations.teamIdKickUserId.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/team/{teamId}/kick/{userId}/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/team/{teamId}/kick/{userId}/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.teamIdKickUserId.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.teamIdKickUserId.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The member has been kicked from the team.
            ///
            /// - Remark: Generated from `#/paths//api/team/{teamId}/kick/{userId}/post(teamIdKickUserId)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teamIdKickUserId.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.teamIdKickUserId.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Message all members
    ///
    /// Send a private message to all members of a team.
    /// You must be a team leader with the "Messages" permission.
    ///
    ///
    /// - Remark: HTTP `POST /team/{teamId}/pm-all`.
    /// - Remark: Generated from `#/paths//team/{teamId}/pm-all/post(teamIdPmAll)`.
    internal enum teamIdPmAll {
        internal static let id: Swift.String = "teamIdPmAll"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/team/{teamId}/pm-all/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team/{teamId}/pm-all/POST/path/teamId`.
                internal var teamId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - teamId:
                internal init(teamId: Swift.String) {
                    self.teamId = teamId
                }
            }
            internal var path: Operations.teamIdPmAll.Input.Path
            /// - Remark: Generated from `#/paths/team/{teamId}/pm-all/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teamIdPmAll.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teamIdPmAll.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.teamIdPmAll.Input.Headers
            /// - Remark: Generated from `#/paths/team/{teamId}/pm-all/POST/requestBody`.
            @frozen internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team/{teamId}/pm-all/POST/requestBody/urlEncodedForm`.
                internal struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// The message to send to all your team members.
                    ///
                    /// - Remark: Generated from `#/paths/team/{teamId}/pm-all/POST/requestBody/urlEncodedForm/message`.
                    internal var message: Swift.String?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - message: The message to send to all your team members.
                    internal init(message: Swift.String? = nil) {
                        self.message = message
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case message
                    }
                }
                /// - Remark: Generated from `#/paths/team/{teamId}/pm-all/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.teamIdPmAll.Input.Body.urlEncodedFormPayload)
            }
            internal var body: Operations.teamIdPmAll.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.teamIdPmAll.Input.Path,
                headers: Operations.teamIdPmAll.Input.Headers = .init(),
                body: Operations.teamIdPmAll.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team/{teamId}/pm-all/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/team/{teamId}/pm-all/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.teamIdPmAll.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/team/{teamId}/pm-all/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/team/{teamId}/pm-all/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.teamIdPmAll.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.teamIdPmAll.Output.Ok.Headers = .init(),
                    body: Operations.teamIdPmAll.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The message has successfully been sent to all team members.
            ///
            /// - Remark: Generated from `#/paths//team/{teamId}/pm-all/post(teamIdPmAll)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teamIdPmAll.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.teamIdPmAll.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/team/{teamId}/pm-all/POST/responses/400/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/team/{teamId}/pm-all/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.teamIdPmAll.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.teamIdPmAll.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// The sending of message to all team members has failed.
            ///
            /// - Remark: Generated from `#/paths//team/{teamId}/pm-all/post(teamIdPmAll)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.teamIdPmAll.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.teamIdPmAll.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get live streamers
    ///
    /// Get basic info about currently streaming users.
    /// This API is very fast and cheap on lichess side.
    /// So you can call it quite often (like once every 5 seconds).
    ///
    ///
    /// - Remark: HTTP `GET /api/streamer/live`.
    /// - Remark: Generated from `#/paths//api/streamer/live/get(streamerLive)`.
    internal enum streamerLive {
        internal static let id: Swift.String = "streamerLive"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/streamer/live/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.streamerLive.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.streamerLive.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.streamerLive.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            internal init(headers: Operations.streamerLive.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/streamer/live/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/streamer/live/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.streamerLive.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/streamer/live/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/streamer/live/GET/responses/200/content/jsonPayload`.
                    internal struct jsonPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/api/streamer/live/GET/responses/200/content/jsonPayload/value1`.
                        internal var value1: Components.Schemas.LightUser
                        /// - Remark: Generated from `#/paths/api/streamer/live/GET/responses/200/content/jsonPayload/value2`.
                        internal struct Value2Payload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/api/streamer/live/GET/responses/200/content/jsonPayload/value2/stream`.
                            internal struct streamPayload: Codable, Hashable, Sendable {
                                /// - Remark: Generated from `#/paths/api/streamer/live/GET/responses/200/content/jsonPayload/value2/stream/service`.
                                @frozen internal enum servicePayload: String, Codable, Hashable, Sendable {
                                    case twitch = "twitch"
                                    case youTube = "youTube"
                                }
                                /// - Remark: Generated from `#/paths/api/streamer/live/GET/responses/200/content/jsonPayload/value2/stream/service`.
                                internal var service: Operations.streamerLive.Output.Ok.Body.jsonPayloadPayload.Value2Payload.streamPayload.servicePayload?
                                /// The stream title
                                ///
                                /// - Remark: Generated from `#/paths/api/streamer/live/GET/responses/200/content/jsonPayload/value2/stream/status`.
                                internal var status: Swift.String?
                                /// - Remark: Generated from `#/paths/api/streamer/live/GET/responses/200/content/jsonPayload/value2/stream/lang`.
                                internal var lang: Swift.String?
                                /// Creates a new `streamPayload`.
                                ///
                                /// - Parameters:
                                ///   - service:
                                ///   - status: The stream title
                                ///   - lang:
                                internal init(
                                    service: Operations.streamerLive.Output.Ok.Body.jsonPayloadPayload.Value2Payload.streamPayload.servicePayload? = nil,
                                    status: Swift.String? = nil,
                                    lang: Swift.String? = nil
                                ) {
                                    self.service = service
                                    self.status = status
                                    self.lang = lang
                                }
                                internal enum CodingKeys: String, CodingKey {
                                    case service
                                    case status
                                    case lang
                                }
                            }
                            /// - Remark: Generated from `#/paths/api/streamer/live/GET/responses/200/content/jsonPayload/value2/stream`.
                            internal var stream: Operations.streamerLive.Output.Ok.Body.jsonPayloadPayload.Value2Payload.streamPayload?
                            /// - Remark: Generated from `#/paths/api/streamer/live/GET/responses/200/content/jsonPayload/value2/streamer`.
                            internal struct streamerPayload: Codable, Hashable, Sendable {
                                /// - Remark: Generated from `#/paths/api/streamer/live/GET/responses/200/content/jsonPayload/value2/streamer/name`.
                                internal var name: Swift.String?
                                /// - Remark: Generated from `#/paths/api/streamer/live/GET/responses/200/content/jsonPayload/value2/streamer/headline`.
                                internal var headline: Swift.String?
                                /// - Remark: Generated from `#/paths/api/streamer/live/GET/responses/200/content/jsonPayload/value2/streamer/description`.
                                internal var description: Swift.String?
                                /// - Remark: Generated from `#/paths/api/streamer/live/GET/responses/200/content/jsonPayload/value2/streamer/twitch`.
                                internal var twitch: Swift.String?
                                /// - Remark: Generated from `#/paths/api/streamer/live/GET/responses/200/content/jsonPayload/value2/streamer/youTube`.
                                internal var youTube: Swift.String?
                                /// - Remark: Generated from `#/paths/api/streamer/live/GET/responses/200/content/jsonPayload/value2/streamer/image`.
                                internal var image: Swift.String?
                                /// Creates a new `streamerPayload`.
                                ///
                                /// - Parameters:
                                ///   - name:
                                ///   - headline:
                                ///   - description:
                                ///   - twitch:
                                ///   - youTube:
                                ///   - image:
                                internal init(
                                    name: Swift.String? = nil,
                                    headline: Swift.String? = nil,
                                    description: Swift.String? = nil,
                                    twitch: Swift.String? = nil,
                                    youTube: Swift.String? = nil,
                                    image: Swift.String? = nil
                                ) {
                                    self.name = name
                                    self.headline = headline
                                    self.description = description
                                    self.twitch = twitch
                                    self.youTube = youTube
                                    self.image = image
                                }
                                internal enum CodingKeys: String, CodingKey {
                                    case name
                                    case headline
                                    case description
                                    case twitch
                                    case youTube
                                    case image
                                }
                            }
                            /// - Remark: Generated from `#/paths/api/streamer/live/GET/responses/200/content/jsonPayload/value2/streamer`.
                            internal var streamer: Operations.streamerLive.Output.Ok.Body.jsonPayloadPayload.Value2Payload.streamerPayload?
                            /// Creates a new `Value2Payload`.
                            ///
                            /// - Parameters:
                            ///   - stream:
                            ///   - streamer:
                            internal init(
                                stream: Operations.streamerLive.Output.Ok.Body.jsonPayloadPayload.Value2Payload.streamPayload? = nil,
                                streamer: Operations.streamerLive.Output.Ok.Body.jsonPayloadPayload.Value2Payload.streamerPayload? = nil
                            ) {
                                self.stream = stream
                                self.streamer = streamer
                            }
                            internal enum CodingKeys: String, CodingKey {
                                case stream
                                case streamer
                            }
                        }
                        /// - Remark: Generated from `#/paths/api/streamer/live/GET/responses/200/content/jsonPayload/value2`.
                        internal var value2: Operations.streamerLive.Output.Ok.Body.jsonPayloadPayload.Value2Payload
                        /// Creates a new `jsonPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        internal init(
                            value1: Components.Schemas.LightUser,
                            value2: Operations.streamerLive.Output.Ok.Body.jsonPayloadPayload.Value2Payload
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        internal init(from decoder: any Decoder) throws {
                            value1 = try .init(from: decoder)
                            value2 = try .init(from: decoder)
                        }
                        internal func encode(to encoder: any Encoder) throws {
                            try value1.encode(to: encoder)
                            try value2.encode(to: encoder)
                        }
                    }
                    /// - Remark: Generated from `#/paths/api/streamer/live/GET/responses/200/content/json`.
                    internal typealias jsonPayload = [Operations.streamerLive.Output.Ok.Body.jsonPayloadPayload]
                    /// - Remark: Generated from `#/paths/api/streamer/live/GET/responses/200/content/application\/json`.
                    case json(Operations.streamerLive.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.streamerLive.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.streamerLive.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.streamerLive.Output.Ok.Headers = .init(),
                    body: Operations.streamerLive.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The list of live streamers and their respective information.
            ///
            /// - Remark: Generated from `#/paths//api/streamer/live/get(streamerLive)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.streamerLive.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.streamerLive.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get crosstable
    ///
    /// Get total number of games, and current score, of any two users.
    /// If the `matchup` flag is provided, and the users are currently playing, also gets the current match game number and scores.
    ///
    ///
    /// - Remark: HTTP `GET /api/crosstable/{user1}/{user2}`.
    /// - Remark: Generated from `#/paths//api/crosstable/{user1}/{user2}/get(apiCrosstable)`.
    internal enum apiCrosstable {
        internal static let id: Swift.String = "apiCrosstable"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/crosstable/{user1}/{user2}/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/crosstable/{user1}/{user2}/GET/path/user1`.
                internal var user1: Swift.String
                /// - Remark: Generated from `#/paths/api/crosstable/{user1}/{user2}/GET/path/user2`.
                internal var user2: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - user1:
                ///   - user2:
                internal init(
                    user1: Swift.String,
                    user2: Swift.String
                ) {
                    self.user1 = user1
                    self.user2 = user2
                }
            }
            internal var path: Operations.apiCrosstable.Input.Path
            /// - Remark: Generated from `#/paths/api/crosstable/{user1}/{user2}/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Whether to get the current match data, if any
                ///
                /// - Remark: Generated from `#/paths/api/crosstable/{user1}/{user2}/GET/query/matchup`.
                internal var matchup: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - matchup: Whether to get the current match data, if any
                internal init(matchup: Swift.Bool? = nil) {
                    self.matchup = matchup
                }
            }
            internal var query: Operations.apiCrosstable.Input.Query
            /// - Remark: Generated from `#/paths/api/crosstable/{user1}/{user2}/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiCrosstable.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiCrosstable.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiCrosstable.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.apiCrosstable.Input.Path,
                query: Operations.apiCrosstable.Input.Query = .init(),
                headers: Operations.apiCrosstable.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/crosstable/{user1}/{user2}/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/crosstable/{user1}/{user2}/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiCrosstable.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/crosstable/{user1}/{user2}/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/crosstable/{user1}/{user2}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Crosstable)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Crosstable {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiCrosstable.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiCrosstable.Output.Ok.Headers = .init(),
                    body: Operations.apiCrosstable.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The crosstable of the two users.
            ///
            /// - Remark: Generated from `#/paths//api/crosstable/{user1}/{user2}/get(apiCrosstable)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiCrosstable.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiCrosstable.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Autocomplete usernames
    ///
    /// Provides autocompletion options for an incomplete username.
    ///
    ///
    /// - Remark: HTTP `GET /api/player/autocomplete`.
    /// - Remark: Generated from `#/paths//api/player/autocomplete/get(apiPlayerAutocomplete)`.
    internal enum apiPlayerAutocomplete {
        internal static let id: Swift.String = "apiPlayerAutocomplete"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/player/autocomplete/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// The beginning of a username
                ///
                /// - Remark: Generated from `#/paths/api/player/autocomplete/GET/query/term`.
                internal var term: Swift.String
                /// - `false` returns an array of usernames
                /// - `true` returns an object with matching users
                ///
                ///
                /// - Remark: Generated from `#/paths/api/player/autocomplete/GET/query/object`.
                internal var object: Swift.Bool?
                /// - `false` returns an array of usernames
                /// - `true` returns an array of usernames with preferred casing
                ///
                ///
                /// - Remark: Generated from `#/paths/api/player/autocomplete/GET/query/names`.
                internal var names: Swift.Bool?
                /// Returns followed players matching `term` if any, else returns other players.
                /// Requires [OAuth](#tag/OAuth).
                ///
                ///
                /// - Remark: Generated from `#/paths/api/player/autocomplete/GET/query/friend`.
                internal var friend: Swift.Bool?
                /// Search within a team.
                /// Use team ID/slug.
                ///
                ///
                /// - Remark: Generated from `#/paths/api/player/autocomplete/GET/query/team`.
                internal var team: Swift.String?
                /// Search within a arena tournament.
                /// Use tournament ID.
                ///
                ///
                /// - Remark: Generated from `#/paths/api/player/autocomplete/GET/query/tour`.
                internal var tour: Swift.String?
                /// Search within a Swiss tournament.
                ///
                ///
                /// - Remark: Generated from `#/paths/api/player/autocomplete/GET/query/swiss`.
                internal var swiss: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - term: The beginning of a username
                ///   - object:
                ///   - names:
                ///   - friend: Returns followed players matching `term` if any, else returns other players.
                ///   - team: Search within a team.
                ///   - tour: Search within a arena tournament.
                ///   - swiss: Search within a Swiss tournament.
                internal init(
                    term: Swift.String,
                    object: Swift.Bool? = nil,
                    names: Swift.Bool? = nil,
                    friend: Swift.Bool? = nil,
                    team: Swift.String? = nil,
                    tour: Swift.String? = nil,
                    swiss: Swift.String? = nil
                ) {
                    self.term = term
                    self.object = object
                    self.names = names
                    self.friend = friend
                    self.team = team
                    self.tour = tour
                    self.swiss = swiss
                }
            }
            internal var query: Operations.apiPlayerAutocomplete.Input.Query
            /// - Remark: Generated from `#/paths/api/player/autocomplete/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiPlayerAutocomplete.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiPlayerAutocomplete.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiPlayerAutocomplete.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.apiPlayerAutocomplete.Input.Query,
                headers: Operations.apiPlayerAutocomplete.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/player/autocomplete/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/player/autocomplete/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiPlayerAutocomplete.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/player/autocomplete/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/player/autocomplete/GET/responses/200/content/json`.
                    @frozen internal enum jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/api/player/autocomplete/GET/responses/200/content/json/case1`.
                        case case1([Swift.String])
                        /// - Remark: Generated from `#/paths/api/player/autocomplete/GET/responses/200/content/json/case2`.
                        internal struct Case2Payload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/api/player/autocomplete/GET/responses/200/content/json/case2/result`.
                            internal var result: [Components.Schemas.LightUserOnline]?
                            /// Creates a new `Case2Payload`.
                            ///
                            /// - Parameters:
                            ///   - result:
                            internal init(result: [Components.Schemas.LightUserOnline]? = nil) {
                                self.result = result
                            }
                            internal enum CodingKeys: String, CodingKey {
                                case result
                            }
                        }
                        /// - Remark: Generated from `#/paths/api/player/autocomplete/GET/responses/200/content/json/case2`.
                        case case2(Operations.apiPlayerAutocomplete.Output.Ok.Body.jsonPayload.Case2Payload)
                        internal init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        internal func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/api/player/autocomplete/GET/responses/200/content/application\/json`.
                    case json(Operations.apiPlayerAutocomplete.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.apiPlayerAutocomplete.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiPlayerAutocomplete.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiPlayerAutocomplete.Output.Ok.Headers = .init(),
                    body: Operations.apiPlayerAutocomplete.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// An array of players which usernames start with the provided term.
            ///
            /// - Remark: Generated from `#/paths//api/player/autocomplete/get(apiPlayerAutocomplete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiPlayerAutocomplete.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiPlayerAutocomplete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get notes for a user
    ///
    /// Get the private notes that you have added for a user.
    ///
    ///
    /// - Remark: HTTP `GET /api/user/{username}/note`.
    /// - Remark: Generated from `#/paths//api/user/{username}/note/get(readNote)`.
    internal enum readNote {
        internal static let id: Swift.String = "readNote"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/user/{username}/note/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/user/{username}/note/GET/path/username`.
                internal var username: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username:
                internal init(username: Swift.String) {
                    self.username = username
                }
            }
            internal var path: Operations.readNote.Input.Path
            /// - Remark: Generated from `#/paths/api/user/{username}/note/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.readNote.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.readNote.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.readNote.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.readNote.Input.Path,
                headers: Operations.readNote.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/user/{username}/note/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/user/{username}/note/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.readNote.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/user/{username}/note/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/user/{username}/note/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.UserNote])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: [Components.Schemas.UserNote] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.readNote.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.readNote.Output.Ok.Headers = .init(),
                    body: Operations.readNote.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The list of notes you have added for this user
            ///
            /// - Remark: Generated from `#/paths//api/user/{username}/note/get(readNote)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.readNote.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.readNote.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Add a note for a user
    ///
    /// Add a private note available only to you about this account.
    ///
    ///
    /// - Remark: HTTP `POST /api/user/{username}/note`.
    /// - Remark: Generated from `#/paths//api/user/{username}/note/post(writeNote)`.
    internal enum writeNote {
        internal static let id: Swift.String = "writeNote"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/user/{username}/note/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/user/{username}/note/POST/path/username`.
                internal var username: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username:
                internal init(username: Swift.String) {
                    self.username = username
                }
            }
            internal var path: Operations.writeNote.Input.Path
            /// - Remark: Generated from `#/paths/api/user/{username}/note/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.writeNote.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.writeNote.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.writeNote.Input.Headers
            /// - Remark: Generated from `#/paths/api/user/{username}/note/POST/requestBody`.
            @frozen internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/user/{username}/note/POST/requestBody/urlEncodedForm`.
                internal struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// The contents of the note
                    ///
                    /// - Remark: Generated from `#/paths/api/user/{username}/note/POST/requestBody/urlEncodedForm/text`.
                    internal var text: Swift.String
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - text: The contents of the note
                    internal init(text: Swift.String) {
                        self.text = text
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case text
                    }
                }
                /// - Remark: Generated from `#/paths/api/user/{username}/note/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.writeNote.Input.Body.urlEncodedFormPayload)
            }
            internal var body: Operations.writeNote.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.writeNote.Input.Path,
                headers: Operations.writeNote.Input.Headers = .init(),
                body: Operations.writeNote.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/user/{username}/note/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/user/{username}/note/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.writeNote.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.writeNote.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The note was successfully added.
            ///
            /// - Remark: Generated from `#/paths//api/user/{username}/note/post(writeNote)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.writeNote.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.writeNote.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get users followed by the logged in user
    ///
    /// Users are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    ///
    ///
    /// - Remark: HTTP `GET /api/rel/following`.
    /// - Remark: Generated from `#/paths//api/rel/following/get(apiUserFollowing)`.
    internal enum apiUserFollowing {
        internal static let id: Swift.String = "apiUserFollowing"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/rel/following/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiUserFollowing.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiUserFollowing.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiUserFollowing.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            internal init(headers: Operations.apiUserFollowing.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/rel/following/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/rel/following/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiUserFollowing.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/rel/following/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/rel/following/GET/responses/200/content/application\/x-ndjson`.
                    case application_x_hyphen_ndjson(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_ndjson`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_ndjson`.
                    /// - SeeAlso: `.application_x_hyphen_ndjson`.
                    internal var application_x_hyphen_ndjson: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_ndjson(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiUserFollowing.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiUserFollowing.Output.Ok.Headers = .init(),
                    body: Operations.apiUserFollowing.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The list of users followed by a user.
            ///
            /// - Remark: Generated from `#/paths//api/rel/following/get(apiUserFollowing)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiUserFollowing.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiUserFollowing.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_ndjson
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-ndjson":
                    self = .application_x_hyphen_ndjson
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_ndjson:
                    return "application/x-ndjson"
                }
            }
            internal static var allCases: [Self] {
                [
                    .application_x_hyphen_ndjson
                ]
            }
        }
    }
    /// Follow a player
    ///
    /// Follow a player, adding them to your list of Lichess friends.
    ///
    ///
    /// - Remark: HTTP `POST /api/rel/follow/{username}`.
    /// - Remark: Generated from `#/paths//api/rel/follow/{username}/post(followUser)`.
    internal enum followUser {
        internal static let id: Swift.String = "followUser"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/rel/follow/{username}/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/rel/follow/{username}/POST/path/username`.
                internal var username: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username:
                internal init(username: Swift.String) {
                    self.username = username
                }
            }
            internal var path: Operations.followUser.Input.Path
            /// - Remark: Generated from `#/paths/api/rel/follow/{username}/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.followUser.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.followUser.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.followUser.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.followUser.Input.Path,
                headers: Operations.followUser.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/rel/follow/{username}/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/rel/follow/{username}/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.followUser.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.followUser.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The player was successfully added.
            ///
            /// - Remark: Generated from `#/paths//api/rel/follow/{username}/post(followUser)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.followUser.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.followUser.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Unfollow a player
    ///
    /// Unfollow a player, removing them from your list of Lichess friends.
    ///
    ///
    /// - Remark: HTTP `POST /api/rel/unfollow/{username}`.
    /// - Remark: Generated from `#/paths//api/rel/unfollow/{username}/post(unfollowUser)`.
    internal enum unfollowUser {
        internal static let id: Swift.String = "unfollowUser"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/rel/unfollow/{username}/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/rel/unfollow/{username}/POST/path/username`.
                internal var username: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username:
                internal init(username: Swift.String) {
                    self.username = username
                }
            }
            internal var path: Operations.unfollowUser.Input.Path
            /// - Remark: Generated from `#/paths/api/rel/unfollow/{username}/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.unfollowUser.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.unfollowUser.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.unfollowUser.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.unfollowUser.Input.Path,
                headers: Operations.unfollowUser.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/rel/unfollow/{username}/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/rel/unfollow/{username}/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.unfollowUser.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.unfollowUser.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The player was successfully removed.
            ///
            /// - Remark: Generated from `#/paths//api/rel/unfollow/{username}/post(unfollowUser)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.unfollowUser.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.unfollowUser.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Block a player
    ///
    /// Block a player, adding them to your list of blocked Lichess users.
    ///
    ///
    /// - Remark: HTTP `POST /api/rel/block/{username}`.
    /// - Remark: Generated from `#/paths//api/rel/block/{username}/post(blockUser)`.
    internal enum blockUser {
        internal static let id: Swift.String = "blockUser"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/rel/block/{username}/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/rel/block/{username}/POST/path/username`.
                internal var username: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username:
                internal init(username: Swift.String) {
                    self.username = username
                }
            }
            internal var path: Operations.blockUser.Input.Path
            /// - Remark: Generated from `#/paths/api/rel/block/{username}/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.blockUser.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.blockUser.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.blockUser.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.blockUser.Input.Path,
                headers: Operations.blockUser.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/rel/block/{username}/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/rel/block/{username}/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.blockUser.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.blockUser.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The player was successfully added.
            ///
            /// - Remark: Generated from `#/paths//api/rel/block/{username}/post(blockUser)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.blockUser.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.blockUser.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Unblock a player
    ///
    /// Unblock a player, removing them from your list of blocked Lichess users.
    ///
    ///
    /// - Remark: HTTP `POST /api/rel/unblock/{username}`.
    /// - Remark: Generated from `#/paths//api/rel/unblock/{username}/post(unblockUser)`.
    internal enum unblockUser {
        internal static let id: Swift.String = "unblockUser"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/rel/unblock/{username}/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/rel/unblock/{username}/POST/path/username`.
                internal var username: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username:
                internal init(username: Swift.String) {
                    self.username = username
                }
            }
            internal var path: Operations.unblockUser.Input.Path
            /// - Remark: Generated from `#/paths/api/rel/unblock/{username}/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.unblockUser.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.unblockUser.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.unblockUser.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.unblockUser.Input.Path,
                headers: Operations.unblockUser.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/rel/unblock/{username}/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/rel/unblock/{username}/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.unblockUser.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.unblockUser.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The player was successfully removed.
            ///
            /// - Remark: Generated from `#/paths//api/rel/unblock/{username}/post(unblockUser)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.unblockUser.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.unblockUser.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Stream incoming events
    ///
    /// Stream the events reaching a lichess user in real time as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    ///
    /// An empty line is sent every 7 seconds for keep alive purposes.
    ///
    /// Each non-empty line is a JSON object containing a `type` field. Possible values are:
    /// - `gameStart` Start of a game
    /// - `gameFinish` Completion of a game
    /// - `challenge` A player sends you a challenge or you challenge someone
    /// - `challengeCanceled` A player cancels their challenge to you
    /// - `challengeDeclined` The opponent declines your challenge
    ///
    /// When the stream opens, all current challenges and games are sent.
    ///
    /// Only one global event stream can be active at a time. When the stream opens, the previous one with the same access token is closed.
    ///
    ///
    /// - Remark: HTTP `GET /api/stream/event`.
    /// - Remark: Generated from `#/paths//api/stream/event/get(apiStreamEvent)`.
    internal enum apiStreamEvent {
        internal static let id: Swift.String = "apiStreamEvent"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/stream/event/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiStreamEvent.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiStreamEvent.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiStreamEvent.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            internal init(headers: Operations.apiStreamEvent.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/stream/event/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/stream/event/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiStreamEvent.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/stream/event/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/stream/event/GET/responses/200/content/application\/x-ndjson`.
                    case application_x_hyphen_ndjson(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_ndjson`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_ndjson`.
                    /// - SeeAlso: `.application_x_hyphen_ndjson`.
                    internal var application_x_hyphen_ndjson: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_ndjson(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiStreamEvent.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiStreamEvent.Output.Ok.Headers = .init(),
                    body: Operations.apiStreamEvent.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The stream of events reaching the logged in user.
            ///
            /// - Remark: Generated from `#/paths//api/stream/event/get(apiStreamEvent)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiStreamEvent.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiStreamEvent.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_ndjson
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-ndjson":
                    self = .application_x_hyphen_ndjson
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_ndjson:
                    return "application/x-ndjson"
                }
            }
            internal static var allCases: [Self] {
                [
                    .application_x_hyphen_ndjson
                ]
            }
        }
    }
    /// Create a seek
    ///
    /// Create a public seek, to start a game with a random player.
    ///
    /// ### Real-time seek
    ///
    /// Specify the `time` and `increment` clock values.
    /// The response is streamed but doesn't contain any information.
    ///
    /// **Keep the connection open to keep the seek active**.
    ///
    /// If the client closes the connection, the seek is canceled. This way, if the client terminates, the user won't be paired in a game they wouldn't play.
    /// When the seek is accepted, or expires, the server closes the connection.
    ///
    /// **Make sure to also have an [Event stream](#operation/apiStreamEvent) open**, to be notified when a game starts.
    /// We recommend opening the [Event stream](#operation/apiStreamEvent) first, then the seek stream. This way,
    /// you won't miss the game event if the seek is accepted immediately.
    ///
    /// ### Correspondence seek
    ///
    /// Specify the `days` per turn value.
    /// The response is not streamed, it immediately completes with the seek ID. The seek remains active on the server until it is joined by someone.
    ///
    ///
    /// - Remark: HTTP `POST /api/board/seek`.
    /// - Remark: Generated from `#/paths//api/board/seek/post(apiBoardSeek)`.
    internal enum apiBoardSeek {
        internal static let id: Swift.String = "apiBoardSeek"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/board/seek/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiBoardSeek.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiBoardSeek.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiBoardSeek.Input.Headers
            /// - Remark: Generated from `#/paths/api/board/seek/POST/requestBody`.
            @frozen internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/board/seek/POST/requestBody/urlEncodedForm`.
                internal struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/api/board/seek/POST/requestBody/urlEncodedForm/value1`.
                    internal struct Value1Payload: Codable, Hashable, Sendable {
                        /// Whether the game is rated and impacts players ratings.
                        ///
                        /// - Remark: Generated from `#/paths/api/board/seek/POST/requestBody/urlEncodedForm/value1/rated`.
                        internal var rated: Swift.Bool?
                        /// - Remark: Generated from `#/paths/api/board/seek/POST/requestBody/urlEncodedForm/value1/variant`.
                        internal var variant: Components.Schemas.VariantKey?
                        /// The rating range of potential opponents. Better left empty.
                        /// Example: 1500-1800
                        ///
                        ///
                        /// - Remark: Generated from `#/paths/api/board/seek/POST/requestBody/urlEncodedForm/value1/ratingRange`.
                        internal var ratingRange: Swift.String?
                        /// Creates a new `Value1Payload`.
                        ///
                        /// - Parameters:
                        ///   - rated: Whether the game is rated and impacts players ratings.
                        ///   - variant:
                        ///   - ratingRange: The rating range of potential opponents. Better left empty.
                        internal init(
                            rated: Swift.Bool? = nil,
                            variant: Components.Schemas.VariantKey? = nil,
                            ratingRange: Swift.String? = nil
                        ) {
                            self.rated = rated
                            self.variant = variant
                            self.ratingRange = ratingRange
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case rated
                            case variant
                            case ratingRange
                        }
                    }
                    /// - Remark: Generated from `#/paths/api/board/seek/POST/requestBody/urlEncodedForm/value1`.
                    internal var value1: Operations.apiBoardSeek.Input.Body.urlEncodedFormPayload.Value1Payload
                    /// - Remark: Generated from `#/paths/api/board/seek/POST/requestBody/urlEncodedForm/value2`.
                    @frozen internal enum Value2Payload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/api/board/seek/POST/requestBody/urlEncodedForm/value2/case1`.
                        internal struct Case1Payload: Codable, Hashable, Sendable {
                            /// Clock initial time in minutes. Required for real-time seeks.
                            ///
                            /// - Remark: Generated from `#/paths/api/board/seek/POST/requestBody/urlEncodedForm/value2/case1/time`.
                            internal var time: Swift.Double
                            /// Clock increment in seconds. Required for real-time seeks.
                            ///
                            /// - Remark: Generated from `#/paths/api/board/seek/POST/requestBody/urlEncodedForm/value2/case1/increment`.
                            internal var increment: Swift.Int
                            /// The color to play. Better left empty to automatically get 50% white.
                            ///
                            /// - Remark: Generated from `#/paths/api/board/seek/POST/requestBody/urlEncodedForm/value2/case1/color`.
                            @frozen internal enum colorPayload: String, Codable, Hashable, Sendable {
                                case random = "random"
                                case white = "white"
                                case black = "black"
                            }
                            /// The color to play. Better left empty to automatically get 50% white.
                            ///
                            /// - Remark: Generated from `#/paths/api/board/seek/POST/requestBody/urlEncodedForm/value2/case1/color`.
                            internal var color: Operations.apiBoardSeek.Input.Body.urlEncodedFormPayload.Value2Payload.Case1Payload.colorPayload?
                            /// Creates a new `Case1Payload`.
                            ///
                            /// - Parameters:
                            ///   - time: Clock initial time in minutes. Required for real-time seeks.
                            ///   - increment: Clock increment in seconds. Required for real-time seeks.
                            ///   - color: The color to play. Better left empty to automatically get 50% white.
                            internal init(
                                time: Swift.Double,
                                increment: Swift.Int,
                                color: Operations.apiBoardSeek.Input.Body.urlEncodedFormPayload.Value2Payload.Case1Payload.colorPayload? = nil
                            ) {
                                self.time = time
                                self.increment = increment
                                self.color = color
                            }
                            internal enum CodingKeys: String, CodingKey {
                                case time
                                case increment
                                case color
                            }
                        }
                        /// - Remark: Generated from `#/paths/api/board/seek/POST/requestBody/urlEncodedForm/value2/case1`.
                        case case1(Operations.apiBoardSeek.Input.Body.urlEncodedFormPayload.Value2Payload.Case1Payload)
                        /// - Remark: Generated from `#/paths/api/board/seek/POST/requestBody/urlEncodedForm/value2/case2`.
                        internal struct Case2Payload: Codable, Hashable, Sendable {
                            /// Days per turn. Required for correspondence seeks.
                            ///
                            /// - Remark: Generated from `#/paths/api/board/seek/POST/requestBody/urlEncodedForm/value2/case2/days`.
                            @frozen internal enum daysPayload: Int, Codable, Hashable, Sendable {
                                case _1 = 1
                                case _2 = 2
                                case _3 = 3
                                case _5 = 5
                                case _7 = 7
                                case _10 = 10
                                case _14 = 14
                            }
                            /// Days per turn. Required for correspondence seeks.
                            ///
                            /// - Remark: Generated from `#/paths/api/board/seek/POST/requestBody/urlEncodedForm/value2/case2/days`.
                            internal var days: Operations.apiBoardSeek.Input.Body.urlEncodedFormPayload.Value2Payload.Case2Payload.daysPayload
                            /// Creates a new `Case2Payload`.
                            ///
                            /// - Parameters:
                            ///   - days: Days per turn. Required for correspondence seeks.
                            internal init(days: Operations.apiBoardSeek.Input.Body.urlEncodedFormPayload.Value2Payload.Case2Payload.daysPayload) {
                                self.days = days
                            }
                            internal enum CodingKeys: String, CodingKey {
                                case days
                            }
                        }
                        /// - Remark: Generated from `#/paths/api/board/seek/POST/requestBody/urlEncodedForm/value2/case2`.
                        case case2(Operations.apiBoardSeek.Input.Body.urlEncodedFormPayload.Value2Payload.Case2Payload)
                        internal init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        internal func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try value.encode(to: encoder)
                            case let .case2(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/api/board/seek/POST/requestBody/urlEncodedForm/value2`.
                    internal var value2: Operations.apiBoardSeek.Input.Body.urlEncodedFormPayload.Value2Payload
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    ///   - value2:
                    internal init(
                        value1: Operations.apiBoardSeek.Input.Body.urlEncodedFormPayload.Value1Payload,
                        value2: Operations.apiBoardSeek.Input.Body.urlEncodedFormPayload.Value2Payload
                    ) {
                        self.value1 = value1
                        self.value2 = value2
                    }
                    internal init(from decoder: any Decoder) throws {
                        value1 = try .init(from: decoder)
                        value2 = try .init(from: decoder)
                    }
                    internal func encode(to encoder: any Encoder) throws {
                        try value1.encode(to: encoder)
                        try value2.encode(to: encoder)
                    }
                }
                /// - Remark: Generated from `#/paths/api/board/seek/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.apiBoardSeek.Input.Body.urlEncodedFormPayload)
            }
            internal var body: Operations.apiBoardSeek.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            internal init(
                headers: Operations.apiBoardSeek.Input.Headers = .init(),
                body: Operations.apiBoardSeek.Input.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/board/seek/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/board/seek/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiBoardSeek.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/board/seek/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// Only happens when doing a correspondence seek
                    ///
                    /// - Remark: Generated from `#/paths/api/board/seek/POST/responses/200/content/json`.
                    internal struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/api/board/seek/POST/responses/200/content/json/id`.
                        internal var id: Swift.String
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - id:
                        internal init(id: Swift.String) {
                            self.id = id
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/paths/api/board/seek/POST/responses/200/content/application\/json`.
                    case json(Operations.apiBoardSeek.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.apiBoardSeek.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/api/board/seek/POST/responses/200/content/application\/x-ndjson`.
                    case application_x_hyphen_ndjson(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_ndjson`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_ndjson`.
                    /// - SeeAlso: `.application_x_hyphen_ndjson`.
                    internal var application_x_hyphen_ndjson: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_ndjson(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/x-ndjson",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiBoardSeek.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiBoardSeek.Output.Ok.Headers = .init(),
                    body: Operations.apiBoardSeek.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The seek was successfully created.
            ///
            /// - Remark: Generated from `#/paths//api/board/seek/post(apiBoardSeek)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiBoardSeek.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiBoardSeek.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/board/seek/POST/responses/400/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/board/seek/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiBoardSeek.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.apiBoardSeek.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// The creation of the seek failed.
            ///
            /// - Remark: Generated from `#/paths//api/board/seek/post(apiBoardSeek)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.apiBoardSeek.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.apiBoardSeek.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case application_x_hyphen_ndjson
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/x-ndjson":
                    self = .application_x_hyphen_ndjson
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .application_x_hyphen_ndjson:
                    return "application/x-ndjson"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .application_x_hyphen_ndjson
                ]
            }
        }
    }
    /// Stream Board game state
    ///
    /// Stream the state of a game being played with the Board API, as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    ///
    /// Use this endpoint to get updates about the game in real-time, with a single request.
    ///
    /// Each line is a JSON object containing a `type` field. Possible values are:
    ///   - `gameFull` Full game data. All values are immutable, except for the `state` field.
    ///   - `gameState` Current state of the game. Immutable values not included. Sent when a move is played, a draw is offered, or when the game ends.
    ///   - `chatLine` Chat message sent by a user in the `room` "player" or "spectator".
    ///   - `opponentGone` Whether the opponent has left the game, and how long before you can claim a win or draw.
    ///
    /// The first line is always of type `gameFull`.
    ///
    /// The server closes the stream when the game ends, or if the game has already ended.
    ///
    ///
    /// - Remark: HTTP `GET /api/board/game/stream/{gameId}`.
    /// - Remark: Generated from `#/paths//api/board/game/stream/{gameId}/get(boardGameStream)`.
    internal enum boardGameStream {
        internal static let id: Swift.String = "boardGameStream"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/board/game/stream/{gameId}/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/board/game/stream/{gameId}/GET/path/gameId`.
                internal var gameId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - gameId:
                internal init(gameId: Swift.String) {
                    self.gameId = gameId
                }
            }
            internal var path: Operations.boardGameStream.Input.Path
            /// - Remark: Generated from `#/paths/api/board/game/stream/{gameId}/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.boardGameStream.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.boardGameStream.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.boardGameStream.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.boardGameStream.Input.Path,
                headers: Operations.boardGameStream.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/board/game/stream/{gameId}/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/board/game/stream/{gameId}/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.boardGameStream.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/board/game/stream/{gameId}/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/board/game/stream/{gameId}/GET/responses/200/content/application\/x-ndjson`.
                    case application_x_hyphen_ndjson(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_ndjson`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_ndjson`.
                    /// - SeeAlso: `.application_x_hyphen_ndjson`.
                    internal var application_x_hyphen_ndjson: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_ndjson(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.boardGameStream.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.boardGameStream.Output.Ok.Headers = .init(),
                    body: Operations.boardGameStream.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The stream of the game.
            ///
            /// - Remark: Generated from `#/paths//api/board/game/stream/{gameId}/get(boardGameStream)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.boardGameStream.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.boardGameStream.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/board/game/stream/{gameId}/GET/responses/404/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/board/game/stream/{gameId}/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.NotFound)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.NotFound {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.boardGameStream.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.boardGameStream.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// The game was not found.
            ///
            /// - Remark: Generated from `#/paths//api/board/game/stream/{gameId}/get(boardGameStream)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.boardGameStream.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Operations.boardGameStream.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_ndjson
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-ndjson":
                    self = .application_x_hyphen_ndjson
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_ndjson:
                    return "application/x-ndjson"
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .application_x_hyphen_ndjson,
                    .json
                ]
            }
        }
    }
    /// Make a Board move
    ///
    /// Make a move in a game being played with the Board API.
    /// The move can also contain a draw offer/agreement.
    ///
    ///
    /// - Remark: HTTP `POST /api/board/game/{gameId}/move/{move}`.
    /// - Remark: Generated from `#/paths//api/board/game/{gameId}/move/{move}/post(boardGameMove)`.
    internal enum boardGameMove {
        internal static let id: Swift.String = "boardGameMove"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/board/game/{gameId}/move/{move}/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/move/{move}/POST/path/gameId`.
                internal var gameId: Swift.String
                /// The move to play, in UCI format
                ///
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/move/{move}/POST/path/move`.
                internal var move: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - gameId:
                ///   - move: The move to play, in UCI format
                internal init(
                    gameId: Swift.String,
                    move: Swift.String
                ) {
                    self.gameId = gameId
                    self.move = move
                }
            }
            internal var path: Operations.boardGameMove.Input.Path
            /// - Remark: Generated from `#/paths/api/board/game/{gameId}/move/{move}/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// Whether to offer (or agree to) a draw
                ///
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/move/{move}/POST/query/offeringDraw`.
                internal var offeringDraw: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - offeringDraw: Whether to offer (or agree to) a draw
                internal init(offeringDraw: Swift.Bool? = nil) {
                    self.offeringDraw = offeringDraw
                }
            }
            internal var query: Operations.boardGameMove.Input.Query
            /// - Remark: Generated from `#/paths/api/board/game/{gameId}/move/{move}/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.boardGameMove.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.boardGameMove.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.boardGameMove.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.boardGameMove.Input.Path,
                query: Operations.boardGameMove.Input.Query = .init(),
                headers: Operations.boardGameMove.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/move/{move}/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/board/game/{gameId}/move/{move}/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.boardGameMove.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/move/{move}/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/board/game/{gameId}/move/{move}/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.boardGameMove.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.boardGameMove.Output.Ok.Headers = .init(),
                    body: Operations.boardGameMove.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The move was successfully made.
            ///
            /// - Remark: Generated from `#/paths//api/board/game/{gameId}/move/{move}/post(boardGameMove)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.boardGameMove.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.boardGameMove.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/move/{move}/POST/responses/400/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/board/game/{gameId}/move/{move}/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.boardGameMove.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.boardGameMove.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// The move failed.
            ///
            /// - Remark: Generated from `#/paths//api/board/game/{gameId}/move/{move}/post(boardGameMove)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.boardGameMove.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.boardGameMove.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Fetch the game chat
    ///
    /// Get the messages posted in the game chat
    ///
    ///
    /// - Remark: HTTP `GET /api/board/game/{gameId}/chat`.
    /// - Remark: Generated from `#/paths//api/board/game/{gameId}/chat/get(boardGameChatGet)`.
    internal enum boardGameChatGet {
        internal static let id: Swift.String = "boardGameChatGet"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/board/game/{gameId}/chat/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/chat/GET/path/gameId`.
                internal var gameId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - gameId:
                internal init(gameId: Swift.String) {
                    self.gameId = gameId
                }
            }
            internal var path: Operations.boardGameChatGet.Input.Path
            /// - Remark: Generated from `#/paths/api/board/game/{gameId}/chat/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.boardGameChatGet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.boardGameChatGet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.boardGameChatGet.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.boardGameChatGet.Input.Path,
                headers: Operations.boardGameChatGet.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/chat/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/board/game/{gameId}/chat/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.boardGameChatGet.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/chat/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/board/game/{gameId}/chat/GET/responses/200/content/application\/x-ndjson`.
                    case application_x_hyphen_ndjson(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_ndjson`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_ndjson`.
                    /// - SeeAlso: `.application_x_hyphen_ndjson`.
                    internal var application_x_hyphen_ndjson: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_ndjson(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.boardGameChatGet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.boardGameChatGet.Output.Ok.Headers = .init(),
                    body: Operations.boardGameChatGet.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The messages posted in the chat.
            ///
            /// - Remark: Generated from `#/paths//api/board/game/{gameId}/chat/get(boardGameChatGet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.boardGameChatGet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.boardGameChatGet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_ndjson
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-ndjson":
                    self = .application_x_hyphen_ndjson
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_ndjson:
                    return "application/x-ndjson"
                }
            }
            internal static var allCases: [Self] {
                [
                    .application_x_hyphen_ndjson
                ]
            }
        }
    }
    /// Write in the chat
    ///
    /// Post a message to the player or spectator chat, in a game being played with the Board API.
    ///
    ///
    /// - Remark: HTTP `POST /api/board/game/{gameId}/chat`.
    /// - Remark: Generated from `#/paths//api/board/game/{gameId}/chat/post(boardGameChatPost)`.
    internal enum boardGameChatPost {
        internal static let id: Swift.String = "boardGameChatPost"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/board/game/{gameId}/chat/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/chat/POST/path/gameId`.
                internal var gameId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - gameId:
                internal init(gameId: Swift.String) {
                    self.gameId = gameId
                }
            }
            internal var path: Operations.boardGameChatPost.Input.Path
            /// - Remark: Generated from `#/paths/api/board/game/{gameId}/chat/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.boardGameChatPost.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.boardGameChatPost.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.boardGameChatPost.Input.Headers
            /// - Remark: Generated from `#/paths/api/board/game/{gameId}/chat/POST/requestBody`.
            @frozen internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/chat/POST/requestBody/urlEncodedForm`.
                internal struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/api/board/game/{gameId}/chat/POST/requestBody/urlEncodedForm/room`.
                    @frozen internal enum roomPayload: String, Codable, Hashable, Sendable {
                        case player = "player"
                        case spectator = "spectator"
                    }
                    /// - Remark: Generated from `#/paths/api/board/game/{gameId}/chat/POST/requestBody/urlEncodedForm/room`.
                    internal var room: Operations.boardGameChatPost.Input.Body.urlEncodedFormPayload.roomPayload
                    /// - Remark: Generated from `#/paths/api/board/game/{gameId}/chat/POST/requestBody/urlEncodedForm/text`.
                    internal var text: Swift.String
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - room:
                    ///   - text:
                    internal init(
                        room: Operations.boardGameChatPost.Input.Body.urlEncodedFormPayload.roomPayload,
                        text: Swift.String
                    ) {
                        self.room = room
                        self.text = text
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case room
                        case text
                    }
                }
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/chat/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.boardGameChatPost.Input.Body.urlEncodedFormPayload)
            }
            internal var body: Operations.boardGameChatPost.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.boardGameChatPost.Input.Path,
                headers: Operations.boardGameChatPost.Input.Headers = .init(),
                body: Operations.boardGameChatPost.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/chat/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/board/game/{gameId}/chat/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.boardGameChatPost.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/chat/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/board/game/{gameId}/chat/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.boardGameChatPost.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.boardGameChatPost.Output.Ok.Headers = .init(),
                    body: Operations.boardGameChatPost.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The message was successfully posted in the chat.
            ///
            /// - Remark: Generated from `#/paths//api/board/game/{gameId}/chat/post(boardGameChatPost)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.boardGameChatPost.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.boardGameChatPost.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/chat/POST/responses/400/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/board/game/{gameId}/chat/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.boardGameChatPost.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.boardGameChatPost.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// The posting of the message in the chat failed.
            ///
            /// - Remark: Generated from `#/paths//api/board/game/{gameId}/chat/post(boardGameChatPost)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.boardGameChatPost.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.boardGameChatPost.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Abort a game
    ///
    /// Abort a game being played with the Board API.
    ///
    ///
    /// - Remark: HTTP `POST /api/board/game/{gameId}/abort`.
    /// - Remark: Generated from `#/paths//api/board/game/{gameId}/abort/post(boardGameAbort)`.
    internal enum boardGameAbort {
        internal static let id: Swift.String = "boardGameAbort"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/board/game/{gameId}/abort/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/abort/POST/path/gameId`.
                internal var gameId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - gameId:
                internal init(gameId: Swift.String) {
                    self.gameId = gameId
                }
            }
            internal var path: Operations.boardGameAbort.Input.Path
            /// - Remark: Generated from `#/paths/api/board/game/{gameId}/abort/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.boardGameAbort.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.boardGameAbort.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.boardGameAbort.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.boardGameAbort.Input.Path,
                headers: Operations.boardGameAbort.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/abort/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/board/game/{gameId}/abort/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.boardGameAbort.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/abort/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/board/game/{gameId}/abort/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.boardGameAbort.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.boardGameAbort.Output.Ok.Headers = .init(),
                    body: Operations.boardGameAbort.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The game successfully aborted.
            ///
            /// - Remark: Generated from `#/paths//api/board/game/{gameId}/abort/post(boardGameAbort)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.boardGameAbort.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.boardGameAbort.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/abort/POST/responses/400/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/board/game/{gameId}/abort/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.boardGameAbort.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.boardGameAbort.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// The abortion of the game failed.
            ///
            /// - Remark: Generated from `#/paths//api/board/game/{gameId}/abort/post(boardGameAbort)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.boardGameAbort.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.boardGameAbort.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Resign a game
    ///
    /// Resign a game being played with the Board API.
    ///
    ///
    /// - Remark: HTTP `POST /api/board/game/{gameId}/resign`.
    /// - Remark: Generated from `#/paths//api/board/game/{gameId}/resign/post(boardGameResign)`.
    internal enum boardGameResign {
        internal static let id: Swift.String = "boardGameResign"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/board/game/{gameId}/resign/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/resign/POST/path/gameId`.
                internal var gameId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - gameId:
                internal init(gameId: Swift.String) {
                    self.gameId = gameId
                }
            }
            internal var path: Operations.boardGameResign.Input.Path
            /// - Remark: Generated from `#/paths/api/board/game/{gameId}/resign/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.boardGameResign.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.boardGameResign.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.boardGameResign.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.boardGameResign.Input.Path,
                headers: Operations.boardGameResign.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/resign/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/board/game/{gameId}/resign/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.boardGameResign.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/resign/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/board/game/{gameId}/resign/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.boardGameResign.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.boardGameResign.Output.Ok.Headers = .init(),
                    body: Operations.boardGameResign.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The game was successfully resigned.
            ///
            /// - Remark: Generated from `#/paths//api/board/game/{gameId}/resign/post(boardGameResign)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.boardGameResign.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.boardGameResign.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/resign/POST/responses/400/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/board/game/{gameId}/resign/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.boardGameResign.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.boardGameResign.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// The resigning from the game failed.
            ///
            /// - Remark: Generated from `#/paths//api/board/game/{gameId}/resign/post(boardGameResign)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.boardGameResign.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.boardGameResign.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Handle draw offers
    ///
    /// Create/accept/decline draw offers.
    /// - `yes`: Offer a draw, or accept the opponent's draw offer.
    /// - `no`: Decline a draw offer from the opponent.
    ///
    ///
    /// - Remark: HTTP `POST /api/board/game/{gameId}/draw/{accept}`.
    /// - Remark: Generated from `#/paths//api/board/game/{gameId}/draw/{accept}/post(boardGameDraw)`.
    internal enum boardGameDraw {
        internal static let id: Swift.String = "boardGameDraw"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/board/game/{gameId}/draw/{accept}/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/draw/{accept}/POST/path/gameId`.
                internal var gameId: Swift.String
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/draw/{accept}/POST/path/accept`.
                internal struct acceptPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/api/board/game/{gameId}/draw/{accept}/POST/path/accept/value1`.
                    internal var value1: Swift.Bool?
                    /// - Remark: Generated from `#/paths/api/board/game/{gameId}/draw/{accept}/POST/path/accept/value2`.
                    @frozen internal enum Value2Payload: String, Codable, Hashable, Sendable {
                        case yes = "yes"
                    }
                    /// - Remark: Generated from `#/paths/api/board/game/{gameId}/draw/{accept}/POST/path/accept/value2`.
                    internal var value2: Operations.boardGameDraw.Input.Path.acceptPayload.Value2Payload?
                    /// Creates a new `acceptPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    ///   - value2:
                    internal init(
                        value1: Swift.Bool? = nil,
                        value2: Operations.boardGameDraw.Input.Path.acceptPayload.Value2Payload? = nil
                    ) {
                        self.value1 = value1
                        self.value2 = value2
                    }
                    internal init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            value1 = try decoder.decodeFromSingleValueContainer()
                        } catch {
                            errors.append(error)
                        }
                        do {
                            value2 = try decoder.decodeFromSingleValueContainer()
                        } catch {
                            errors.append(error)
                        }
                        try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                            [
                                value1,
                                value2
                            ],
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    internal func encode(to encoder: any Encoder) throws {
                        try encoder.encodeFirstNonNilValueToSingleValueContainer([
                            value1,
                            value2
                        ])
                    }
                }
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/draw/{accept}/POST/path/accept`.
                internal var accept: Operations.boardGameDraw.Input.Path.acceptPayload
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - gameId:
                ///   - accept:
                internal init(
                    gameId: Swift.String,
                    accept: Operations.boardGameDraw.Input.Path.acceptPayload
                ) {
                    self.gameId = gameId
                    self.accept = accept
                }
            }
            internal var path: Operations.boardGameDraw.Input.Path
            /// - Remark: Generated from `#/paths/api/board/game/{gameId}/draw/{accept}/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.boardGameDraw.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.boardGameDraw.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.boardGameDraw.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.boardGameDraw.Input.Path,
                headers: Operations.boardGameDraw.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/draw/{accept}/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/board/game/{gameId}/draw/{accept}/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.boardGameDraw.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/draw/{accept}/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/board/game/{gameId}/draw/{accept}/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.boardGameDraw.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.boardGameDraw.Output.Ok.Headers = .init(),
                    body: Operations.boardGameDraw.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The draw offer was successfully sent.
            ///
            /// - Remark: Generated from `#/paths//api/board/game/{gameId}/draw/{accept}/post(boardGameDraw)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.boardGameDraw.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.boardGameDraw.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/draw/{accept}/POST/responses/400/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/board/game/{gameId}/draw/{accept}/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.boardGameDraw.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.boardGameDraw.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// The draw offering failed.
            ///
            /// - Remark: Generated from `#/paths//api/board/game/{gameId}/draw/{accept}/post(boardGameDraw)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.boardGameDraw.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.boardGameDraw.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Handle takeback offers
    ///
    /// Create/accept/decline takebacks.
    /// - `yes`: Propose a takeback, or accept the opponent's takeback offer.
    /// - `no`: Decline a takeback offer from the opponent.
    ///
    ///
    /// - Remark: HTTP `POST /api/board/game/{gameId}/takeback/{accept}`.
    /// - Remark: Generated from `#/paths//api/board/game/{gameId}/takeback/{accept}/post(boardGameTakeback)`.
    internal enum boardGameTakeback {
        internal static let id: Swift.String = "boardGameTakeback"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/board/game/{gameId}/takeback/{accept}/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/takeback/{accept}/POST/path/gameId`.
                internal var gameId: Swift.String
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/takeback/{accept}/POST/path/accept`.
                internal struct acceptPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/api/board/game/{gameId}/takeback/{accept}/POST/path/accept/value1`.
                    internal var value1: Swift.Bool?
                    /// - Remark: Generated from `#/paths/api/board/game/{gameId}/takeback/{accept}/POST/path/accept/value2`.
                    @frozen internal enum Value2Payload: String, Codable, Hashable, Sendable {
                        case yes = "yes"
                    }
                    /// - Remark: Generated from `#/paths/api/board/game/{gameId}/takeback/{accept}/POST/path/accept/value2`.
                    internal var value2: Operations.boardGameTakeback.Input.Path.acceptPayload.Value2Payload?
                    /// Creates a new `acceptPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    ///   - value2:
                    internal init(
                        value1: Swift.Bool? = nil,
                        value2: Operations.boardGameTakeback.Input.Path.acceptPayload.Value2Payload? = nil
                    ) {
                        self.value1 = value1
                        self.value2 = value2
                    }
                    internal init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            value1 = try decoder.decodeFromSingleValueContainer()
                        } catch {
                            errors.append(error)
                        }
                        do {
                            value2 = try decoder.decodeFromSingleValueContainer()
                        } catch {
                            errors.append(error)
                        }
                        try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                            [
                                value1,
                                value2
                            ],
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    internal func encode(to encoder: any Encoder) throws {
                        try encoder.encodeFirstNonNilValueToSingleValueContainer([
                            value1,
                            value2
                        ])
                    }
                }
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/takeback/{accept}/POST/path/accept`.
                internal var accept: Operations.boardGameTakeback.Input.Path.acceptPayload
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - gameId:
                ///   - accept:
                internal init(
                    gameId: Swift.String,
                    accept: Operations.boardGameTakeback.Input.Path.acceptPayload
                ) {
                    self.gameId = gameId
                    self.accept = accept
                }
            }
            internal var path: Operations.boardGameTakeback.Input.Path
            /// - Remark: Generated from `#/paths/api/board/game/{gameId}/takeback/{accept}/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.boardGameTakeback.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.boardGameTakeback.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.boardGameTakeback.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.boardGameTakeback.Input.Path,
                headers: Operations.boardGameTakeback.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/takeback/{accept}/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/board/game/{gameId}/takeback/{accept}/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.boardGameTakeback.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/takeback/{accept}/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/board/game/{gameId}/takeback/{accept}/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.boardGameTakeback.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.boardGameTakeback.Output.Ok.Headers = .init(),
                    body: Operations.boardGameTakeback.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The takeback offer was successfully sent.
            ///
            /// - Remark: Generated from `#/paths//api/board/game/{gameId}/takeback/{accept}/post(boardGameTakeback)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.boardGameTakeback.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.boardGameTakeback.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/takeback/{accept}/POST/responses/400/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/board/game/{gameId}/takeback/{accept}/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.boardGameTakeback.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.boardGameTakeback.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// The takeback offering failed.
            ///
            /// - Remark: Generated from `#/paths//api/board/game/{gameId}/takeback/{accept}/post(boardGameTakeback)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.boardGameTakeback.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.boardGameTakeback.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Claim victory of a game
    ///
    /// Claim victory when the opponent has left the game for a while.
    ///
    ///
    /// - Remark: HTTP `POST /api/board/game/{gameId}/claim-victory`.
    /// - Remark: Generated from `#/paths//api/board/game/{gameId}/claim-victory/post(boardGameClaimVictory)`.
    internal enum boardGameClaimVictory {
        internal static let id: Swift.String = "boardGameClaimVictory"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/board/game/{gameId}/claim-victory/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/claim-victory/POST/path/gameId`.
                internal var gameId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - gameId:
                internal init(gameId: Swift.String) {
                    self.gameId = gameId
                }
            }
            internal var path: Operations.boardGameClaimVictory.Input.Path
            /// - Remark: Generated from `#/paths/api/board/game/{gameId}/claim-victory/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.boardGameClaimVictory.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.boardGameClaimVictory.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.boardGameClaimVictory.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.boardGameClaimVictory.Input.Path,
                headers: Operations.boardGameClaimVictory.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/claim-victory/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/board/game/{gameId}/claim-victory/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.boardGameClaimVictory.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/claim-victory/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/board/game/{gameId}/claim-victory/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.boardGameClaimVictory.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.boardGameClaimVictory.Output.Ok.Headers = .init(),
                    body: Operations.boardGameClaimVictory.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The victory was successfully claimed.
            ///
            /// - Remark: Generated from `#/paths//api/board/game/{gameId}/claim-victory/post(boardGameClaimVictory)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.boardGameClaimVictory.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.boardGameClaimVictory.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/claim-victory/POST/responses/400/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/board/game/{gameId}/claim-victory/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.boardGameClaimVictory.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.boardGameClaimVictory.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// The victory claim has failed.
            ///
            /// - Remark: Generated from `#/paths//api/board/game/{gameId}/claim-victory/post(boardGameClaimVictory)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.boardGameClaimVictory.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.boardGameClaimVictory.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Claim draw of a game
    ///
    /// Claim draw when the opponent has left the game for a while.
    ///
    ///
    /// - Remark: HTTP `POST /api/board/game/{gameId}/claim-draw`.
    /// - Remark: Generated from `#/paths//api/board/game/{gameId}/claim-draw/post(boardGameClaimDraw)`.
    internal enum boardGameClaimDraw {
        internal static let id: Swift.String = "boardGameClaimDraw"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/board/game/{gameId}/claim-draw/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/claim-draw/POST/path/gameId`.
                internal var gameId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - gameId:
                internal init(gameId: Swift.String) {
                    self.gameId = gameId
                }
            }
            internal var path: Operations.boardGameClaimDraw.Input.Path
            /// - Remark: Generated from `#/paths/api/board/game/{gameId}/claim-draw/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.boardGameClaimDraw.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.boardGameClaimDraw.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.boardGameClaimDraw.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.boardGameClaimDraw.Input.Path,
                headers: Operations.boardGameClaimDraw.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/claim-draw/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/board/game/{gameId}/claim-draw/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.boardGameClaimDraw.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/claim-draw/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/board/game/{gameId}/claim-draw/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.boardGameClaimDraw.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.boardGameClaimDraw.Output.Ok.Headers = .init(),
                    body: Operations.boardGameClaimDraw.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The draw was successfully claimed.
            ///
            /// - Remark: Generated from `#/paths//api/board/game/{gameId}/claim-draw/post(boardGameClaimDraw)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.boardGameClaimDraw.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.boardGameClaimDraw.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/claim-draw/POST/responses/400/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/board/game/{gameId}/claim-draw/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.boardGameClaimDraw.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.boardGameClaimDraw.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// The draw claim has failed.
            ///
            /// - Remark: Generated from `#/paths//api/board/game/{gameId}/claim-draw/post(boardGameClaimDraw)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.boardGameClaimDraw.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.boardGameClaimDraw.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Berserk a tournament game
    ///
    /// Go berserk on an arena tournament game. Halves the clock time, grants an extra point upon winning.
    /// Only available in arena tournaments that allow berserk, and before each player has made a move.
    ///
    ///
    /// - Remark: HTTP `POST /api/board/game/{gameId}/berserk`.
    /// - Remark: Generated from `#/paths//api/board/game/{gameId}/berserk/post(boardGameBerserk)`.
    internal enum boardGameBerserk {
        internal static let id: Swift.String = "boardGameBerserk"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/board/game/{gameId}/berserk/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/berserk/POST/path/gameId`.
                internal var gameId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - gameId:
                internal init(gameId: Swift.String) {
                    self.gameId = gameId
                }
            }
            internal var path: Operations.boardGameBerserk.Input.Path
            /// - Remark: Generated from `#/paths/api/board/game/{gameId}/berserk/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.boardGameBerserk.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.boardGameBerserk.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.boardGameBerserk.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.boardGameBerserk.Input.Path,
                headers: Operations.boardGameBerserk.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/berserk/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/board/game/{gameId}/berserk/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.boardGameBerserk.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/berserk/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/board/game/{gameId}/berserk/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.boardGameBerserk.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.boardGameBerserk.Output.Ok.Headers = .init(),
                    body: Operations.boardGameBerserk.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The player successfully went berserk.
            ///
            /// - Remark: Generated from `#/paths//api/board/game/{gameId}/berserk/post(boardGameBerserk)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.boardGameBerserk.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.boardGameBerserk.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/board/game/{gameId}/berserk/POST/responses/400/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/board/game/{gameId}/berserk/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.boardGameBerserk.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.boardGameBerserk.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// The berserk has failed.
            ///
            /// - Remark: Generated from `#/paths//api/board/game/{gameId}/berserk/post(boardGameBerserk)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.boardGameBerserk.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.boardGameBerserk.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get online bots
    ///
    /// Stream the [online bot users](https://lichess.org/player/bots), as [ndjson](#section/Introduction/Streaming-with-ND-JSON). Throttled to 50 bot users per second.
    ///
    /// - Remark: HTTP `GET /api/bot/online`.
    /// - Remark: Generated from `#/paths//api/bot/online/get(apiBotOnline)`.
    internal enum apiBotOnline {
        internal static let id: Swift.String = "apiBotOnline"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/bot/online/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// How many bot users to fetch
                ///
                /// - Remark: Generated from `#/paths/api/bot/online/GET/query/nb`.
                internal var nb: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - nb: How many bot users to fetch
                internal init(nb: Swift.Int? = nil) {
                    self.nb = nb
                }
            }
            internal var query: Operations.apiBotOnline.Input.Query
            /// - Remark: Generated from `#/paths/api/bot/online/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiBotOnline.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiBotOnline.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiBotOnline.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.apiBotOnline.Input.Query = .init(),
                headers: Operations.apiBotOnline.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bot/online/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bot/online/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiBotOnline.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/bot/online/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bot/online/GET/responses/200/content/application\/x-ndjson`.
                    case application_x_hyphen_ndjson(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_ndjson`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_ndjson`.
                    /// - SeeAlso: `.application_x_hyphen_ndjson`.
                    internal var application_x_hyphen_ndjson: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_ndjson(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiBotOnline.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiBotOnline.Output.Ok.Headers = .init(),
                    body: Operations.apiBotOnline.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The list of online bot users
            ///
            /// - Remark: Generated from `#/paths//api/bot/online/get(apiBotOnline)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiBotOnline.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiBotOnline.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_ndjson
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-ndjson":
                    self = .application_x_hyphen_ndjson
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_ndjson:
                    return "application/x-ndjson"
                }
            }
            internal static var allCases: [Self] {
                [
                    .application_x_hyphen_ndjson
                ]
            }
        }
    }
    /// Upgrade to Bot account
    ///
    /// Upgrade a lichess player account into a Bot account. Only Bot accounts can use the Bot API.
    /// The account **cannot have played any game** before becoming a Bot account. The upgrade is **irreversible**. The account will only be able to play as a Bot.
    /// To upgrade an account to Bot, use the [official lichess-bot client](https://github.com/lichess-bot-devs/lichess-bot), or follow these steps:
    /// - Create an [API access token](https://lichess.org/account/oauth/token/create?scopes[]=bot:play) with "Play bot moves" permission.
    /// - `curl -d '' https://lichess.org/api/bot/account/upgrade -H "Authorization: Bearer <yourTokenHere>"`
    /// To know if an account has already been upgraded, use the [Get my profile API](#operation/accountMe):
    /// the `title` field should be set to `BOT`.
    ///
    ///
    /// - Remark: HTTP `POST /api/bot/account/upgrade`.
    /// - Remark: Generated from `#/paths//api/bot/account/upgrade/post(botAccountUpgrade)`.
    internal enum botAccountUpgrade {
        internal static let id: Swift.String = "botAccountUpgrade"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/bot/account/upgrade/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.botAccountUpgrade.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.botAccountUpgrade.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.botAccountUpgrade.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            internal init(headers: Operations.botAccountUpgrade.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bot/account/upgrade/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bot/account/upgrade/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.botAccountUpgrade.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/bot/account/upgrade/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bot/account/upgrade/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.botAccountUpgrade.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.botAccountUpgrade.Output.Ok.Headers = .init(),
                    body: Operations.botAccountUpgrade.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The bot account was successfully upgraded.
            ///
            /// - Remark: Generated from `#/paths//api/bot/account/upgrade/post(botAccountUpgrade)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.botAccountUpgrade.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.botAccountUpgrade.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bot/account/upgrade/POST/responses/400/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bot/account/upgrade/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.botAccountUpgrade.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.botAccountUpgrade.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// The upgrade of the bot account failed.
            ///
            /// - Remark: Generated from `#/paths//api/bot/account/upgrade/post(botAccountUpgrade)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.botAccountUpgrade.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.botAccountUpgrade.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Stream Bot game state
    ///
    /// Stream the state of a game being played with the Bot API, as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
    /// Use this endpoint to get updates about the game in real-time, with a single request.
    /// Each line is a JSON object containing a `type` field. Possible values are:
    /// - `gameFull` Full game data. All values are immutable, except for the `state` field.
    /// - `gameState` Current state of the game. Immutable values not included.
    /// - `chatLine` Chat message sent by a user (or the bot itself) in the `room` "player" or "spectator".
    /// - `opponentGone` Whether the opponent has left the game, and how long before you can claim a win or draw.
    /// The first line is always of type `gameFull`.
    ///
    ///
    /// - Remark: HTTP `GET /api/bot/game/stream/{gameId}`.
    /// - Remark: Generated from `#/paths//api/bot/game/stream/{gameId}/get(botGameStream)`.
    internal enum botGameStream {
        internal static let id: Swift.String = "botGameStream"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/bot/game/stream/{gameId}/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bot/game/stream/{gameId}/GET/path/gameId`.
                internal var gameId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - gameId:
                internal init(gameId: Swift.String) {
                    self.gameId = gameId
                }
            }
            internal var path: Operations.botGameStream.Input.Path
            /// - Remark: Generated from `#/paths/api/bot/game/stream/{gameId}/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.botGameStream.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.botGameStream.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.botGameStream.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.botGameStream.Input.Path,
                headers: Operations.botGameStream.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bot/game/stream/{gameId}/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bot/game/stream/{gameId}/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.botGameStream.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/bot/game/stream/{gameId}/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bot/game/stream/{gameId}/GET/responses/200/content/application\/x-ndjson`.
                    case application_x_hyphen_ndjson(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_ndjson`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_ndjson`.
                    /// - SeeAlso: `.application_x_hyphen_ndjson`.
                    internal var application_x_hyphen_ndjson: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_ndjson(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.botGameStream.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.botGameStream.Output.Ok.Headers = .init(),
                    body: Operations.botGameStream.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The stream of the bot game.
            ///
            /// - Remark: Generated from `#/paths//api/bot/game/stream/{gameId}/get(botGameStream)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.botGameStream.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.botGameStream.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bot/game/stream/{gameId}/GET/responses/404/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bot/game/stream/{gameId}/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.NotFound)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.NotFound {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.botGameStream.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.botGameStream.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// The bot game was not found.
            ///
            /// - Remark: Generated from `#/paths//api/bot/game/stream/{gameId}/get(botGameStream)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.botGameStream.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Operations.botGameStream.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_ndjson
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-ndjson":
                    self = .application_x_hyphen_ndjson
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_ndjson:
                    return "application/x-ndjson"
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .application_x_hyphen_ndjson,
                    .json
                ]
            }
        }
    }
    /// Make a Bot move
    ///
    /// Make a move in a game being played with the Bot API.
    /// The move can also contain a draw offer/agreement.
    ///
    ///
    /// - Remark: HTTP `POST /api/bot/game/{gameId}/move/{move}`.
    /// - Remark: Generated from `#/paths//api/bot/game/{gameId}/move/{move}/post(botGameMove)`.
    internal enum botGameMove {
        internal static let id: Swift.String = "botGameMove"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/move/{move}/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/move/{move}/POST/path/gameId`.
                internal var gameId: Swift.String
                /// The move to play, in UCI format
                ///
                /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/move/{move}/POST/path/move`.
                internal var move: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - gameId:
                ///   - move: The move to play, in UCI format
                internal init(
                    gameId: Swift.String,
                    move: Swift.String
                ) {
                    self.gameId = gameId
                    self.move = move
                }
            }
            internal var path: Operations.botGameMove.Input.Path
            /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/move/{move}/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// Whether to offer (or agree to) a draw
                ///
                /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/move/{move}/POST/query/offeringDraw`.
                internal var offeringDraw: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - offeringDraw: Whether to offer (or agree to) a draw
                internal init(offeringDraw: Swift.Bool? = nil) {
                    self.offeringDraw = offeringDraw
                }
            }
            internal var query: Operations.botGameMove.Input.Query
            /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/move/{move}/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.botGameMove.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.botGameMove.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.botGameMove.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.botGameMove.Input.Path,
                query: Operations.botGameMove.Input.Query = .init(),
                headers: Operations.botGameMove.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/move/{move}/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/move/{move}/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.botGameMove.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/move/{move}/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/move/{move}/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.botGameMove.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.botGameMove.Output.Ok.Headers = .init(),
                    body: Operations.botGameMove.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The bot move was successfully made.
            ///
            /// - Remark: Generated from `#/paths//api/bot/game/{gameId}/move/{move}/post(botGameMove)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.botGameMove.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.botGameMove.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/move/{move}/POST/responses/400/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/move/{move}/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.botGameMove.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.botGameMove.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// The bot move failed.
            ///
            /// - Remark: Generated from `#/paths//api/bot/game/{gameId}/move/{move}/post(botGameMove)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.botGameMove.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.botGameMove.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Fetch the game chat
    ///
    /// Get the messages posted in the game chat
    ///
    ///
    /// - Remark: HTTP `GET /api/bot/game/{gameId}/chat`.
    /// - Remark: Generated from `#/paths//api/bot/game/{gameId}/chat/get(botGameChatGet)`.
    internal enum botGameChatGet {
        internal static let id: Swift.String = "botGameChatGet"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/chat/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/chat/GET/path/gameId`.
                internal var gameId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - gameId:
                internal init(gameId: Swift.String) {
                    self.gameId = gameId
                }
            }
            internal var path: Operations.botGameChatGet.Input.Path
            /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/chat/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.botGameChatGet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.botGameChatGet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.botGameChatGet.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.botGameChatGet.Input.Path,
                headers: Operations.botGameChatGet.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/chat/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/chat/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.botGameChatGet.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/chat/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/chat/GET/responses/200/content/application\/x-ndjson`.
                    case application_x_hyphen_ndjson(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_ndjson`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_ndjson`.
                    /// - SeeAlso: `.application_x_hyphen_ndjson`.
                    internal var application_x_hyphen_ndjson: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_ndjson(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.botGameChatGet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.botGameChatGet.Output.Ok.Headers = .init(),
                    body: Operations.botGameChatGet.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The messages posted in the chat.
            ///
            /// - Remark: Generated from `#/paths//api/bot/game/{gameId}/chat/get(botGameChatGet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.botGameChatGet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.botGameChatGet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_ndjson
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-ndjson":
                    self = .application_x_hyphen_ndjson
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_ndjson:
                    return "application/x-ndjson"
                }
            }
            internal static var allCases: [Self] {
                [
                    .application_x_hyphen_ndjson
                ]
            }
        }
    }
    /// Write in the chat
    ///
    /// Post a message to the player or spectator chat, in a game being played with the Bot API.
    ///
    ///
    /// - Remark: HTTP `POST /api/bot/game/{gameId}/chat`.
    /// - Remark: Generated from `#/paths//api/bot/game/{gameId}/chat/post(botGameChat)`.
    internal enum botGameChat {
        internal static let id: Swift.String = "botGameChat"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/chat/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/chat/POST/path/gameId`.
                internal var gameId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - gameId:
                internal init(gameId: Swift.String) {
                    self.gameId = gameId
                }
            }
            internal var path: Operations.botGameChat.Input.Path
            /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/chat/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.botGameChat.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.botGameChat.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.botGameChat.Input.Headers
            /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/chat/POST/requestBody`.
            @frozen internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/chat/POST/requestBody/urlEncodedForm`.
                internal struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/chat/POST/requestBody/urlEncodedForm/room`.
                    @frozen internal enum roomPayload: String, Codable, Hashable, Sendable {
                        case player = "player"
                        case spectator = "spectator"
                    }
                    /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/chat/POST/requestBody/urlEncodedForm/room`.
                    internal var room: Operations.botGameChat.Input.Body.urlEncodedFormPayload.roomPayload
                    /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/chat/POST/requestBody/urlEncodedForm/text`.
                    internal var text: Swift.String
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - room:
                    ///   - text:
                    internal init(
                        room: Operations.botGameChat.Input.Body.urlEncodedFormPayload.roomPayload,
                        text: Swift.String
                    ) {
                        self.room = room
                        self.text = text
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case room
                        case text
                    }
                }
                /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/chat/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.botGameChat.Input.Body.urlEncodedFormPayload)
            }
            internal var body: Operations.botGameChat.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.botGameChat.Input.Path,
                headers: Operations.botGameChat.Input.Headers = .init(),
                body: Operations.botGameChat.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/chat/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/chat/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.botGameChat.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/chat/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/chat/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.botGameChat.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.botGameChat.Output.Ok.Headers = .init(),
                    body: Operations.botGameChat.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The message was successfully posted in chat.
            ///
            /// - Remark: Generated from `#/paths//api/bot/game/{gameId}/chat/post(botGameChat)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.botGameChat.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.botGameChat.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/chat/POST/responses/400/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/chat/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.botGameChat.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.botGameChat.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// The posting of the  message in chat failed.
            ///
            /// - Remark: Generated from `#/paths//api/bot/game/{gameId}/chat/post(botGameChat)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.botGameChat.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.botGameChat.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Abort a game
    ///
    /// Abort a game being played with the Bot API.
    ///
    ///
    /// - Remark: HTTP `POST /api/bot/game/{gameId}/abort`.
    /// - Remark: Generated from `#/paths//api/bot/game/{gameId}/abort/post(botGameAbort)`.
    internal enum botGameAbort {
        internal static let id: Swift.String = "botGameAbort"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/abort/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/abort/POST/path/gameId`.
                internal var gameId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - gameId:
                internal init(gameId: Swift.String) {
                    self.gameId = gameId
                }
            }
            internal var path: Operations.botGameAbort.Input.Path
            /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/abort/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.botGameAbort.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.botGameAbort.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.botGameAbort.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.botGameAbort.Input.Path,
                headers: Operations.botGameAbort.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/abort/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/abort/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.botGameAbort.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/abort/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/abort/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.botGameAbort.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.botGameAbort.Output.Ok.Headers = .init(),
                    body: Operations.botGameAbort.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The game was successfully aborted.
            ///
            /// - Remark: Generated from `#/paths//api/bot/game/{gameId}/abort/post(botGameAbort)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.botGameAbort.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.botGameAbort.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/abort/POST/responses/400/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/abort/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.botGameAbort.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.botGameAbort.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// The abortion of the game failed.
            ///
            /// - Remark: Generated from `#/paths//api/bot/game/{gameId}/abort/post(botGameAbort)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.botGameAbort.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.botGameAbort.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Resign a game
    ///
    /// Resign a game being played with the Bot API.
    ///
    ///
    /// - Remark: HTTP `POST /api/bot/game/{gameId}/resign`.
    /// - Remark: Generated from `#/paths//api/bot/game/{gameId}/resign/post(botGameResign)`.
    internal enum botGameResign {
        internal static let id: Swift.String = "botGameResign"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/resign/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/resign/POST/path/gameId`.
                internal var gameId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - gameId:
                internal init(gameId: Swift.String) {
                    self.gameId = gameId
                }
            }
            internal var path: Operations.botGameResign.Input.Path
            /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/resign/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.botGameResign.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.botGameResign.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.botGameResign.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.botGameResign.Input.Path,
                headers: Operations.botGameResign.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/resign/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/resign/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.botGameResign.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/resign/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/resign/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.botGameResign.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.botGameResign.Output.Ok.Headers = .init(),
                    body: Operations.botGameResign.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The game was successfully resigned from.
            ///
            /// - Remark: Generated from `#/paths//api/bot/game/{gameId}/resign/post(botGameResign)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.botGameResign.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.botGameResign.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/resign/POST/responses/400/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/resign/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.botGameResign.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.botGameResign.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Resigning the game failed.
            ///
            /// - Remark: Generated from `#/paths//api/bot/game/{gameId}/resign/post(botGameResign)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.botGameResign.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.botGameResign.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Handle draw offers
    ///
    /// Create/accept/decline draw offers with the Bot API.
    /// - `yes`: Offer a draw, or accept the opponent's draw offer.
    /// - `no`: Decline a draw offer from the opponent.
    ///
    ///
    /// - Remark: HTTP `POST /api/bot/game/{gameId}/draw/{accept}`.
    /// - Remark: Generated from `#/paths//api/bot/game/{gameId}/draw/{accept}/post(botGameDraw)`.
    internal enum botGameDraw {
        internal static let id: Swift.String = "botGameDraw"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/draw/{accept}/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/draw/{accept}/POST/path/gameId`.
                internal var gameId: Swift.String
                /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/draw/{accept}/POST/path/accept`.
                internal struct acceptPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/draw/{accept}/POST/path/accept/value1`.
                    internal var value1: Swift.Bool?
                    /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/draw/{accept}/POST/path/accept/value2`.
                    @frozen internal enum Value2Payload: String, Codable, Hashable, Sendable {
                        case yes = "yes"
                    }
                    /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/draw/{accept}/POST/path/accept/value2`.
                    internal var value2: Operations.botGameDraw.Input.Path.acceptPayload.Value2Payload?
                    /// Creates a new `acceptPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    ///   - value2:
                    internal init(
                        value1: Swift.Bool? = nil,
                        value2: Operations.botGameDraw.Input.Path.acceptPayload.Value2Payload? = nil
                    ) {
                        self.value1 = value1
                        self.value2 = value2
                    }
                    internal init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            value1 = try decoder.decodeFromSingleValueContainer()
                        } catch {
                            errors.append(error)
                        }
                        do {
                            value2 = try decoder.decodeFromSingleValueContainer()
                        } catch {
                            errors.append(error)
                        }
                        try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                            [
                                value1,
                                value2
                            ],
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    internal func encode(to encoder: any Encoder) throws {
                        try encoder.encodeFirstNonNilValueToSingleValueContainer([
                            value1,
                            value2
                        ])
                    }
                }
                /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/draw/{accept}/POST/path/accept`.
                internal var accept: Operations.botGameDraw.Input.Path.acceptPayload
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - gameId:
                ///   - accept:
                internal init(
                    gameId: Swift.String,
                    accept: Operations.botGameDraw.Input.Path.acceptPayload
                ) {
                    self.gameId = gameId
                    self.accept = accept
                }
            }
            internal var path: Operations.botGameDraw.Input.Path
            /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/draw/{accept}/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.botGameDraw.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.botGameDraw.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.botGameDraw.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.botGameDraw.Input.Path,
                headers: Operations.botGameDraw.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/draw/{accept}/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/draw/{accept}/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.botGameDraw.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/draw/{accept}/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/draw/{accept}/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.botGameDraw.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.botGameDraw.Output.Ok.Headers = .init(),
                    body: Operations.botGameDraw.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The draw offer was successfully sent.
            ///
            /// - Remark: Generated from `#/paths//api/bot/game/{gameId}/draw/{accept}/post(botGameDraw)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.botGameDraw.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.botGameDraw.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/draw/{accept}/POST/responses/400/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/draw/{accept}/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.botGameDraw.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.botGameDraw.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// The draw offering failed.
            ///
            /// - Remark: Generated from `#/paths//api/bot/game/{gameId}/draw/{accept}/post(botGameDraw)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.botGameDraw.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.botGameDraw.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Handle takeback offers
    ///
    /// Create/accept/decline takebacks with the Bot API.
    /// - `yes`: Propose a takeback, or accept the opponent's takeback offer.
    /// - `no`: Decline a takeback offer from the opponent.
    ///
    ///
    /// - Remark: HTTP `POST /api/bot/game/{gameId}/takeback/{accept}`.
    /// - Remark: Generated from `#/paths//api/bot/game/{gameId}/takeback/{accept}/post(botGameTakeback)`.
    internal enum botGameTakeback {
        internal static let id: Swift.String = "botGameTakeback"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/takeback/{accept}/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/takeback/{accept}/POST/path/gameId`.
                internal var gameId: Swift.String
                /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/takeback/{accept}/POST/path/accept`.
                internal struct acceptPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/takeback/{accept}/POST/path/accept/value1`.
                    internal var value1: Swift.Bool?
                    /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/takeback/{accept}/POST/path/accept/value2`.
                    @frozen internal enum Value2Payload: String, Codable, Hashable, Sendable {
                        case yes = "yes"
                    }
                    /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/takeback/{accept}/POST/path/accept/value2`.
                    internal var value2: Operations.botGameTakeback.Input.Path.acceptPayload.Value2Payload?
                    /// Creates a new `acceptPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    ///   - value2:
                    internal init(
                        value1: Swift.Bool? = nil,
                        value2: Operations.botGameTakeback.Input.Path.acceptPayload.Value2Payload? = nil
                    ) {
                        self.value1 = value1
                        self.value2 = value2
                    }
                    internal init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            value1 = try decoder.decodeFromSingleValueContainer()
                        } catch {
                            errors.append(error)
                        }
                        do {
                            value2 = try decoder.decodeFromSingleValueContainer()
                        } catch {
                            errors.append(error)
                        }
                        try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                            [
                                value1,
                                value2
                            ],
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    internal func encode(to encoder: any Encoder) throws {
                        try encoder.encodeFirstNonNilValueToSingleValueContainer([
                            value1,
                            value2
                        ])
                    }
                }
                /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/takeback/{accept}/POST/path/accept`.
                internal var accept: Operations.botGameTakeback.Input.Path.acceptPayload
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - gameId:
                ///   - accept:
                internal init(
                    gameId: Swift.String,
                    accept: Operations.botGameTakeback.Input.Path.acceptPayload
                ) {
                    self.gameId = gameId
                    self.accept = accept
                }
            }
            internal var path: Operations.botGameTakeback.Input.Path
            /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/takeback/{accept}/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.botGameTakeback.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.botGameTakeback.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.botGameTakeback.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.botGameTakeback.Input.Path,
                headers: Operations.botGameTakeback.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/takeback/{accept}/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/takeback/{accept}/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.botGameTakeback.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/takeback/{accept}/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/takeback/{accept}/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.botGameTakeback.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.botGameTakeback.Output.Ok.Headers = .init(),
                    body: Operations.botGameTakeback.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The takeback offer was successfully sent.
            ///
            /// - Remark: Generated from `#/paths//api/bot/game/{gameId}/takeback/{accept}/post(botGameTakeback)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.botGameTakeback.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.botGameTakeback.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/takeback/{accept}/POST/responses/400/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/takeback/{accept}/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.botGameTakeback.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.botGameTakeback.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// The takeback offering failed.
            ///
            /// - Remark: Generated from `#/paths//api/bot/game/{gameId}/takeback/{accept}/post(botGameTakeback)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.botGameTakeback.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.botGameTakeback.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Claim victory of a game
    ///
    /// Claim victory when the opponent has left the game for a while.
    ///
    ///
    /// - Remark: HTTP `POST /api/bot/game/{gameId}/claim-victory`.
    /// - Remark: Generated from `#/paths//api/bot/game/{gameId}/claim-victory/post(botGameClaimVictory)`.
    internal enum botGameClaimVictory {
        internal static let id: Swift.String = "botGameClaimVictory"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/claim-victory/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/claim-victory/POST/path/gameId`.
                internal var gameId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - gameId:
                internal init(gameId: Swift.String) {
                    self.gameId = gameId
                }
            }
            internal var path: Operations.botGameClaimVictory.Input.Path
            /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/claim-victory/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.botGameClaimVictory.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.botGameClaimVictory.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.botGameClaimVictory.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.botGameClaimVictory.Input.Path,
                headers: Operations.botGameClaimVictory.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/claim-victory/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/claim-victory/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.botGameClaimVictory.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/claim-victory/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/claim-victory/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.botGameClaimVictory.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.botGameClaimVictory.Output.Ok.Headers = .init(),
                    body: Operations.botGameClaimVictory.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The victory was successfully claimed.
            ///
            /// - Remark: Generated from `#/paths//api/bot/game/{gameId}/claim-victory/post(botGameClaimVictory)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.botGameClaimVictory.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.botGameClaimVictory.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/claim-victory/POST/responses/400/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/claim-victory/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.botGameClaimVictory.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.botGameClaimVictory.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// The victory claim has failed.
            ///
            /// - Remark: Generated from `#/paths//api/bot/game/{gameId}/claim-victory/post(botGameClaimVictory)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.botGameClaimVictory.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.botGameClaimVictory.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Claim draw of a game
    ///
    /// Claim draw when the opponent has left the game for a while.
    ///
    ///
    /// - Remark: HTTP `POST /api/bot/game/{gameId}/claim-draw`.
    /// - Remark: Generated from `#/paths//api/bot/game/{gameId}/claim-draw/post(botGameClaimDraw)`.
    internal enum botGameClaimDraw {
        internal static let id: Swift.String = "botGameClaimDraw"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/claim-draw/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/claim-draw/POST/path/gameId`.
                internal var gameId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - gameId:
                internal init(gameId: Swift.String) {
                    self.gameId = gameId
                }
            }
            internal var path: Operations.botGameClaimDraw.Input.Path
            /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/claim-draw/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.botGameClaimDraw.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.botGameClaimDraw.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.botGameClaimDraw.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.botGameClaimDraw.Input.Path,
                headers: Operations.botGameClaimDraw.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/claim-draw/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/claim-draw/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.botGameClaimDraw.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/claim-draw/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/claim-draw/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.botGameClaimDraw.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.botGameClaimDraw.Output.Ok.Headers = .init(),
                    body: Operations.botGameClaimDraw.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The draw was successfully claimed.
            ///
            /// - Remark: Generated from `#/paths//api/bot/game/{gameId}/claim-draw/post(botGameClaimDraw)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.botGameClaimDraw.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.botGameClaimDraw.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/claim-draw/POST/responses/400/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bot/game/{gameId}/claim-draw/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.botGameClaimDraw.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.botGameClaimDraw.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// The draw claim has failed.
            ///
            /// - Remark: Generated from `#/paths//api/bot/game/{gameId}/claim-draw/post(botGameClaimDraw)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.botGameClaimDraw.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.botGameClaimDraw.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List your challenges
    ///
    /// Get a list of challenges created by or targeted at you.
    ///
    ///
    /// - Remark: HTTP `GET /api/challenge`.
    /// - Remark: Generated from `#/paths//api/challenge/get(challengeList)`.
    internal enum challengeList {
        internal static let id: Swift.String = "challengeList"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/challenge/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.challengeList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.challengeList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.challengeList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            internal init(headers: Operations.challengeList.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/challenge/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/challenge/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.challengeList.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/challenge/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/challenge/GET/responses/200/content/json`.
                    internal struct jsonPayload: Codable, Hashable, Sendable {
                        /// Incoming challenges i.e. targeted at you
                        ///
                        /// - Remark: Generated from `#/paths/api/challenge/GET/responses/200/content/json/in`.
                        internal var _in: [Components.Schemas.ChallengeJson]?
                        /// Outgoing challenges i.e. created by you
                        ///
                        /// - Remark: Generated from `#/paths/api/challenge/GET/responses/200/content/json/out`.
                        internal var out: [Components.Schemas.ChallengeJson]?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - _in: Incoming challenges i.e. targeted at you
                        ///   - out: Outgoing challenges i.e. created by you
                        internal init(
                            _in: [Components.Schemas.ChallengeJson]? = nil,
                            out: [Components.Schemas.ChallengeJson]? = nil
                        ) {
                            self._in = _in
                            self.out = out
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case _in = "in"
                            case out
                        }
                    }
                    /// - Remark: Generated from `#/paths/api/challenge/GET/responses/200/content/application\/json`.
                    case json(Operations.challengeList.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.challengeList.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.challengeList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.challengeList.Output.Ok.Headers = .init(),
                    body: Operations.challengeList.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The list of challenges created by or targeted at the logged in user.
            ///
            /// - Remark: Generated from `#/paths//api/challenge/get(challengeList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.challengeList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.challengeList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a challenge
    ///
    /// Challenge someone to play. The targeted player can choose to accept or decline.
    /// If the challenge is accepted, you will be notified on the [event stream](#operation/apiStreamEvent)
    /// that a new game has started. The game ID will be the same as the challenge ID.
    /// Challenges for realtime games (not correspondence) expire after 20s if not accepted.
    /// To prevent that, use the `keepAliveStream` flag described below.
    ///
    ///
    /// - Remark: HTTP `POST /api/challenge/{username}`.
    /// - Remark: Generated from `#/paths//api/challenge/{username}/post(challengeCreate)`.
    internal enum challengeCreate {
        internal static let id: Swift.String = "challengeCreate"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/challenge/{username}/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/challenge/{username}/POST/path/username`.
                internal var username: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username:
                internal init(username: Swift.String) {
                    self.username = username
                }
            }
            internal var path: Operations.challengeCreate.Input.Path
            /// - Remark: Generated from `#/paths/api/challenge/{username}/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.challengeCreate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.challengeCreate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.challengeCreate.Input.Headers
            /// - Remark: Generated from `#/paths/api/challenge/{username}/POST/requestBody`.
            @frozen internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/challenge/{username}/POST/requestBody/urlEncodedForm`.
                internal struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/api/challenge/{username}/POST/requestBody/urlEncodedForm/value1`.
                    @frozen internal enum Value1Payload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/api/challenge/{username}/POST/requestBody/urlEncodedForm/value1/case1`.
                        internal struct Case1Payload: Codable, Hashable, Sendable {
                            /// Clock initial time in seconds. If empty, a correspondence game is created. Valid values are 0, 15, 30, 45, 60, 90, and any multiple of 60 up to 10800 (3 hours).
                            ///
                            /// - Remark: Generated from `#/paths/api/challenge/{username}/POST/requestBody/urlEncodedForm/value1/case1/clock.limit`.
                            internal var clock_period_limit: Swift.Double
                            /// Clock increment in seconds. If empty, a correspondence game is created.
                            ///
                            /// - Remark: Generated from `#/paths/api/challenge/{username}/POST/requestBody/urlEncodedForm/value1/case1/clock.increment`.
                            internal var clock_period_increment: Swift.Int
                            /// Creates a new `Case1Payload`.
                            ///
                            /// - Parameters:
                            ///   - clock_period_limit: Clock initial time in seconds. If empty, a correspondence game is created. Valid values are 0, 15, 30, 45, 60, 90, and any multiple of 60 up to 10800 (3 hours).
                            ///   - clock_period_increment: Clock increment in seconds. If empty, a correspondence game is created.
                            internal init(
                                clock_period_limit: Swift.Double,
                                clock_period_increment: Swift.Int
                            ) {
                                self.clock_period_limit = clock_period_limit
                                self.clock_period_increment = clock_period_increment
                            }
                            internal enum CodingKeys: String, CodingKey {
                                case clock_period_limit = "clock.limit"
                                case clock_period_increment = "clock.increment"
                            }
                        }
                        /// - Remark: Generated from `#/paths/api/challenge/{username}/POST/requestBody/urlEncodedForm/value1/case1`.
                        case case1(Operations.challengeCreate.Input.Body.urlEncodedFormPayload.Value1Payload.Case1Payload)
                        /// - Remark: Generated from `#/paths/api/challenge/{username}/POST/requestBody/urlEncodedForm/value1/case2`.
                        internal struct Case2Payload: Codable, Hashable, Sendable {
                            /// Days per move, for correspondence games. Clock settings must be omitted.
                            ///
                            /// - Remark: Generated from `#/paths/api/challenge/{username}/POST/requestBody/urlEncodedForm/value1/case2/days`.
                            @frozen internal enum daysPayload: Int, Codable, Hashable, Sendable {
                                case _1 = 1
                                case _2 = 2
                                case _3 = 3
                                case _5 = 5
                                case _7 = 7
                                case _10 = 10
                                case _14 = 14
                            }
                            /// Days per move, for correspondence games. Clock settings must be omitted.
                            ///
                            /// - Remark: Generated from `#/paths/api/challenge/{username}/POST/requestBody/urlEncodedForm/value1/case2/days`.
                            internal var days: Operations.challengeCreate.Input.Body.urlEncodedFormPayload.Value1Payload.Case2Payload.daysPayload
                            /// Creates a new `Case2Payload`.
                            ///
                            /// - Parameters:
                            ///   - days: Days per move, for correspondence games. Clock settings must be omitted.
                            internal init(days: Operations.challengeCreate.Input.Body.urlEncodedFormPayload.Value1Payload.Case2Payload.daysPayload) {
                                self.days = days
                            }
                            internal enum CodingKeys: String, CodingKey {
                                case days
                            }
                        }
                        /// - Remark: Generated from `#/paths/api/challenge/{username}/POST/requestBody/urlEncodedForm/value1/case2`.
                        case case2(Operations.challengeCreate.Input.Body.urlEncodedFormPayload.Value1Payload.Case2Payload)
                        /// - Remark: Generated from `#/paths/api/challenge/{username}/POST/requestBody/urlEncodedForm/value1/case3`.
                        case case3(OpenAPIRuntime.OpenAPIObjectContainer)
                        internal init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case3(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        internal func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try value.encode(to: encoder)
                            case let .case2(value):
                                try value.encode(to: encoder)
                            case let .case3(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/api/challenge/{username}/POST/requestBody/urlEncodedForm/value1`.
                    internal var value1: Operations.challengeCreate.Input.Body.urlEncodedFormPayload.Value1Payload
                    /// - Remark: Generated from `#/paths/api/challenge/{username}/POST/requestBody/urlEncodedForm/value2`.
                    internal struct Value2Payload: Codable, Hashable, Sendable {
                        /// Game is rated and impacts players ratings
                        ///
                        /// - Remark: Generated from `#/paths/api/challenge/{username}/POST/requestBody/urlEncodedForm/value2/rated`.
                        internal var rated: Swift.Bool?
                        /// Which color you get to play
                        ///
                        /// - Remark: Generated from `#/paths/api/challenge/{username}/POST/requestBody/urlEncodedForm/value2/color`.
                        @frozen internal enum colorPayload: String, Codable, Hashable, Sendable {
                            case random = "random"
                            case white = "white"
                            case black = "black"
                        }
                        /// Which color you get to play
                        ///
                        /// - Remark: Generated from `#/paths/api/challenge/{username}/POST/requestBody/urlEncodedForm/value2/color`.
                        internal var color: Operations.challengeCreate.Input.Body.urlEncodedFormPayload.Value2Payload.colorPayload?
                        /// - Remark: Generated from `#/paths/api/challenge/{username}/POST/requestBody/urlEncodedForm/value2/variant`.
                        internal var variant: Components.Schemas.VariantKey?
                        /// - Remark: Generated from `#/paths/api/challenge/{username}/POST/requestBody/urlEncodedForm/value2/fen`.
                        internal var fen: Components.Schemas.FromPositionFEN?
                        /// If set, the response is streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
                        /// The challenge is kept alive until the connection is closed by the client.
                        /// When the challenge is accepted, declined or canceled, a message of the form `{"done":"accepted"}` is sent,
                        /// then the connection is closed by the server.
                        /// If not set, the response is not streamed, and the challenge expires after 20s if not accepted.
                        ///
                        ///
                        /// - Remark: Generated from `#/paths/api/challenge/{username}/POST/requestBody/urlEncodedForm/value2/keepAliveStream`.
                        internal var keepAliveStream: Swift.Bool?
                        /// Extra game rules separated by commas.
                        /// Example: `noAbort,noRematch`
                        ///
                        ///
                        /// - Remark: Generated from `#/paths/api/challenge/{username}/POST/requestBody/urlEncodedForm/value2/rules`.
                        @frozen internal enum rulesPayload: String, Codable, Hashable, Sendable {
                            case noAbort = "noAbort"
                            case noRematch = "noRematch"
                            case noGiveTime = "noGiveTime"
                            case noClaimWin = "noClaimWin"
                            case noEarlyDraw = "noEarlyDraw"
                        }
                        /// Extra game rules separated by commas.
                        /// Example: `noAbort,noRematch`
                        ///
                        ///
                        /// - Remark: Generated from `#/paths/api/challenge/{username}/POST/requestBody/urlEncodedForm/value2/rules`.
                        internal var rules: Operations.challengeCreate.Input.Body.urlEncodedFormPayload.Value2Payload.rulesPayload?
                        /// Creates a new `Value2Payload`.
                        ///
                        /// - Parameters:
                        ///   - rated: Game is rated and impacts players ratings
                        ///   - color: Which color you get to play
                        ///   - variant:
                        ///   - fen:
                        ///   - keepAliveStream: If set, the response is streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
                        ///   - rules: Extra game rules separated by commas.
                        internal init(
                            rated: Swift.Bool? = nil,
                            color: Operations.challengeCreate.Input.Body.urlEncodedFormPayload.Value2Payload.colorPayload? = nil,
                            variant: Components.Schemas.VariantKey? = nil,
                            fen: Components.Schemas.FromPositionFEN? = nil,
                            keepAliveStream: Swift.Bool? = nil,
                            rules: Operations.challengeCreate.Input.Body.urlEncodedFormPayload.Value2Payload.rulesPayload? = nil
                        ) {
                            self.rated = rated
                            self.color = color
                            self.variant = variant
                            self.fen = fen
                            self.keepAliveStream = keepAliveStream
                            self.rules = rules
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case rated
                            case color
                            case variant
                            case fen
                            case keepAliveStream
                            case rules
                        }
                    }
                    /// - Remark: Generated from `#/paths/api/challenge/{username}/POST/requestBody/urlEncodedForm/value2`.
                    internal var value2: Operations.challengeCreate.Input.Body.urlEncodedFormPayload.Value2Payload
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    ///   - value2:
                    internal init(
                        value1: Operations.challengeCreate.Input.Body.urlEncodedFormPayload.Value1Payload,
                        value2: Operations.challengeCreate.Input.Body.urlEncodedFormPayload.Value2Payload
                    ) {
                        self.value1 = value1
                        self.value2 = value2
                    }
                    internal init(from decoder: any Decoder) throws {
                        value1 = try .init(from: decoder)
                        value2 = try .init(from: decoder)
                    }
                    internal func encode(to encoder: any Encoder) throws {
                        try value1.encode(to: encoder)
                        try value2.encode(to: encoder)
                    }
                }
                /// - Remark: Generated from `#/paths/api/challenge/{username}/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.challengeCreate.Input.Body.urlEncodedFormPayload)
            }
            internal var body: Operations.challengeCreate.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.challengeCreate.Input.Path,
                headers: Operations.challengeCreate.Input.Headers = .init(),
                body: Operations.challengeCreate.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/challenge/{username}/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/challenge/{username}/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.challengeCreate.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/challenge/{username}/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/challenge/{username}/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ChallengeJson)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ChallengeJson {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.challengeCreate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.challengeCreate.Output.Ok.Headers = .init(),
                    body: Operations.challengeCreate.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The challenge was successfully created.
            ///
            /// - Remark: Generated from `#/paths//api/challenge/{username}/post(challengeCreate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.challengeCreate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.challengeCreate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/challenge/{username}/POST/responses/400/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/challenge/{username}/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.challengeCreate.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.challengeCreate.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// The creation of the challenge failed.
            ///
            /// - Remark: Generated from `#/paths//api/challenge/{username}/post(challengeCreate)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.challengeCreate.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.challengeCreate.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Show one challenge
    ///
    /// Get details about a challenge, even if it has been recently accepted, canceled or declined.
    ///
    ///
    /// - Remark: HTTP `GET /api/challenge/{challengeId}/show`.
    /// - Remark: Generated from `#/paths//api/challenge/{challengeId}/show/get(challengeShow)`.
    internal enum challengeShow {
        internal static let id: Swift.String = "challengeShow"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/challenge/{challengeId}/show/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// The challenge ID
                ///
                /// - Remark: Generated from `#/paths/api/challenge/{challengeId}/show/GET/path/challengeId`.
                internal var challengeId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - challengeId: The challenge ID
                internal init(challengeId: Swift.String) {
                    self.challengeId = challengeId
                }
            }
            internal var path: Operations.challengeShow.Input.Path
            /// - Remark: Generated from `#/paths/api/challenge/{challengeId}/show/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.challengeShow.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.challengeShow.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.challengeShow.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.challengeShow.Input.Path,
                headers: Operations.challengeShow.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/challenge/{challengeId}/show/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/challenge/{challengeId}/show/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.challengeShow.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/challenge/{challengeId}/show/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/challenge/{challengeId}/show/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ChallengeJson)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ChallengeJson {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.challengeShow.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.challengeShow.Output.Ok.Headers = .init(),
                    body: Operations.challengeShow.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The challenge for that ID.
            ///
            /// - Remark: Generated from `#/paths//api/challenge/{challengeId}/show/get(challengeShow)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.challengeShow.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.challengeShow.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Accept a challenge
    ///
    /// Accept an incoming challenge.
    /// You should receive a `gameStart` event on the [incoming events stream](#operation/apiStreamEvent).
    ///
    ///
    /// - Remark: HTTP `POST /api/challenge/{challengeId}/accept`.
    /// - Remark: Generated from `#/paths//api/challenge/{challengeId}/accept/post(challengeAccept)`.
    internal enum challengeAccept {
        internal static let id: Swift.String = "challengeAccept"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/challenge/{challengeId}/accept/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/challenge/{challengeId}/accept/POST/path/challengeId`.
                internal var challengeId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - challengeId:
                internal init(challengeId: Swift.String) {
                    self.challengeId = challengeId
                }
            }
            internal var path: Operations.challengeAccept.Input.Path
            /// - Remark: Generated from `#/paths/api/challenge/{challengeId}/accept/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/challenge/{challengeId}/accept/POST/query/color`.
                @frozen internal enum colorPayload: String, Codable, Hashable, Sendable {
                    case white = "white"
                    case black = "black"
                }
                /// Accept challenge as this color (only valid if this is an [open challenge](#challenge/open))
                ///
                /// - Remark: Generated from `#/paths/api/challenge/{challengeId}/accept/POST/query/color`.
                internal var color: Operations.challengeAccept.Input.Query.colorPayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - color: Accept challenge as this color (only valid if this is an [open challenge](#challenge/open))
                internal init(color: Operations.challengeAccept.Input.Query.colorPayload? = nil) {
                    self.color = color
                }
            }
            internal var query: Operations.challengeAccept.Input.Query
            /// - Remark: Generated from `#/paths/api/challenge/{challengeId}/accept/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.challengeAccept.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.challengeAccept.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.challengeAccept.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.challengeAccept.Input.Path,
                query: Operations.challengeAccept.Input.Query = .init(),
                headers: Operations.challengeAccept.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/challenge/{challengeId}/accept/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/challenge/{challengeId}/accept/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.challengeAccept.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/challenge/{challengeId}/accept/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/challenge/{challengeId}/accept/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.challengeAccept.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.challengeAccept.Output.Ok.Headers = .init(),
                    body: Operations.challengeAccept.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The challenge was successfully accepted.
            ///
            /// - Remark: Generated from `#/paths//api/challenge/{challengeId}/accept/post(challengeAccept)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.challengeAccept.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.challengeAccept.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/challenge/{challengeId}/accept/POST/responses/404/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/challenge/{challengeId}/accept/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.NotFound)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.NotFound {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.challengeAccept.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.challengeAccept.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// The challenge to accept was not found.
            ///
            /// - Remark: Generated from `#/paths//api/challenge/{challengeId}/accept/post(challengeAccept)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.challengeAccept.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Operations.challengeAccept.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Decline a challenge
    ///
    /// Decline an incoming challenge.
    ///
    ///
    /// - Remark: HTTP `POST /api/challenge/{challengeId}/decline`.
    /// - Remark: Generated from `#/paths//api/challenge/{challengeId}/decline/post(challengeDecline)`.
    internal enum challengeDecline {
        internal static let id: Swift.String = "challengeDecline"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/challenge/{challengeId}/decline/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/challenge/{challengeId}/decline/POST/path/challengeId`.
                internal var challengeId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - challengeId:
                internal init(challengeId: Swift.String) {
                    self.challengeId = challengeId
                }
            }
            internal var path: Operations.challengeDecline.Input.Path
            /// - Remark: Generated from `#/paths/api/challenge/{challengeId}/decline/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.challengeDecline.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.challengeDecline.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.challengeDecline.Input.Headers
            /// - Remark: Generated from `#/paths/api/challenge/{challengeId}/decline/POST/requestBody`.
            @frozen internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/challenge/{challengeId}/decline/POST/requestBody/urlEncodedForm`.
                internal struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Reason challenge was declined. It will be translated to the player's language. See [the full list in the translation file](https://github.com/ornicar/lila/blob/master/translation/source/challenge.xml#L14).
                    ///
                    /// - Remark: Generated from `#/paths/api/challenge/{challengeId}/decline/POST/requestBody/urlEncodedForm/reason`.
                    @frozen internal enum reasonPayload: String, Codable, Hashable, Sendable {
                        case generic = "generic"
                        case later = "later"
                        case tooFast = "tooFast"
                        case tooSlow = "tooSlow"
                        case timeControl = "timeControl"
                        case rated = "rated"
                        case casual = "casual"
                        case standard = "standard"
                        case variant = "variant"
                        case noBot = "noBot"
                        case onlyBot = "onlyBot"
                    }
                    /// Reason challenge was declined. It will be translated to the player's language. See [the full list in the translation file](https://github.com/ornicar/lila/blob/master/translation/source/challenge.xml#L14).
                    ///
                    /// - Remark: Generated from `#/paths/api/challenge/{challengeId}/decline/POST/requestBody/urlEncodedForm/reason`.
                    internal var reason: Operations.challengeDecline.Input.Body.urlEncodedFormPayload.reasonPayload?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - reason: Reason challenge was declined. It will be translated to the player's language. See [the full list in the translation file](https://github.com/ornicar/lila/blob/master/translation/source/challenge.xml#L14).
                    internal init(reason: Operations.challengeDecline.Input.Body.urlEncodedFormPayload.reasonPayload? = nil) {
                        self.reason = reason
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case reason
                    }
                }
                /// - Remark: Generated from `#/paths/api/challenge/{challengeId}/decline/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.challengeDecline.Input.Body.urlEncodedFormPayload)
            }
            internal var body: Operations.challengeDecline.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.challengeDecline.Input.Path,
                headers: Operations.challengeDecline.Input.Headers = .init(),
                body: Operations.challengeDecline.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/challenge/{challengeId}/decline/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/challenge/{challengeId}/decline/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.challengeDecline.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/challenge/{challengeId}/decline/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/challenge/{challengeId}/decline/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.challengeDecline.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.challengeDecline.Output.Ok.Headers = .init(),
                    body: Operations.challengeDecline.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The challenge was successfully declined.
            ///
            /// - Remark: Generated from `#/paths//api/challenge/{challengeId}/decline/post(challengeDecline)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.challengeDecline.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.challengeDecline.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/challenge/{challengeId}/decline/POST/responses/404/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/challenge/{challengeId}/decline/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.NotFound)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.NotFound {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.challengeDecline.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.challengeDecline.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// The challenge to decline was not found.
            ///
            /// - Remark: Generated from `#/paths//api/challenge/{challengeId}/decline/post(challengeDecline)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.challengeDecline.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Operations.challengeDecline.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Cancel a challenge
    ///
    /// Cancel a challenge you sent, or aborts the game if the challenge was accepted, but the game was not yet played.
    /// Note that the ID of a game is the same as the ID of the challenge that created it.
    /// Works for user challenges and open challenges alike.
    ///
    ///
    /// - Remark: HTTP `POST /api/challenge/{challengeId}/cancel`.
    /// - Remark: Generated from `#/paths//api/challenge/{challengeId}/cancel/post(challengeCancel)`.
    internal enum challengeCancel {
        internal static let id: Swift.String = "challengeCancel"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/challenge/{challengeId}/cancel/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/challenge/{challengeId}/cancel/POST/path/challengeId`.
                internal var challengeId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - challengeId:
                internal init(challengeId: Swift.String) {
                    self.challengeId = challengeId
                }
            }
            internal var path: Operations.challengeCancel.Input.Path
            /// - Remark: Generated from `#/paths/api/challenge/{challengeId}/cancel/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// Optional `challenge:write` token of the opponent. If set, the game can be canceled even if both players have moved.
                ///
                /// - Remark: Generated from `#/paths/api/challenge/{challengeId}/cancel/POST/query/opponentToken`.
                internal var opponentToken: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - opponentToken: Optional `challenge:write` token of the opponent. If set, the game can be canceled even if both players have moved.
                internal init(opponentToken: Swift.String? = nil) {
                    self.opponentToken = opponentToken
                }
            }
            internal var query: Operations.challengeCancel.Input.Query
            /// - Remark: Generated from `#/paths/api/challenge/{challengeId}/cancel/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.challengeCancel.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.challengeCancel.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.challengeCancel.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.challengeCancel.Input.Path,
                query: Operations.challengeCancel.Input.Query = .init(),
                headers: Operations.challengeCancel.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/challenge/{challengeId}/cancel/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/challenge/{challengeId}/cancel/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.challengeCancel.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/challenge/{challengeId}/cancel/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/challenge/{challengeId}/cancel/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.challengeCancel.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.challengeCancel.Output.Ok.Headers = .init(),
                    body: Operations.challengeCancel.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The challenge was successfully cancelled.
            ///
            /// - Remark: Generated from `#/paths//api/challenge/{challengeId}/cancel/post(challengeCancel)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.challengeCancel.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.challengeCancel.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/challenge/{challengeId}/cancel/POST/responses/404/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/challenge/{challengeId}/cancel/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.NotFound)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.NotFound {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.challengeCancel.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.challengeCancel.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// The challenge to cancel was not found.
            ///
            /// - Remark: Generated from `#/paths//api/challenge/{challengeId}/cancel/post(challengeCancel)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.challengeCancel.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Operations.challengeCancel.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Challenge the AI
    ///
    /// Start a game with Lichess AI.
    /// You will be notified on the [event stream](#operation/apiStreamEvent) that a new game has started.
    ///
    ///
    /// - Remark: HTTP `POST /api/challenge/ai`.
    /// - Remark: Generated from `#/paths//api/challenge/ai/post(challengeAi)`.
    internal enum challengeAi {
        internal static let id: Swift.String = "challengeAi"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/challenge/ai/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.challengeAi.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.challengeAi.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.challengeAi.Input.Headers
            /// - Remark: Generated from `#/paths/api/challenge/ai/POST/requestBody`.
            @frozen internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/challenge/ai/POST/requestBody/urlEncodedForm`.
                internal struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// AI strength
                    ///
                    /// - Remark: Generated from `#/paths/api/challenge/ai/POST/requestBody/urlEncodedForm/level`.
                    internal var level: Swift.Double
                    /// Clock initial time in seconds. If empty, a correspondence game is created.
                    ///
                    /// - Remark: Generated from `#/paths/api/challenge/ai/POST/requestBody/urlEncodedForm/clock.limit`.
                    internal var clock_period_limit: Swift.Double?
                    /// Clock increment in seconds. If empty, a correspondence game is created.
                    ///
                    /// - Remark: Generated from `#/paths/api/challenge/ai/POST/requestBody/urlEncodedForm/clock.increment`.
                    internal var clock_period_increment: Swift.Int?
                    /// Days per move, for correspondence games. Clock settings must be omitted.
                    ///
                    /// - Remark: Generated from `#/paths/api/challenge/ai/POST/requestBody/urlEncodedForm/days`.
                    @frozen internal enum daysPayload: Int, Codable, Hashable, Sendable {
                        case _1 = 1
                        case _2 = 2
                        case _3 = 3
                        case _5 = 5
                        case _7 = 7
                        case _10 = 10
                        case _14 = 14
                    }
                    /// Days per move, for correspondence games. Clock settings must be omitted.
                    ///
                    /// - Remark: Generated from `#/paths/api/challenge/ai/POST/requestBody/urlEncodedForm/days`.
                    internal var days: Operations.challengeAi.Input.Body.urlEncodedFormPayload.daysPayload?
                    /// Which color you get to play
                    ///
                    /// - Remark: Generated from `#/paths/api/challenge/ai/POST/requestBody/urlEncodedForm/color`.
                    @frozen internal enum colorPayload: String, Codable, Hashable, Sendable {
                        case random = "random"
                        case white = "white"
                        case black = "black"
                    }
                    /// Which color you get to play
                    ///
                    /// - Remark: Generated from `#/paths/api/challenge/ai/POST/requestBody/urlEncodedForm/color`.
                    internal var color: Operations.challengeAi.Input.Body.urlEncodedFormPayload.colorPayload?
                    /// - Remark: Generated from `#/paths/api/challenge/ai/POST/requestBody/urlEncodedForm/variant`.
                    internal var variant: Components.Schemas.VariantKey?
                    /// - Remark: Generated from `#/paths/api/challenge/ai/POST/requestBody/urlEncodedForm/fen`.
                    internal var fen: Components.Schemas.FromPositionFEN?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - level: AI strength
                    ///   - clock_period_limit: Clock initial time in seconds. If empty, a correspondence game is created.
                    ///   - clock_period_increment: Clock increment in seconds. If empty, a correspondence game is created.
                    ///   - days: Days per move, for correspondence games. Clock settings must be omitted.
                    ///   - color: Which color you get to play
                    ///   - variant:
                    ///   - fen:
                    internal init(
                        level: Swift.Double,
                        clock_period_limit: Swift.Double? = nil,
                        clock_period_increment: Swift.Int? = nil,
                        days: Operations.challengeAi.Input.Body.urlEncodedFormPayload.daysPayload? = nil,
                        color: Operations.challengeAi.Input.Body.urlEncodedFormPayload.colorPayload? = nil,
                        variant: Components.Schemas.VariantKey? = nil,
                        fen: Components.Schemas.FromPositionFEN? = nil
                    ) {
                        self.level = level
                        self.clock_period_limit = clock_period_limit
                        self.clock_period_increment = clock_period_increment
                        self.days = days
                        self.color = color
                        self.variant = variant
                        self.fen = fen
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case level
                        case clock_period_limit = "clock.limit"
                        case clock_period_increment = "clock.increment"
                        case days
                        case color
                        case variant
                        case fen
                    }
                }
                /// - Remark: Generated from `#/paths/api/challenge/ai/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.challengeAi.Input.Body.urlEncodedFormPayload)
            }
            internal var body: Operations.challengeAi.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            internal init(
                headers: Operations.challengeAi.Input.Headers = .init(),
                body: Operations.challengeAi.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/challenge/ai/POST/responses/201/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/challenge/ai/POST/responses/201/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.challengeAi.Output.Created.Headers
                /// - Remark: Generated from `#/paths/api/challenge/ai/POST/responses/201/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/challenge/ai/POST/responses/201/content/json`.
                    internal struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/api/challenge/ai/POST/responses/201/content/json/id`.
                        internal var id: Swift.String?
                        /// - Remark: Generated from `#/paths/api/challenge/ai/POST/responses/201/content/json/variant`.
                        internal var variant: Components.Schemas.Variant?
                        /// - Remark: Generated from `#/paths/api/challenge/ai/POST/responses/201/content/json/speed`.
                        internal var speed: Components.Schemas.Speed?
                        /// - Remark: Generated from `#/paths/api/challenge/ai/POST/responses/201/content/json/perf`.
                        internal var perf: Components.Schemas.PerfType?
                        /// - Remark: Generated from `#/paths/api/challenge/ai/POST/responses/201/content/json/rated`.
                        internal var rated: Swift.Bool?
                        /// - Remark: Generated from `#/paths/api/challenge/ai/POST/responses/201/content/json/fen`.
                        internal var fen: Swift.String?
                        /// - Remark: Generated from `#/paths/api/challenge/ai/POST/responses/201/content/json/turns`.
                        internal var turns: Swift.Int?
                        /// - Remark: Generated from `#/paths/api/challenge/ai/POST/responses/201/content/json/source`.
                        internal var source: Components.Schemas.GameSource?
                        /// - Remark: Generated from `#/paths/api/challenge/ai/POST/responses/201/content/json/status`.
                        internal var status: Components.Schemas.GameStatus?
                        /// - Remark: Generated from `#/paths/api/challenge/ai/POST/responses/201/content/json/createdAt`.
                        internal var createdAt: Swift.Double?
                        /// - Remark: Generated from `#/paths/api/challenge/ai/POST/responses/201/content/json/player`.
                        internal var player: Components.Schemas.GameColor?
                        /// - Remark: Generated from `#/paths/api/challenge/ai/POST/responses/201/content/json/fullId`.
                        internal var fullId: Swift.String?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - id:
                        ///   - variant:
                        ///   - speed:
                        ///   - perf:
                        ///   - rated:
                        ///   - fen:
                        ///   - turns:
                        ///   - source:
                        ///   - status:
                        ///   - createdAt:
                        ///   - player:
                        ///   - fullId:
                        internal init(
                            id: Swift.String? = nil,
                            variant: Components.Schemas.Variant? = nil,
                            speed: Components.Schemas.Speed? = nil,
                            perf: Components.Schemas.PerfType? = nil,
                            rated: Swift.Bool? = nil,
                            fen: Swift.String? = nil,
                            turns: Swift.Int? = nil,
                            source: Components.Schemas.GameSource? = nil,
                            status: Components.Schemas.GameStatus? = nil,
                            createdAt: Swift.Double? = nil,
                            player: Components.Schemas.GameColor? = nil,
                            fullId: Swift.String? = nil
                        ) {
                            self.id = id
                            self.variant = variant
                            self.speed = speed
                            self.perf = perf
                            self.rated = rated
                            self.fen = fen
                            self.turns = turns
                            self.source = source
                            self.status = status
                            self.createdAt = createdAt
                            self.player = player
                            self.fullId = fullId
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case id
                            case variant
                            case speed
                            case perf
                            case rated
                            case fen
                            case turns
                            case source
                            case status
                            case createdAt
                            case player
                            case fullId
                        }
                    }
                    /// - Remark: Generated from `#/paths/api/challenge/ai/POST/responses/201/content/application\/json`.
                    case json(Operations.challengeAi.Output.Created.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.challengeAi.Output.Created.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.challengeAi.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.challengeAi.Output.Created.Headers = .init(),
                    body: Operations.challengeAi.Output.Created.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The game with Lichess AI was successfully started.
            ///
            /// - Remark: Generated from `#/paths//api/challenge/ai/post(challengeAi)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.challengeAi.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            internal var created: Operations.challengeAi.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/challenge/ai/POST/responses/400/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/challenge/ai/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.challengeAi.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.challengeAi.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// The creation of a game with Lichess AI failed.
            ///
            /// - Remark: Generated from `#/paths//api/challenge/ai/post(challengeAi)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.challengeAi.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.challengeAi.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Open-ended challenge
    ///
    /// Create a challenge that any 2 players can join.
    /// Share the URL of the challenge. the first 2 players to click it will be paired for a game.
    /// The response body also contains `whiteUrl` and `blackUrl`.
    /// You can control which color each player gets by giving them these URLs,
    /// instead of the main challenge URL.
    /// Open challenges expire after 24h.
    /// If the challenge creation is [authenticated with OAuth2](#section/Introduction/Authentication),
    /// then you can use the [challenge cancel endpoint](#operation/challengeCancel) to cancel it.
    /// To directly pair 2 known players, use [this endpoint](#operation/bulkPairingList) instead.
    ///
    ///
    /// - Remark: HTTP `POST /api/challenge/open`.
    /// - Remark: Generated from `#/paths//api/challenge/open/post(challengeOpen)`.
    internal enum challengeOpen {
        internal static let id: Swift.String = "challengeOpen"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/challenge/open/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.challengeOpen.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.challengeOpen.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.challengeOpen.Input.Headers
            /// - Remark: Generated from `#/paths/api/challenge/open/POST/requestBody`.
            @frozen internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/challenge/open/POST/requestBody/urlEncodedForm`.
                internal struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Game is rated and impacts players ratings
                    ///
                    /// - Remark: Generated from `#/paths/api/challenge/open/POST/requestBody/urlEncodedForm/rated`.
                    internal var rated: Swift.Bool?
                    /// Clock initial time in seconds. If empty, a correspondence game is created.
                    ///
                    /// - Remark: Generated from `#/paths/api/challenge/open/POST/requestBody/urlEncodedForm/clock.limit`.
                    internal var clock_period_limit: Swift.Double?
                    /// Clock increment in seconds. If empty, a correspondence game is created.
                    ///
                    /// - Remark: Generated from `#/paths/api/challenge/open/POST/requestBody/urlEncodedForm/clock.increment`.
                    internal var clock_period_increment: Swift.Int?
                    /// Days per turn. For correspondence challenges.
                    ///
                    /// - Remark: Generated from `#/paths/api/challenge/open/POST/requestBody/urlEncodedForm/days`.
                    @frozen internal enum daysPayload: Int, Codable, Hashable, Sendable {
                        case _1 = 1
                        case _2 = 2
                        case _3 = 3
                        case _5 = 5
                        case _7 = 7
                        case _10 = 10
                        case _14 = 14
                    }
                    /// Days per turn. For correspondence challenges.
                    ///
                    /// - Remark: Generated from `#/paths/api/challenge/open/POST/requestBody/urlEncodedForm/days`.
                    internal var days: Operations.challengeOpen.Input.Body.urlEncodedFormPayload.daysPayload?
                    /// - Remark: Generated from `#/paths/api/challenge/open/POST/requestBody/urlEncodedForm/variant`.
                    internal var variant: Components.Schemas.VariantKey?
                    /// - Remark: Generated from `#/paths/api/challenge/open/POST/requestBody/urlEncodedForm/fen`.
                    internal var fen: Components.Schemas.FromPositionFEN?
                    /// Optional name for the challenge, that players will see on the challenge page.
                    ///
                    /// - Remark: Generated from `#/paths/api/challenge/open/POST/requestBody/urlEncodedForm/name`.
                    internal var name: Swift.String?
                    /// Extra game rules separated by commas.
                    /// Example: `noRematch,noGiveTime`
                    /// The `noAbort` rule is available for Lichess admins only
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/api/challenge/open/POST/requestBody/urlEncodedForm/rules`.
                    @frozen internal enum rulesPayload: String, Codable, Hashable, Sendable {
                        case noRematch = "noRematch"
                        case noGiveTime = "noGiveTime"
                        case noClaimWin = "noClaimWin"
                        case noEarlyDraw = "noEarlyDraw"
                        case noAbort = "noAbort"
                    }
                    /// Extra game rules separated by commas.
                    /// Example: `noRematch,noGiveTime`
                    /// The `noAbort` rule is available for Lichess admins only
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/api/challenge/open/POST/requestBody/urlEncodedForm/rules`.
                    internal var rules: Operations.challengeOpen.Input.Body.urlEncodedFormPayload.rulesPayload?
                    /// Optional pair of usernames, separated by a comma.
                    /// If set, only these users will be allowed to join the game.
                    /// The first username gets the white pieces.
                    /// Example: `Username1,Username2`
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/api/challenge/open/POST/requestBody/urlEncodedForm/users`.
                    internal var users: Swift.String?
                    /// Timestamp in milliseconds to expire the challenge. Defaults to 24h after creation. Can't be more than 2 weeks after creation.
                    ///
                    /// - Remark: Generated from `#/paths/api/challenge/open/POST/requestBody/urlEncodedForm/expiresAt`.
                    internal var expiresAt: Swift.Int64?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - rated: Game is rated and impacts players ratings
                    ///   - clock_period_limit: Clock initial time in seconds. If empty, a correspondence game is created.
                    ///   - clock_period_increment: Clock increment in seconds. If empty, a correspondence game is created.
                    ///   - days: Days per turn. For correspondence challenges.
                    ///   - variant:
                    ///   - fen:
                    ///   - name: Optional name for the challenge, that players will see on the challenge page.
                    ///   - rules: Extra game rules separated by commas.
                    ///   - users: Optional pair of usernames, separated by a comma.
                    ///   - expiresAt: Timestamp in milliseconds to expire the challenge. Defaults to 24h after creation. Can't be more than 2 weeks after creation.
                    internal init(
                        rated: Swift.Bool? = nil,
                        clock_period_limit: Swift.Double? = nil,
                        clock_period_increment: Swift.Int? = nil,
                        days: Operations.challengeOpen.Input.Body.urlEncodedFormPayload.daysPayload? = nil,
                        variant: Components.Schemas.VariantKey? = nil,
                        fen: Components.Schemas.FromPositionFEN? = nil,
                        name: Swift.String? = nil,
                        rules: Operations.challengeOpen.Input.Body.urlEncodedFormPayload.rulesPayload? = nil,
                        users: Swift.String? = nil,
                        expiresAt: Swift.Int64? = nil
                    ) {
                        self.rated = rated
                        self.clock_period_limit = clock_period_limit
                        self.clock_period_increment = clock_period_increment
                        self.days = days
                        self.variant = variant
                        self.fen = fen
                        self.name = name
                        self.rules = rules
                        self.users = users
                        self.expiresAt = expiresAt
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case rated
                        case clock_period_limit = "clock.limit"
                        case clock_period_increment = "clock.increment"
                        case days
                        case variant
                        case fen
                        case name
                        case rules
                        case users
                        case expiresAt
                    }
                }
                /// - Remark: Generated from `#/paths/api/challenge/open/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.challengeOpen.Input.Body.urlEncodedFormPayload)
            }
            internal var body: Operations.challengeOpen.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            internal init(
                headers: Operations.challengeOpen.Input.Headers = .init(),
                body: Operations.challengeOpen.Input.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/challenge/open/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/challenge/open/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.challengeOpen.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/challenge/open/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/challenge/open/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ChallengeOpenJson)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ChallengeOpenJson {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.challengeOpen.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.challengeOpen.Output.Ok.Headers = .init(),
                    body: Operations.challengeOpen.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The challenge was successfully created.
            ///
            /// - Remark: Generated from `#/paths//api/challenge/open/post(challengeOpen)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.challengeOpen.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.challengeOpen.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/challenge/open/POST/responses/400/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/challenge/open/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.challengeOpen.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.challengeOpen.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// The creation of the challenge failed.
            ///
            /// - Remark: Generated from `#/paths//api/challenge/open/post(challengeOpen)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.challengeOpen.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.challengeOpen.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Start clocks of a game
    ///
    /// Start the clocks of a game immediately, even if a player has not yet made a move.
    /// Requires the OAuth tokens of both players with `challenge:write` scope.
    /// If the clocks have already started, the call will have no effect.
    ///
    /// For AI games with only one player, omit the `token2` parameter.
    ///
    ///
    /// - Remark: HTTP `POST /api/challenge/{gameId}/start-clocks`.
    /// - Remark: Generated from `#/paths//api/challenge/{gameId}/start-clocks/post(challengeStartClocks)`.
    internal enum challengeStartClocks {
        internal static let id: Swift.String = "challengeStartClocks"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/challenge/{gameId}/start-clocks/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/challenge/{gameId}/start-clocks/POST/path/gameId`.
                internal var gameId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - gameId:
                internal init(gameId: Swift.String) {
                    self.gameId = gameId
                }
            }
            internal var path: Operations.challengeStartClocks.Input.Path
            /// - Remark: Generated from `#/paths/api/challenge/{gameId}/start-clocks/POST/query`.
            internal struct Query: Sendable, Hashable {
                /// OAuth token of a player
                ///
                /// - Remark: Generated from `#/paths/api/challenge/{gameId}/start-clocks/POST/query/token1`.
                internal var token1: Swift.String
                /// OAuth token of the other player. Omit for AI games that have only one player.
                ///
                /// - Remark: Generated from `#/paths/api/challenge/{gameId}/start-clocks/POST/query/token2`.
                internal var token2: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - token1: OAuth token of a player
                ///   - token2: OAuth token of the other player. Omit for AI games that have only one player.
                internal init(
                    token1: Swift.String,
                    token2: Swift.String? = nil
                ) {
                    self.token1 = token1
                    self.token2 = token2
                }
            }
            internal var query: Operations.challengeStartClocks.Input.Query
            /// - Remark: Generated from `#/paths/api/challenge/{gameId}/start-clocks/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.challengeStartClocks.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.challengeStartClocks.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.challengeStartClocks.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.challengeStartClocks.Input.Path,
                query: Operations.challengeStartClocks.Input.Query,
                headers: Operations.challengeStartClocks.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/challenge/{gameId}/start-clocks/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/challenge/{gameId}/start-clocks/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.challengeStartClocks.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/challenge/{gameId}/start-clocks/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/challenge/{gameId}/start-clocks/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.challengeStartClocks.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.challengeStartClocks.Output.Ok.Headers = .init(),
                    body: Operations.challengeStartClocks.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The clock of a game was successfully started.
            ///
            /// - Remark: Generated from `#/paths//api/challenge/{gameId}/start-clocks/post(challengeStartClocks)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.challengeStartClocks.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.challengeStartClocks.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// View your bulk pairings
    ///
    /// Get a list of bulk pairings you created.
    ///
    ///
    /// - Remark: HTTP `GET /api/bulk-pairing`.
    /// - Remark: Generated from `#/paths//api/bulk-pairing/get(bulkPairingList)`.
    internal enum bulkPairingList {
        internal static let id: Swift.String = "bulkPairingList"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/bulk-pairing/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.bulkPairingList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.bulkPairingList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.bulkPairingList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            internal init(headers: Operations.bulkPairingList.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bulk-pairing/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bulk-pairing/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.bulkPairingList.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/bulk-pairing/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bulk-pairing/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.BulkPairing])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: [Components.Schemas.BulkPairing] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.bulkPairingList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.bulkPairingList.Output.Ok.Headers = .init(),
                    body: Operations.bulkPairingList.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The list of bulk pairing the logged in user created.
            ///
            /// - Remark: Generated from `#/paths//api/bulk-pairing/get(bulkPairingList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.bulkPairingList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.bulkPairingList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a bulk pairing
    ///
    /// Schedule many games at once, up to 24h in advance.
    /// OAuth tokens are required for all paired players, with the `challenge:write` scope.
    /// You can schedule up to 500 games every 10 minutes. [Contact us](mailto:contact@lichess.org) if you need higher limits.
    /// If games have a real-time clock, each player must have only one pairing.
    /// For correspondence games, players can have multiple pairings within the same bulk.
    ///
    /// **The entire bulk is rejected if:**
    ///   - a token is missing
    ///   - a token is present more than once (except in correspondence)
    ///   - a token lacks the `challenge:write` scope
    ///   - a player account is closed
    ///   - a player is paired more than once (except in correspondence)
    ///   - a bulk is already scheduled to start at the same time with the same player
    ///   - you have 20 scheduled bulks
    ///   - you have 1000 scheduled games
    ///
    /// Partial bulks are never created. Either it all fails, or it all succeeds.
    /// When it fails, it does so with an error message explaining the issue.
    /// Failed bulks are not counted in the rate limiting, they are free.
    /// Fix the issues, manually or programmatically, then retry to schedule the bulk.
    /// A successful bulk creation returns a JSON bulk document. Its ID can be used for further operations.
    ///
    ///
    /// - Remark: HTTP `POST /api/bulk-pairing`.
    /// - Remark: Generated from `#/paths//api/bulk-pairing/post(bulkPairingCreate)`.
    internal enum bulkPairingCreate {
        internal static let id: Swift.String = "bulkPairingCreate"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/bulk-pairing/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.bulkPairingCreate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.bulkPairingCreate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.bulkPairingCreate.Input.Headers
            /// - Remark: Generated from `#/paths/api/bulk-pairing/POST/requestBody`.
            @frozen internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bulk-pairing/POST/requestBody/urlEncodedForm`.
                internal struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// OAuth tokens of all the players to pair, with the syntax `tokenOfWhitePlayerInGame1:tokenOfBlackPlayerInGame1,tokenOfWhitePlayerInGame2:tokenOfBlackPlayerInGame2,...`.
                    /// The 2 tokens of the players of a game are separated with `:`. The first token gets the white pieces. Games are separated with `,`.
                    /// Up to 1000 tokens can be sent, for a max of 500 games.
                    /// Each token must be included at most once.
                    /// Example: `token1:token2,token3:token4,token5:token6`
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/api/bulk-pairing/POST/requestBody/urlEncodedForm/players`.
                    internal var players: Swift.String?
                    /// Clock initial time in seconds. Example: `600`
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/api/bulk-pairing/POST/requestBody/urlEncodedForm/clock.limit`.
                    internal var clock_period_limit: Swift.Double?
                    /// Clock increment in seconds. Example: `2`
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/api/bulk-pairing/POST/requestBody/urlEncodedForm/clock.increment`.
                    internal var clock_period_increment: Swift.Int?
                    /// Days per turn. For correspondence games only.
                    ///
                    /// - Remark: Generated from `#/paths/api/bulk-pairing/POST/requestBody/urlEncodedForm/days`.
                    @frozen internal enum daysPayload: Int, Codable, Hashable, Sendable {
                        case _1 = 1
                        case _2 = 2
                        case _3 = 3
                        case _5 = 5
                        case _7 = 7
                        case _10 = 10
                        case _14 = 14
                    }
                    /// Days per turn. For correspondence games only.
                    ///
                    /// - Remark: Generated from `#/paths/api/bulk-pairing/POST/requestBody/urlEncodedForm/days`.
                    internal var days: Operations.bulkPairingCreate.Input.Body.urlEncodedFormPayload.daysPayload?
                    /// Date at which the games will be created as a Unix timestamp in milliseconds.
                    /// Up to 7 days in the future.
                    /// Omit, or set to current date and time, to start the games immediately.
                    /// Example: `1612289869919`
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/api/bulk-pairing/POST/requestBody/urlEncodedForm/pairAt`.
                    internal var pairAt: Swift.Int64?
                    /// Date at which the clocks will be automatically started as a Unix timestamp in milliseconds.
                    /// Up to 7 days in the future.
                    /// Note that the clocks can start earlier than specified, if players start making moves in the game.
                    /// If omitted, the clocks will not start automatically.
                    /// Example: `1612289869919`
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/api/bulk-pairing/POST/requestBody/urlEncodedForm/startClocksAt`.
                    internal var startClocksAt: Swift.Int64?
                    /// Game is rated and impacts players ratings
                    ///
                    /// - Remark: Generated from `#/paths/api/bulk-pairing/POST/requestBody/urlEncodedForm/rated`.
                    internal var rated: Swift.Bool?
                    /// - Remark: Generated from `#/paths/api/bulk-pairing/POST/requestBody/urlEncodedForm/variant`.
                    internal var variant: Components.Schemas.VariantKey?
                    /// - Remark: Generated from `#/paths/api/bulk-pairing/POST/requestBody/urlEncodedForm/fen`.
                    internal var fen: Components.Schemas.FromPositionFEN?
                    /// Message that will be sent to each player, when the game is created.  It is sent from your user account.
                    /// `{opponent}` and `{game}` are placeholders that will be replaced with the opponent and the game URLs.
                    /// You can omit this field to send the default message,
                    /// but if you set your own message, it must at least contain the `{game}` placeholder.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/api/bulk-pairing/POST/requestBody/urlEncodedForm/message`.
                    internal var message: Swift.String?
                    /// Extra game rules separated by commas.
                    /// Example: `noAbort,noRematch`
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/api/bulk-pairing/POST/requestBody/urlEncodedForm/rules`.
                    @frozen internal enum rulesPayload: String, Codable, Hashable, Sendable {
                        case noAbort = "noAbort"
                        case noRematch = "noRematch"
                        case noGiveTime = "noGiveTime"
                        case noClaimWin = "noClaimWin"
                        case noEarlyDraw = "noEarlyDraw"
                    }
                    /// Extra game rules separated by commas.
                    /// Example: `noAbort,noRematch`
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/api/bulk-pairing/POST/requestBody/urlEncodedForm/rules`.
                    internal var rules: Operations.bulkPairingCreate.Input.Body.urlEncodedFormPayload.rulesPayload?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - players: OAuth tokens of all the players to pair, with the syntax `tokenOfWhitePlayerInGame1:tokenOfBlackPlayerInGame1,tokenOfWhitePlayerInGame2:tokenOfBlackPlayerInGame2,...`.
                    ///   - clock_period_limit: Clock initial time in seconds. Example: `600`
                    ///   - clock_period_increment: Clock increment in seconds. Example: `2`
                    ///   - days: Days per turn. For correspondence games only.
                    ///   - pairAt: Date at which the games will be created as a Unix timestamp in milliseconds.
                    ///   - startClocksAt: Date at which the clocks will be automatically started as a Unix timestamp in milliseconds.
                    ///   - rated: Game is rated and impacts players ratings
                    ///   - variant:
                    ///   - fen:
                    ///   - message: Message that will be sent to each player, when the game is created.  It is sent from your user account.
                    ///   - rules: Extra game rules separated by commas.
                    internal init(
                        players: Swift.String? = nil,
                        clock_period_limit: Swift.Double? = nil,
                        clock_period_increment: Swift.Int? = nil,
                        days: Operations.bulkPairingCreate.Input.Body.urlEncodedFormPayload.daysPayload? = nil,
                        pairAt: Swift.Int64? = nil,
                        startClocksAt: Swift.Int64? = nil,
                        rated: Swift.Bool? = nil,
                        variant: Components.Schemas.VariantKey? = nil,
                        fen: Components.Schemas.FromPositionFEN? = nil,
                        message: Swift.String? = nil,
                        rules: Operations.bulkPairingCreate.Input.Body.urlEncodedFormPayload.rulesPayload? = nil
                    ) {
                        self.players = players
                        self.clock_period_limit = clock_period_limit
                        self.clock_period_increment = clock_period_increment
                        self.days = days
                        self.pairAt = pairAt
                        self.startClocksAt = startClocksAt
                        self.rated = rated
                        self.variant = variant
                        self.fen = fen
                        self.message = message
                        self.rules = rules
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case players
                        case clock_period_limit = "clock.limit"
                        case clock_period_increment = "clock.increment"
                        case days
                        case pairAt
                        case startClocksAt
                        case rated
                        case variant
                        case fen
                        case message
                        case rules
                    }
                }
                /// - Remark: Generated from `#/paths/api/bulk-pairing/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.bulkPairingCreate.Input.Body.urlEncodedFormPayload)
            }
            internal var body: Operations.bulkPairingCreate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            internal init(
                headers: Operations.bulkPairingCreate.Input.Headers = .init(),
                body: Operations.bulkPairingCreate.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bulk-pairing/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bulk-pairing/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.bulkPairingCreate.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/bulk-pairing/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bulk-pairing/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.BulkPairing)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.BulkPairing {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.bulkPairingCreate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.bulkPairingCreate.Output.Ok.Headers = .init(),
                    body: Operations.bulkPairingCreate.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The bulk pairing has been successfully created.
            ///
            /// - Remark: Generated from `#/paths//api/bulk-pairing/post(bulkPairingCreate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.bulkPairingCreate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.bulkPairingCreate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bulk-pairing/POST/responses/400/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bulk-pairing/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.bulkPairingCreate.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.bulkPairingCreate.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// The creation of the bulk pairings failed.
            ///
            /// - Remark: Generated from `#/paths//api/bulk-pairing/post(bulkPairingCreate)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.bulkPairingCreate.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.bulkPairingCreate.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Manually start clocks
    ///
    /// Immediately start all clocks of the games of a bulk pairing.
    /// This overrides the `startClocksAt` value of an existing bulk pairing.
    /// If the games have not yet been created (`bulk.pairAt` is in the future), then this does nothing.
    /// If the clocks have already started (`bulk.startClocksAt` is in the past), then this does nothing.
    ///
    ///
    /// - Remark: HTTP `POST /api/bulk-pairing/{id}/start-clocks`.
    /// - Remark: Generated from `#/paths//api/bulk-pairing/{id}/start-clocks/post(bulkPairingStartClocks)`.
    internal enum bulkPairingStartClocks {
        internal static let id: Swift.String = "bulkPairingStartClocks"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/bulk-pairing/{id}/start-clocks/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bulk-pairing/{id}/start-clocks/POST/path/id`.
                internal var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id:
                internal init(id: Swift.String) {
                    self.id = id
                }
            }
            internal var path: Operations.bulkPairingStartClocks.Input.Path
            /// - Remark: Generated from `#/paths/api/bulk-pairing/{id}/start-clocks/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.bulkPairingStartClocks.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.bulkPairingStartClocks.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.bulkPairingStartClocks.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.bulkPairingStartClocks.Input.Path,
                headers: Operations.bulkPairingStartClocks.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bulk-pairing/{id}/start-clocks/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bulk-pairing/{id}/start-clocks/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.bulkPairingStartClocks.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/bulk-pairing/{id}/start-clocks/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bulk-pairing/{id}/start-clocks/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.bulkPairingStartClocks.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.bulkPairingStartClocks.Output.Ok.Headers = .init(),
                    body: Operations.bulkPairingStartClocks.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The clocks of the games of a bulk pairing were successfully started.
            ///
            /// - Remark: Generated from `#/paths//api/bulk-pairing/{id}/start-clocks/post(bulkPairingStartClocks)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.bulkPairingStartClocks.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.bulkPairingStartClocks.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bulk-pairing/{id}/start-clocks/POST/responses/404/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bulk-pairing/{id}/start-clocks/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.NotFound)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.NotFound {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.bulkPairingStartClocks.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.bulkPairingStartClocks.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// The bulk pairing was not found.
            ///
            /// - Remark: Generated from `#/paths//api/bulk-pairing/{id}/start-clocks/post(bulkPairingStartClocks)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.bulkPairingStartClocks.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Operations.bulkPairingStartClocks.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Show a bulk pairing
    ///
    /// Get a single bulk pairing by its ID.
    ///
    ///
    /// - Remark: HTTP `GET /api/bulk-pairing/{id}`.
    /// - Remark: Generated from `#/paths//api/bulk-pairing/{id}/get(bulkPairingGet)`.
    internal enum bulkPairingGet {
        internal static let id: Swift.String = "bulkPairingGet"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/bulk-pairing/{id}/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bulk-pairing/{id}/GET/path/id`.
                internal var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id:
                internal init(id: Swift.String) {
                    self.id = id
                }
            }
            internal var path: Operations.bulkPairingGet.Input.Path
            /// - Remark: Generated from `#/paths/api/bulk-pairing/{id}/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.bulkPairingGet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.bulkPairingGet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.bulkPairingGet.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.bulkPairingGet.Input.Path,
                headers: Operations.bulkPairingGet.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bulk-pairing/{id}/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bulk-pairing/{id}/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.bulkPairingGet.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/bulk-pairing/{id}/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bulk-pairing/{id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.BulkPairing)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.BulkPairing {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.bulkPairingGet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.bulkPairingGet.Output.Ok.Headers = .init(),
                    body: Operations.bulkPairingGet.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The bulk pairing.
            ///
            /// - Remark: Generated from `#/paths//api/bulk-pairing/{id}/get(bulkPairingGet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.bulkPairingGet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.bulkPairingGet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bulk-pairing/{id}/GET/responses/404/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bulk-pairing/{id}/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.NotFound)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.NotFound {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.bulkPairingGet.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.bulkPairingGet.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// The bulk pairing was not found.
            ///
            /// - Remark: Generated from `#/paths//api/bulk-pairing/{id}/get(bulkPairingGet)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.bulkPairingGet.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Operations.bulkPairingGet.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Cancel a bulk pairing
    ///
    /// Cancel and delete a bulk pairing that is scheduled in the future.
    /// If the games have already been created, then this does nothing.
    /// Canceling a bulk pairing does not refund the rate limit cost of that bulk pairing.
    ///
    ///
    /// - Remark: HTTP `DELETE /api/bulk-pairing/{id}`.
    /// - Remark: Generated from `#/paths//api/bulk-pairing/{id}/delete(bulkPairingDelete)`.
    internal enum bulkPairingDelete {
        internal static let id: Swift.String = "bulkPairingDelete"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/bulk-pairing/{id}/DELETE/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bulk-pairing/{id}/DELETE/path/id`.
                internal var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id:
                internal init(id: Swift.String) {
                    self.id = id
                }
            }
            internal var path: Operations.bulkPairingDelete.Input.Path
            /// - Remark: Generated from `#/paths/api/bulk-pairing/{id}/DELETE/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.bulkPairingDelete.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.bulkPairingDelete.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.bulkPairingDelete.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.bulkPairingDelete.Input.Path,
                headers: Operations.bulkPairingDelete.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bulk-pairing/{id}/DELETE/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bulk-pairing/{id}/DELETE/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.bulkPairingDelete.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/bulk-pairing/{id}/DELETE/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bulk-pairing/{id}/DELETE/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.bulkPairingDelete.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.bulkPairingDelete.Output.Ok.Headers = .init(),
                    body: Operations.bulkPairingDelete.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The bulk pairing was successfully deleted.
            ///
            /// - Remark: Generated from `#/paths//api/bulk-pairing/{id}/delete(bulkPairingDelete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.bulkPairingDelete.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.bulkPairingDelete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bulk-pairing/{id}/DELETE/responses/404/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bulk-pairing/{id}/DELETE/responses/404/content/application\/json`.
                    case json(Components.Schemas.NotFound)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.NotFound {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.bulkPairingDelete.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.bulkPairingDelete.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// The bulk pairing to delete was not found.
            ///
            /// - Remark: Generated from `#/paths//api/bulk-pairing/{id}/delete(bulkPairingDelete)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.bulkPairingDelete.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Operations.bulkPairingDelete.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Export games of a bulk pairing
    ///
    /// Download games of a bulk in PGN or [ndjson](#section/Introduction/Streaming-with-ND-JSON) format, depending on the request `Accept` header.
    ///
    ///
    /// - Remark: HTTP `GET /api/bulk-pairing/{id}/games`.
    /// - Remark: Generated from `#/paths//api/bulk-pairing/{id}/games/get(bulkPairingIdGamesGet)`.
    internal enum bulkPairingIdGamesGet {
        internal static let id: Swift.String = "bulkPairingIdGamesGet"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/bulk-pairing/{id}/games/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bulk-pairing/{id}/games/GET/path/id`.
                internal var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id:
                internal init(id: Swift.String) {
                    self.id = id
                }
            }
            internal var path: Operations.bulkPairingIdGamesGet.Input.Path
            /// - Remark: Generated from `#/paths/api/bulk-pairing/{id}/games/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Include the PGN moves.
                ///
                /// - Remark: Generated from `#/paths/api/bulk-pairing/{id}/games/GET/query/moves`.
                internal var moves: Swift.Bool?
                /// Include the full PGN within the JSON response, in a `pgn` field.
                ///
                /// - Remark: Generated from `#/paths/api/bulk-pairing/{id}/games/GET/query/pgnInJson`.
                internal var pgnInJson: Swift.Bool?
                /// Include the PGN tags.
                ///
                /// - Remark: Generated from `#/paths/api/bulk-pairing/{id}/games/GET/query/tags`.
                internal var tags: Swift.Bool?
                /// Include clock status when available.
                /// Either as PGN comments: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`
                /// Or in a `clocks` JSON field, as centisecond integers, depending on the response type.
                ///
                ///
                /// - Remark: Generated from `#/paths/api/bulk-pairing/{id}/games/GET/query/clocks`.
                internal var clocks: Swift.Bool?
                /// Include analysis evaluations and comments, when available.
                /// Either as PGN comments: `12. Bxf6 { [%eval 0.23] } a3 { [%eval -1.09] }`
                /// Or in an `analysis` JSON field, depending on the response type.
                ///
                ///
                /// - Remark: Generated from `#/paths/api/bulk-pairing/{id}/games/GET/query/evals`.
                internal var evals: Swift.Bool?
                /// Include [accuracy percent](https://lichess.org/page/accuracy) of each player, when available. Only available in JSON.
                ///
                ///
                /// - Remark: Generated from `#/paths/api/bulk-pairing/{id}/games/GET/query/accuracy`.
                internal var accuracy: Swift.Bool?
                /// Include the opening name.
                /// Example: `[Opening "King's Gambit Accepted, King's Knight Gambit"]`
                ///
                ///
                /// - Remark: Generated from `#/paths/api/bulk-pairing/{id}/games/GET/query/opening`.
                internal var opening: Swift.Bool?
                /// Plies which mark the beginning of the middlegame and endgame.
                /// Only available in JSON
                ///
                ///
                /// - Remark: Generated from `#/paths/api/bulk-pairing/{id}/games/GET/query/division`.
                internal var division: Swift.Bool?
                /// Insert textual annotations in the PGN about the opening, analysis variations, mistakes, and game termination.
                /// Example: `5... g4? { (-0.98 → 0.60) Mistake. Best move was h6. } (5... h6 6. d4 Ne7 7. g3 d5 8. exd5 fxg3 9. hxg3 c6 10. dxc6)`
                ///
                ///
                /// - Remark: Generated from `#/paths/api/bulk-pairing/{id}/games/GET/query/literate`.
                internal var literate: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - moves: Include the PGN moves.
                ///   - pgnInJson: Include the full PGN within the JSON response, in a `pgn` field.
                ///   - tags: Include the PGN tags.
                ///   - clocks: Include clock status when available.
                ///   - evals: Include analysis evaluations and comments, when available.
                ///   - accuracy: Include [accuracy percent](https://lichess.org/page/accuracy) of each player, when available. Only available in JSON.
                ///   - opening: Include the opening name.
                ///   - division: Plies which mark the beginning of the middlegame and endgame.
                ///   - literate: Insert textual annotations in the PGN about the opening, analysis variations, mistakes, and game termination.
                internal init(
                    moves: Swift.Bool? = nil,
                    pgnInJson: Swift.Bool? = nil,
                    tags: Swift.Bool? = nil,
                    clocks: Swift.Bool? = nil,
                    evals: Swift.Bool? = nil,
                    accuracy: Swift.Bool? = nil,
                    opening: Swift.Bool? = nil,
                    division: Swift.Bool? = nil,
                    literate: Swift.Bool? = nil
                ) {
                    self.moves = moves
                    self.pgnInJson = pgnInJson
                    self.tags = tags
                    self.clocks = clocks
                    self.evals = evals
                    self.accuracy = accuracy
                    self.opening = opening
                    self.division = division
                    self.literate = literate
                }
            }
            internal var query: Operations.bulkPairingIdGamesGet.Input.Query
            /// - Remark: Generated from `#/paths/api/bulk-pairing/{id}/games/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.bulkPairingIdGamesGet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.bulkPairingIdGamesGet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.bulkPairingIdGamesGet.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.bulkPairingIdGamesGet.Input.Path,
                query: Operations.bulkPairingIdGamesGet.Input.Query = .init(),
                headers: Operations.bulkPairingIdGamesGet.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/bulk-pairing/{id}/games/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bulk-pairing/{id}/games/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.bulkPairingIdGamesGet.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/bulk-pairing/{id}/games/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/bulk-pairing/{id}/games/GET/responses/200/content/application\/x-chess-pgn`.
                    case application_x_hyphen_chess_hyphen_pgn(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_chess_hyphen_pgn`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_chess_hyphen_pgn`.
                    /// - SeeAlso: `.application_x_hyphen_chess_hyphen_pgn`.
                    internal var application_x_hyphen_chess_hyphen_pgn: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_chess_hyphen_pgn(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/x-chess-pgn",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/api/bulk-pairing/{id}/games/GET/responses/200/content/application\/x-ndjson`.
                    case application_x_hyphen_ndjson(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_ndjson`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_ndjson`.
                    /// - SeeAlso: `.application_x_hyphen_ndjson`.
                    internal var application_x_hyphen_ndjson: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_ndjson(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/x-ndjson",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.bulkPairingIdGamesGet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.bulkPairingIdGamesGet.Output.Ok.Headers = .init(),
                    body: Operations.bulkPairingIdGamesGet.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The representation of the games.
            ///
            /// - Remark: Generated from `#/paths//api/bulk-pairing/{id}/games/get(bulkPairingIdGamesGet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.bulkPairingIdGamesGet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.bulkPairingIdGamesGet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_chess_hyphen_pgn
            case application_x_hyphen_ndjson
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-chess-pgn":
                    self = .application_x_hyphen_chess_hyphen_pgn
                case "application/x-ndjson":
                    self = .application_x_hyphen_ndjson
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_chess_hyphen_pgn:
                    return "application/x-chess-pgn"
                case .application_x_hyphen_ndjson:
                    return "application/x-ndjson"
                }
            }
            internal static var allCases: [Self] {
                [
                    .application_x_hyphen_chess_hyphen_pgn,
                    .application_x_hyphen_ndjson
                ]
            }
        }
    }
    /// Add time to the opponent clock
    ///
    /// Add seconds to the opponent's clock. Can be used to create games with time odds.
    ///
    ///
    /// - Remark: HTTP `POST /api/round/{gameId}/add-time/{seconds}`.
    /// - Remark: Generated from `#/paths//api/round/{gameId}/add-time/{seconds}/post(roundAddTime)`.
    internal enum roundAddTime {
        internal static let id: Swift.String = "roundAddTime"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/round/{gameId}/add-time/{seconds}/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/round/{gameId}/add-time/{seconds}/POST/path/gameId`.
                internal var gameId: Swift.String
                /// How many seconds to give
                ///
                /// - Remark: Generated from `#/paths/api/round/{gameId}/add-time/{seconds}/POST/path/seconds`.
                internal var seconds: Swift.Double
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - gameId:
                ///   - seconds: How many seconds to give
                internal init(
                    gameId: Swift.String,
                    seconds: Swift.Double
                ) {
                    self.gameId = gameId
                    self.seconds = seconds
                }
            }
            internal var path: Operations.roundAddTime.Input.Path
            /// - Remark: Generated from `#/paths/api/round/{gameId}/add-time/{seconds}/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.roundAddTime.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.roundAddTime.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.roundAddTime.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.roundAddTime.Input.Path,
                headers: Operations.roundAddTime.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/round/{gameId}/add-time/{seconds}/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/round/{gameId}/add-time/{seconds}/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.roundAddTime.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/round/{gameId}/add-time/{seconds}/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/round/{gameId}/add-time/{seconds}/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.roundAddTime.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.roundAddTime.Output.Ok.Headers = .init(),
                    body: Operations.roundAddTime.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Time was successfully added to the opponent's clock.
            ///
            /// - Remark: Generated from `#/paths//api/round/{gameId}/add-time/{seconds}/post(roundAddTime)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.roundAddTime.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.roundAddTime.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Admin challenge tokens
    ///
    /// **This endpoint can only be used by Lichess administrators. It will not work if you do not have the appropriate permissions.** Tournament organizers should instead use [OAuth](#tag/OAuth) to obtain `challenge:write` tokens from users in order to perform bulk pairing.*
    /// Create and obtain `challenge:write` tokens for multiple users.
    /// If a similar token already exists for a user, it is reused. This endpoint is idempotent.
    ///
    ///
    /// - Remark: HTTP `POST /api/token/admin-challenge`.
    /// - Remark: Generated from `#/paths//api/token/admin-challenge/post(adminChallengeTokens)`.
    internal enum adminChallengeTokens {
        internal static let id: Swift.String = "adminChallengeTokens"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/token/admin-challenge/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.adminChallengeTokens.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.adminChallengeTokens.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.adminChallengeTokens.Input.Headers
            /// - Remark: Generated from `#/paths/api/token/admin-challenge/POST/requestBody`.
            @frozen internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/token/admin-challenge/POST/requestBody/urlEncodedForm`.
                internal struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// Usernames separated with commas
                    ///
                    /// - Remark: Generated from `#/paths/api/token/admin-challenge/POST/requestBody/urlEncodedForm/users`.
                    internal var users: Swift.String
                    /// User visible description of the token
                    ///
                    /// - Remark: Generated from `#/paths/api/token/admin-challenge/POST/requestBody/urlEncodedForm/description`.
                    internal var description: Swift.String
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - users: Usernames separated with commas
                    ///   - description: User visible description of the token
                    internal init(
                        users: Swift.String,
                        description: Swift.String
                    ) {
                        self.users = users
                        self.description = description
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case users
                        case description
                    }
                }
                /// - Remark: Generated from `#/paths/api/token/admin-challenge/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.adminChallengeTokens.Input.Body.urlEncodedFormPayload)
            }
            internal var body: Operations.adminChallengeTokens.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            internal init(
                headers: Operations.adminChallengeTokens.Input.Headers = .init(),
                body: Operations.adminChallengeTokens.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/token/admin-challenge/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/token/admin-challenge/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.adminChallengeTokens.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/token/admin-challenge/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/token/admin-challenge/POST/responses/200/content/json`.
                    internal struct jsonPayload: Codable, Hashable, Sendable {
                        /// A container of undocumented properties.
                        internal var additionalProperties: [String: Swift.String]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - additionalProperties: A container of undocumented properties.
                        internal init(additionalProperties: [String: Swift.String] = .init()) {
                            self.additionalProperties = additionalProperties
                        }
                        internal init(from decoder: any Decoder) throws {
                            additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                        }
                        internal func encode(to encoder: any Encoder) throws {
                            try encoder.encodeAdditionalProperties(additionalProperties)
                        }
                    }
                    /// - Remark: Generated from `#/paths/api/token/admin-challenge/POST/responses/200/content/application\/json`.
                    case json(Operations.adminChallengeTokens.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.adminChallengeTokens.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.adminChallengeTokens.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.adminChallengeTokens.Output.Ok.Headers = .init(),
                    body: Operations.adminChallengeTokens.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The `challenge:write` tokens of each user
            ///
            /// - Remark: Generated from `#/paths//api/token/admin-challenge/post(adminChallengeTokens)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.adminChallengeTokens.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.adminChallengeTokens.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/token/admin-challenge/POST/responses/400/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/token/admin-challenge/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.adminChallengeTokens.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.adminChallengeTokens.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// The creation of the tokens failed.
            ///
            /// - Remark: Generated from `#/paths//api/token/admin-challenge/post(adminChallengeTokens)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.adminChallengeTokens.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.adminChallengeTokens.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Send a private message
    ///
    /// Send a private message to another player.
    ///
    ///
    /// - Remark: HTTP `POST /inbox/{username}`.
    /// - Remark: Generated from `#/paths//inbox/{username}/post(inboxUsername)`.
    internal enum inboxUsername {
        internal static let id: Swift.String = "inboxUsername"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/inbox/{username}/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/inbox/{username}/POST/path/username`.
                internal var username: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username:
                internal init(username: Swift.String) {
                    self.username = username
                }
            }
            internal var path: Operations.inboxUsername.Input.Path
            /// - Remark: Generated from `#/paths/inbox/{username}/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.inboxUsername.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.inboxUsername.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.inboxUsername.Input.Headers
            /// - Remark: Generated from `#/paths/inbox/{username}/POST/requestBody`.
            @frozen internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/inbox/{username}/POST/requestBody/urlEncodedForm`.
                internal struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/inbox/{username}/POST/requestBody/urlEncodedForm/text`.
                    internal var text: Swift.String
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - text:
                    internal init(text: Swift.String) {
                        self.text = text
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case text
                    }
                }
                /// - Remark: Generated from `#/paths/inbox/{username}/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.inboxUsername.Input.Body.urlEncodedFormPayload)
            }
            internal var body: Operations.inboxUsername.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.inboxUsername.Input.Path,
                headers: Operations.inboxUsername.Input.Headers = .init(),
                body: Operations.inboxUsername.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/inbox/{username}/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/inbox/{username}/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.inboxUsername.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.inboxUsername.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The private message has been successfully sent.
            ///
            /// - Remark: Generated from `#/paths//inbox/{username}/post(inboxUsername)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.inboxUsername.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.inboxUsername.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/inbox/{username}/POST/responses/400/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/inbox/{username}/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.inboxUsername.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.inboxUsername.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// The sending of the private message has failed.
            ///
            /// - Remark: Generated from `#/paths//inbox/{username}/post(inboxUsername)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.inboxUsername.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.inboxUsername.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get cloud evaluation of a position.
    ///
    /// Get the cached evaluation of a position, if available.
    /// Opening positions have more chances of being available. There are about 15 million positions in the database.
    /// Up to 5 variations may be available. Variants are supported.
    /// Use this endpoint to fetch a few positions here and there.
    /// If you want to download a lot of positions, [get the full list](https://database.lichess.org/#evals) from our exported database.
    ///
    ///
    /// - Remark: HTTP `GET /api/cloud-eval`.
    /// - Remark: Generated from `#/paths//api/cloud-eval/get(apiCloudEval)`.
    internal enum apiCloudEval {
        internal static let id: Swift.String = "apiCloudEval"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/cloud-eval/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// FEN of the position
                ///
                /// - Remark: Generated from `#/paths/api/cloud-eval/GET/query/fen`.
                internal var fen: Swift.String
                /// Number of variations
                ///
                /// - Remark: Generated from `#/paths/api/cloud-eval/GET/query/multiPv`.
                internal var multiPv: Swift.Double?
                /// Variant
                ///
                /// - Remark: Generated from `#/paths/api/cloud-eval/GET/query/variant`.
                internal var variant: Components.Schemas.VariantKey?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - fen: FEN of the position
                ///   - multiPv: Number of variations
                ///   - variant: Variant
                internal init(
                    fen: Swift.String,
                    multiPv: Swift.Double? = nil,
                    variant: Components.Schemas.VariantKey? = nil
                ) {
                    self.fen = fen
                    self.multiPv = multiPv
                    self.variant = variant
                }
            }
            internal var query: Operations.apiCloudEval.Input.Query
            /// - Remark: Generated from `#/paths/api/cloud-eval/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiCloudEval.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiCloudEval.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiCloudEval.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.apiCloudEval.Input.Query,
                headers: Operations.apiCloudEval.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/cloud-eval/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/cloud-eval/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiCloudEval.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/cloud-eval/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/cloud-eval/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.CloudEval)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.CloudEval {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiCloudEval.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiCloudEval.Output.Ok.Headers = .init(),
                    body: Operations.apiCloudEval.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The evaluation of the position.
            ///
            /// - Remark: Generated from `#/paths//api/cloud-eval/get(apiCloudEval)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiCloudEval.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiCloudEval.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/cloud-eval/GET/responses/404/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/cloud-eval/GET/responses/404/content/json`.
                    internal struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/api/cloud-eval/GET/responses/404/content/json/error`.
                        internal var error: Swift.String?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - error:
                        internal init(error: Swift.String? = nil) {
                            self.error = error
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case error
                        }
                    }
                    /// - Remark: Generated from `#/paths/api/cloud-eval/GET/responses/404/content/application\/json`.
                    case json(Operations.apiCloudEval.Output.NotFound.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.apiCloudEval.Output.NotFound.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiCloudEval.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.apiCloudEval.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// The position was not found in the cloud evaluation database.
            ///
            /// - Remark: Generated from `#/paths//api/cloud-eval/get(apiCloudEval)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.apiCloudEval.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Operations.apiCloudEval.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List external engines
    ///
    /// Lists all external engines that have been registered for the user,
    /// and the credentials required to use them.
    ///
    ///
    /// - Remark: HTTP `GET /api/external-engine`.
    /// - Remark: Generated from `#/paths//api/external-engine/get(apiExternalEngineList)`.
    internal enum apiExternalEngineList {
        internal static let id: Swift.String = "apiExternalEngineList"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/external-engine/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiExternalEngineList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiExternalEngineList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiExternalEngineList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            internal init(headers: Operations.apiExternalEngineList.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/external-engine/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/external-engine/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiExternalEngineList.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/external-engine/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/external-engine/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.ExternalEngine])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: [Components.Schemas.ExternalEngine] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiExternalEngineList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiExternalEngineList.Output.Ok.Headers = .init(),
                    body: Operations.apiExternalEngineList.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// A list of external engines.
            ///
            /// - Remark: Generated from `#/paths//api/external-engine/get(apiExternalEngineList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiExternalEngineList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiExternalEngineList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create external engine
    ///
    /// Registers a new external engine for the user. It can then be selected
    /// and used on the analysis board.
    /// After registering, the provider should start waiting for analyis requests.
    ///
    ///
    /// - Remark: HTTP `POST /api/external-engine`.
    /// - Remark: Generated from `#/paths//api/external-engine/post(apiExternalEngineCreate)`.
    internal enum apiExternalEngineCreate {
        internal static let id: Swift.String = "apiExternalEngineCreate"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/external-engine/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiExternalEngineCreate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiExternalEngineCreate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiExternalEngineCreate.Input.Headers
            /// - Remark: Generated from `#/paths/api/external-engine/POST/requestBody`.
            @frozen internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/external-engine/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.ExternalEngineRegistration)
            }
            internal var body: Operations.apiExternalEngineCreate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            internal init(
                headers: Operations.apiExternalEngineCreate.Input.Headers = .init(),
                body: Operations.apiExternalEngineCreate.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/external-engine/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/external-engine/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiExternalEngineCreate.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/external-engine/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/external-engine/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ExternalEngine)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ExternalEngine {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiExternalEngineCreate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiExternalEngineCreate.Output.Ok.Headers = .init(),
                    body: Operations.apiExternalEngineCreate.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The registered engine.
            ///
            /// - Remark: Generated from `#/paths//api/external-engine/post(apiExternalEngineCreate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiExternalEngineCreate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiExternalEngineCreate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get external engine
    ///
    /// Get properties and credentials of an external engine.
    ///
    ///
    /// - Remark: HTTP `GET /api/external-engine/{id}`.
    /// - Remark: Generated from `#/paths//api/external-engine/{id}/get(apiExternalEngineGet)`.
    internal enum apiExternalEngineGet {
        internal static let id: Swift.String = "apiExternalEngineGet"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/external-engine/{id}/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// The external engine id.
                ///
                /// - Remark: Generated from `#/paths/api/external-engine/{id}/GET/path/id`.
                internal var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: The external engine id.
                internal init(id: Swift.String) {
                    self.id = id
                }
            }
            internal var path: Operations.apiExternalEngineGet.Input.Path
            /// - Remark: Generated from `#/paths/api/external-engine/{id}/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiExternalEngineGet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiExternalEngineGet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiExternalEngineGet.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.apiExternalEngineGet.Input.Path,
                headers: Operations.apiExternalEngineGet.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/external-engine/{id}/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/external-engine/{id}/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiExternalEngineGet.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/external-engine/{id}/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/external-engine/{id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ExternalEngine)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ExternalEngine {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiExternalEngineGet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiExternalEngineGet.Output.Ok.Headers = .init(),
                    body: Operations.apiExternalEngineGet.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// A registered engine.
            ///
            /// - Remark: Generated from `#/paths//api/external-engine/{id}/get(apiExternalEngineGet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiExternalEngineGet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiExternalEngineGet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update external engine
    ///
    /// Updates the properties of an external engine.
    ///
    ///
    /// - Remark: HTTP `PUT /api/external-engine/{id}`.
    /// - Remark: Generated from `#/paths//api/external-engine/{id}/put(apiExternalEnginePut)`.
    internal enum apiExternalEnginePut {
        internal static let id: Swift.String = "apiExternalEnginePut"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/external-engine/{id}/PUT/path`.
            internal struct Path: Sendable, Hashable {
                /// The external engine id.
                ///
                /// - Remark: Generated from `#/paths/api/external-engine/{id}/PUT/path/id`.
                internal var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: The external engine id.
                internal init(id: Swift.String) {
                    self.id = id
                }
            }
            internal var path: Operations.apiExternalEnginePut.Input.Path
            /// - Remark: Generated from `#/paths/api/external-engine/{id}/PUT/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiExternalEnginePut.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiExternalEnginePut.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiExternalEnginePut.Input.Headers
            /// - Remark: Generated from `#/paths/api/external-engine/{id}/PUT/requestBody`.
            @frozen internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/external-engine/{id}/PUT/requestBody/content/application\/json`.
                case json(Components.Schemas.ExternalEngineRegistration)
            }
            internal var body: Operations.apiExternalEnginePut.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.apiExternalEnginePut.Input.Path,
                headers: Operations.apiExternalEnginePut.Input.Headers = .init(),
                body: Operations.apiExternalEnginePut.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/external-engine/{id}/PUT/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/external-engine/{id}/PUT/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiExternalEnginePut.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/external-engine/{id}/PUT/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/external-engine/{id}/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.ExternalEngine)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ExternalEngine {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiExternalEnginePut.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiExternalEnginePut.Output.Ok.Headers = .init(),
                    body: Operations.apiExternalEnginePut.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// A registered engine.
            ///
            /// - Remark: Generated from `#/paths//api/external-engine/{id}/put(apiExternalEnginePut)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiExternalEnginePut.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiExternalEnginePut.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete external engine
    ///
    /// Unregisters an external engine.
    ///
    ///
    /// - Remark: HTTP `DELETE /api/external-engine/{id}`.
    /// - Remark: Generated from `#/paths//api/external-engine/{id}/delete(apiExternalEngineDelete)`.
    internal enum apiExternalEngineDelete {
        internal static let id: Swift.String = "apiExternalEngineDelete"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/external-engine/{id}/DELETE/path`.
            internal struct Path: Sendable, Hashable {
                /// The external engine id.
                ///
                /// - Remark: Generated from `#/paths/api/external-engine/{id}/DELETE/path/id`.
                internal var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: The external engine id.
                internal init(id: Swift.String) {
                    self.id = id
                }
            }
            internal var path: Operations.apiExternalEngineDelete.Input.Path
            /// - Remark: Generated from `#/paths/api/external-engine/{id}/DELETE/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiExternalEngineDelete.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiExternalEngineDelete.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiExternalEngineDelete.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.apiExternalEngineDelete.Input.Path,
                headers: Operations.apiExternalEngineDelete.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/external-engine/{id}/DELETE/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/external-engine/{id}/DELETE/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ok)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Ok {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiExternalEngineDelete.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.apiExternalEngineDelete.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Engine successfully deleted
            ///
            /// - Remark: Generated from `#/paths//api/external-engine/{id}/delete(apiExternalEngineDelete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiExternalEngineDelete.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiExternalEngineDelete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Analyse with external engine
    ///
    /// **Endpoint: `https://engine.lichess.ovh/api/external-engine/{id}/analyse`**
    /// Request analysis from an external engine.
    /// Response content is streamed as [newline delimited JSON](#section/Introduction/Streaming-with-ND-JSON).
    /// The properties are based on the [UCI specification](https://backscattering.de/chess/uci/#engine).
    /// Analysis stops when the client goes away, the requested limit
    /// is reached, or the provider goes away.
    ///
    ///
    /// - Remark: HTTP `POST /api/external-engine/{id}/analyse`.
    /// - Remark: Generated from `#/paths//api/external-engine/{id}/analyse/post(apiExternalEngineAnalyse)`.
    internal enum apiExternalEngineAnalyse {
        internal static let id: Swift.String = "apiExternalEngineAnalyse"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/external-engine/{id}/analyse/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// The external engine id.
                ///
                /// - Remark: Generated from `#/paths/api/external-engine/{id}/analyse/POST/path/id`.
                internal var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: The external engine id.
                internal init(id: Swift.String) {
                    self.id = id
                }
            }
            internal var path: Operations.apiExternalEngineAnalyse.Input.Path
            /// - Remark: Generated from `#/paths/api/external-engine/{id}/analyse/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiExternalEngineAnalyse.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiExternalEngineAnalyse.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiExternalEngineAnalyse.Input.Headers
            /// - Remark: Generated from `#/paths/api/external-engine/{id}/analyse/POST/requestBody`.
            @frozen internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/external-engine/{id}/analyse/POST/requestBody/json`.
                internal struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/api/external-engine/{id}/analyse/POST/requestBody/json/clientSecret`.
                    internal var clientSecret: Swift.String
                    /// - Remark: Generated from `#/paths/api/external-engine/{id}/analyse/POST/requestBody/json/work`.
                    internal var work: Components.Schemas.ExternalEngineWork
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - clientSecret:
                    ///   - work:
                    internal init(
                        clientSecret: Swift.String,
                        work: Components.Schemas.ExternalEngineWork
                    ) {
                        self.clientSecret = clientSecret
                        self.work = work
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case clientSecret
                        case work
                    }
                }
                /// - Remark: Generated from `#/paths/api/external-engine/{id}/analyse/POST/requestBody/content/application\/json`.
                case json(Operations.apiExternalEngineAnalyse.Input.Body.jsonPayload)
            }
            internal var body: Operations.apiExternalEngineAnalyse.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.apiExternalEngineAnalyse.Input.Path,
                headers: Operations.apiExternalEngineAnalyse.Input.Headers = .init(),
                body: Operations.apiExternalEngineAnalyse.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/external-engine/{id}/analyse/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/external-engine/{id}/analyse/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiExternalEngineAnalyse.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/external-engine/{id}/analyse/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/external-engine/{id}/analyse/POST/responses/200/content/application\/x-ndjson`.
                    case application_x_hyphen_ndjson(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_ndjson`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_ndjson`.
                    /// - SeeAlso: `.application_x_hyphen_ndjson`.
                    internal var application_x_hyphen_ndjson: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_ndjson(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiExternalEngineAnalyse.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiExternalEngineAnalyse.Output.Ok.Headers = .init(),
                    body: Operations.apiExternalEngineAnalyse.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Stream of analysis output
            ///
            /// - Remark: Generated from `#/paths//api/external-engine/{id}/analyse/post(apiExternalEngineAnalyse)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiExternalEngineAnalyse.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiExternalEngineAnalyse.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_ndjson
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-ndjson":
                    self = .application_x_hyphen_ndjson
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_ndjson:
                    return "application/x-ndjson"
                }
            }
            internal static var allCases: [Self] {
                [
                    .application_x_hyphen_ndjson
                ]
            }
        }
    }
    /// Acquire analysis request
    ///
    /// **Endpoint: `https://engine.lichess.ovh/api/external-engine/work`**
    /// Wait for an analysis requests to any of the external engines that
    /// have been registered with the given `secret`.
    /// Uses long polling.
    /// After acquiring a request, the provider should immediately
    /// [start streaming the results](#tag/External-engine/operation/apiExternalEngineSubmit).
    ///
    ///
    /// - Remark: HTTP `POST /api/external-engine/work`.
    /// - Remark: Generated from `#/paths//api/external-engine/work/post(apiExternalEngineAcquire)`.
    internal enum apiExternalEngineAcquire {
        internal static let id: Swift.String = "apiExternalEngineAcquire"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/external-engine/work/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiExternalEngineAcquire.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiExternalEngineAcquire.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiExternalEngineAcquire.Input.Headers
            /// - Remark: Generated from `#/paths/api/external-engine/work/POST/requestBody`.
            @frozen internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/external-engine/work/POST/requestBody/json`.
                internal struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/api/external-engine/work/POST/requestBody/json/providerSecret`.
                    internal var providerSecret: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - providerSecret:
                    internal init(providerSecret: Swift.String? = nil) {
                        self.providerSecret = providerSecret
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case providerSecret
                    }
                }
                /// - Remark: Generated from `#/paths/api/external-engine/work/POST/requestBody/content/application\/json`.
                case json(Operations.apiExternalEngineAcquire.Input.Body.jsonPayload)
            }
            internal var body: Operations.apiExternalEngineAcquire.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            internal init(
                headers: Operations.apiExternalEngineAcquire.Input.Headers = .init(),
                body: Operations.apiExternalEngineAcquire.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/external-engine/work/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/external-engine/work/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiExternalEngineAcquire.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/external-engine/work/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/external-engine/work/POST/responses/200/content/json`.
                    internal struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/api/external-engine/work/POST/responses/200/content/json/id`.
                        internal var id: Swift.String
                        /// - Remark: Generated from `#/paths/api/external-engine/work/POST/responses/200/content/json/work`.
                        internal var work: Components.Schemas.ExternalEngineWork
                        /// - Remark: Generated from `#/paths/api/external-engine/work/POST/responses/200/content/json/engine`.
                        internal var engine: Components.Schemas.ExternalEngine
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - id:
                        ///   - work:
                        ///   - engine:
                        internal init(
                            id: Swift.String,
                            work: Components.Schemas.ExternalEngineWork,
                            engine: Components.Schemas.ExternalEngine
                        ) {
                            self.id = id
                            self.work = work
                            self.engine = engine
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case id
                            case work
                            case engine
                        }
                    }
                    /// - Remark: Generated from `#/paths/api/external-engine/work/POST/responses/200/content/application\/json`.
                    case json(Operations.apiExternalEngineAcquire.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.apiExternalEngineAcquire.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiExternalEngineAcquire.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiExternalEngineAcquire.Output.Ok.Headers = .init(),
                    body: Operations.apiExternalEngineAcquire.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Analysis has been requested
            ///
            /// - Remark: Generated from `#/paths//api/external-engine/work/post(apiExternalEngineAcquire)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiExternalEngineAcquire.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiExternalEngineAcquire.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct NoContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/external-engine/work/POST/responses/204/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/external-engine/work/POST/responses/204/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiExternalEngineAcquire.Output.NoContent.Headers
                /// Creates a new `NoContent`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                internal init(headers: Operations.apiExternalEngineAcquire.Output.NoContent.Headers = .init()) {
                    self.headers = headers
                }
            }
            /// No pending analysis
            ///
            /// - Remark: Generated from `#/paths//api/external-engine/work/post(apiExternalEngineAcquire)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.apiExternalEngineAcquire.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            internal var noContent: Operations.apiExternalEngineAcquire.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Answer analysis request
    ///
    /// **Endpoint: `https://engine.lichess.ovh/api/external-engine/work/{id}`**
    /// Submit a stream of analysis as [UCI output](https://backscattering.de/chess/uci/#engine-info).
    /// * The engine should always be in `UCI_Chess960` mode.
    /// * `UCI_AnalyseMode` enabled if available.
    /// * It produces `info` with at least:
    ///   - `depth`
    ///   - `multipv` (between 1 and 5)
    ///   - `score`
    ///   - `nodes`
    ///   - `time`
    ///   - `pv`
    /// The server may close the connection at any time, indicating that
    /// the requester has gone away and analysis should be stopped.
    ///
    ///
    /// - Remark: HTTP `POST /api/external-engine/work/{id}`.
    /// - Remark: Generated from `#/paths//api/external-engine/work/{id}/post(apiExternalEngineSubmit)`.
    internal enum apiExternalEngineSubmit {
        internal static let id: Swift.String = "apiExternalEngineSubmit"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/external-engine/work/{id}/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/external-engine/work/{id}/POST/path/id`.
                internal var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id:
                internal init(id: Swift.String) {
                    self.id = id
                }
            }
            internal var path: Operations.apiExternalEngineSubmit.Input.Path
            /// - Remark: Generated from `#/paths/api/external-engine/work/{id}/POST/requestBody`.
            @frozen internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/external-engine/work/{id}/POST/requestBody/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
            }
            internal var body: Operations.apiExternalEngineSubmit.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - body:
            internal init(
                path: Operations.apiExternalEngineSubmit.Input.Path,
                body: Operations.apiExternalEngineSubmit.Input.Body
            ) {
                self.path = path
                self.body = body
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/external-engine/work/{id}/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/external-engine/work/{id}/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiExternalEngineSubmit.Output.Ok.Headers
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                internal init(headers: Operations.apiExternalEngineSubmit.Output.Ok.Headers = .init()) {
                    self.headers = headers
                }
            }
            /// Thanks
            ///
            /// - Remark: Generated from `#/paths//api/external-engine/work/{id}/post(apiExternalEngineSubmit)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiExternalEngineSubmit.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiExternalEngineSubmit.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Request authorization code
    ///
    /// OAuth2 authorization endpoint.
    /// Start the OAuth2 Authorization Code Flow with PKCE by securely
    /// generating two random strings unique to each authorization
    /// request:
    ///
    /// * `code_verifier`
    /// * `state`
    ///
    /// Store these in session storage. Make sure not to reveal `code_verifier`
    /// to eavesdroppers. Do not show it in URLs, do not abuse `state` to store
    /// it, do not send it over insecure connections. However it is fine if
    /// the user themselves can extract `code_verifier`, which will always be
    /// possible for fully client-side apps.
    /// Then send the user to this endpoint. They will be prompted to grant
    /// authorization and then be redirected back to the given `redirect_uri`.
    /// If the authorization failed, the following query string parameters will
    /// be appended to the redirection:
    ///
    /// * `error`, in particular with value `access_denied` if the user
    ///    cancelled authorization
    /// * `error_description` to aid debugging
    /// * `state`, exactly as passed in the `state` parameter
    ///
    /// If the authorization succeeded, the following query string parameters
    /// will be appended to the redirection:
    ///
    /// * `code`, containing a fresh short-lived authorization code
    /// * `state`, exactly as passed in the `state` parameter
    ///
    /// Next, to defend against cross site request forgery, check that the
    /// returned `state` matches the `state` you originally generated.
    ///
    /// Finally, continue by using the authorization code to
    /// [obtain an access token](#operation/apiToken).
    ///
    ///
    /// - Remark: HTTP `GET /oauth`.
    /// - Remark: Generated from `#/paths//oauth/get(oauth)`.
    internal enum oauth {
        internal static let id: Swift.String = "oauth"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/oauth/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/oauth/GET/query/response_type`.
                @frozen internal enum response_typePayload: String, Codable, Hashable, Sendable {
                    case code = "code"
                }
                /// Must be `code`.
                ///
                /// - Remark: Generated from `#/paths/oauth/GET/query/response_type`.
                internal var response_type: Operations.oauth.Input.Query.response_typePayload
                /// Arbitrary identifier that uniquely identifies your application.
                ///
                /// - Remark: Generated from `#/paths/oauth/GET/query/client_id`.
                internal var client_id: Swift.String
                /// The absolute URL that the user should be redirected to with the authorization result.
                ///
                /// - Remark: Generated from `#/paths/oauth/GET/query/redirect_uri`.
                internal var redirect_uri: Swift.String
                /// - Remark: Generated from `#/paths/oauth/GET/query/code_challenge_method`.
                @frozen internal enum code_challenge_methodPayload: String, Codable, Hashable, Sendable {
                    case S256 = "S256"
                }
                /// Must be `S256`.
                ///
                /// - Remark: Generated from `#/paths/oauth/GET/query/code_challenge_method`.
                internal var code_challenge_method: Operations.oauth.Input.Query.code_challenge_methodPayload
                /// Compute `BASE64URL(SHA256(code_verifier))`.
                ///
                /// - Remark: Generated from `#/paths/oauth/GET/query/code_challenge`.
                internal var code_challenge: Swift.String
                /// Space separated list of requested OAuth scopes, if any.
                ///
                /// - Remark: Generated from `#/paths/oauth/GET/query/scope`.
                internal var scope: Swift.String?
                /// Hint that you want the user to log in with a specific Lichess username.
                ///
                /// - Remark: Generated from `#/paths/oauth/GET/query/username`.
                internal var username: Swift.String?
                /// Arbitrary state that will be returned verbatim with the authorization result.
                ///
                /// - Remark: Generated from `#/paths/oauth/GET/query/state`.
                internal var state: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - response_type: Must be `code`.
                ///   - client_id: Arbitrary identifier that uniquely identifies your application.
                ///   - redirect_uri: The absolute URL that the user should be redirected to with the authorization result.
                ///   - code_challenge_method: Must be `S256`.
                ///   - code_challenge: Compute `BASE64URL(SHA256(code_verifier))`.
                ///   - scope: Space separated list of requested OAuth scopes, if any.
                ///   - username: Hint that you want the user to log in with a specific Lichess username.
                ///   - state: Arbitrary state that will be returned verbatim with the authorization result.
                internal init(
                    response_type: Operations.oauth.Input.Query.response_typePayload,
                    client_id: Swift.String,
                    redirect_uri: Swift.String,
                    code_challenge_method: Operations.oauth.Input.Query.code_challenge_methodPayload,
                    code_challenge: Swift.String,
                    scope: Swift.String? = nil,
                    username: Swift.String? = nil,
                    state: Swift.String? = nil
                ) {
                    self.response_type = response_type
                    self.client_id = client_id
                    self.redirect_uri = redirect_uri
                    self.code_challenge_method = code_challenge_method
                    self.code_challenge = code_challenge
                    self.scope = scope
                    self.username = username
                    self.state = state
                }
            }
            internal var query: Operations.oauth.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            internal init(query: Operations.oauth.Input.Query) {
                self.query = query
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                internal init() {}
            }
            /// Authorization prompt will be displayed to the user.
            ///
            /// - Remark: Generated from `#/paths//oauth/get(oauth)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.oauth.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.oauth.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Obtain access token
    ///
    /// OAuth2 token endpoint. Exchanges an authorization code for an access token.
    ///
    ///
    /// - Remark: HTTP `POST /api/token`.
    /// - Remark: Generated from `#/paths//api/token/post(apiToken)`.
    internal enum apiToken {
        internal static let id: Swift.String = "apiToken"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/token/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiToken.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apiToken.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.apiToken.Input.Headers
            /// - Remark: Generated from `#/paths/api/token/POST/requestBody`.
            @frozen internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/token/POST/requestBody/urlEncodedForm`.
                internal struct urlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/api/token/POST/requestBody/urlEncodedForm/grant_type`.
                    @frozen internal enum grant_typePayload: String, Codable, Hashable, Sendable {
                        case authorization_code = "authorization_code"
                    }
                    /// - Remark: Generated from `#/paths/api/token/POST/requestBody/urlEncodedForm/grant_type`.
                    internal var grant_type: Operations.apiToken.Input.Body.urlEncodedFormPayload.grant_typePayload?
                    /// The authorization code that was sent in the `code` parameter to your `redirect_uri`.
                    ///
                    /// - Remark: Generated from `#/paths/api/token/POST/requestBody/urlEncodedForm/code`.
                    internal var code: Swift.String?
                    /// A `code_challenge` was used to request the authorization code. This must be the `code_verifier` it was derived from.
                    ///
                    /// - Remark: Generated from `#/paths/api/token/POST/requestBody/urlEncodedForm/code_verifier`.
                    internal var code_verifier: Swift.String?
                    /// Must match the `redirect_uri` used to request the authorization code.
                    ///
                    /// - Remark: Generated from `#/paths/api/token/POST/requestBody/urlEncodedForm/redirect_uri`.
                    internal var redirect_uri: Swift.String?
                    /// Must match the `client_id` used to request the authorization code.
                    ///
                    /// - Remark: Generated from `#/paths/api/token/POST/requestBody/urlEncodedForm/client_id`.
                    internal var client_id: Swift.String?
                    /// Creates a new `urlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - grant_type:
                    ///   - code: The authorization code that was sent in the `code` parameter to your `redirect_uri`.
                    ///   - code_verifier: A `code_challenge` was used to request the authorization code. This must be the `code_verifier` it was derived from.
                    ///   - redirect_uri: Must match the `redirect_uri` used to request the authorization code.
                    ///   - client_id: Must match the `client_id` used to request the authorization code.
                    internal init(
                        grant_type: Operations.apiToken.Input.Body.urlEncodedFormPayload.grant_typePayload? = nil,
                        code: Swift.String? = nil,
                        code_verifier: Swift.String? = nil,
                        redirect_uri: Swift.String? = nil,
                        client_id: Swift.String? = nil
                    ) {
                        self.grant_type = grant_type
                        self.code = code
                        self.code_verifier = code_verifier
                        self.redirect_uri = redirect_uri
                        self.client_id = client_id
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case grant_type
                        case code
                        case code_verifier
                        case redirect_uri
                        case client_id
                    }
                }
                /// - Remark: Generated from `#/paths/api/token/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.apiToken.Input.Body.urlEncodedFormPayload)
            }
            internal var body: Operations.apiToken.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            internal init(
                headers: Operations.apiToken.Input.Headers = .init(),
                body: Operations.apiToken.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/token/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/token/POST/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiToken.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/api/token/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/token/POST/responses/200/content/json`.
                    internal struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/api/token/POST/responses/200/content/json/token_type`.
                        internal var token_type: Swift.String
                        /// - Remark: Generated from `#/paths/api/token/POST/responses/200/content/json/access_token`.
                        internal var access_token: Swift.String
                        /// - Remark: Generated from `#/paths/api/token/POST/responses/200/content/json/expires_in`.
                        internal var expires_in: Swift.Int
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - token_type:
                        ///   - access_token:
                        ///   - expires_in:
                        internal init(
                            token_type: Swift.String,
                            access_token: Swift.String,
                            expires_in: Swift.Int
                        ) {
                            self.token_type = token_type
                            self.access_token = access_token
                            self.expires_in = expires_in
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case token_type
                            case access_token
                            case expires_in
                        }
                    }
                    /// - Remark: Generated from `#/paths/api/token/POST/responses/200/content/application\/json`.
                    case json(Operations.apiToken.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.apiToken.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiToken.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiToken.Output.Ok.Headers = .init(),
                    body: Operations.apiToken.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Access token successfully obtained.
            ///
            /// - Remark: Generated from `#/paths//api/token/post(apiToken)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apiToken.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.apiToken.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/token/POST/responses/400/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/token/POST/responses/400/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiToken.Output.BadRequest.Headers
                /// - Remark: Generated from `#/paths/api/token/POST/responses/400/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/token/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.OAuthError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.OAuthError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.apiToken.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.apiToken.Output.BadRequest.Headers = .init(),
                    body: Operations.apiToken.Output.BadRequest.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Failed to obtain access token.
            ///
            /// - Remark: Generated from `#/paths//api/token/post(apiToken)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.apiToken.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Operations.apiToken.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Revoke access token
    ///
    /// Revokes the access token sent as Bearer for this request.
    ///
    /// - Remark: HTTP `DELETE /api/token`.
    /// - Remark: Generated from `#/paths//api/token/delete(apiTokenDelete)`.
    internal enum apiTokenDelete {
        internal static let id: Swift.String = "apiTokenDelete"
        internal struct Input: Sendable, Hashable {
            /// Creates a new `Input`.
            internal init() {}
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct NoContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/token/DELETE/responses/204/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/token/DELETE/responses/204/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.apiTokenDelete.Output.NoContent.Headers
                /// Creates a new `NoContent`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                internal init(headers: Operations.apiTokenDelete.Output.NoContent.Headers = .init()) {
                    self.headers = headers
                }
            }
            /// Access token revoked.
            ///
            /// - Remark: Generated from `#/paths//api/token/delete(apiTokenDelete)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.apiTokenDelete.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            internal var noContent: Operations.apiTokenDelete.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Test multiple OAuth tokens
    ///
    /// For up to 1000 OAuth tokens,
    /// returns their associated user ID and scopes,
    /// or `null` if the token is invalid.
    /// The method is `POST` so a longer list of tokens can be sent in the request body.
    ///
    ///
    /// - Remark: HTTP `POST /api/token/test`.
    /// - Remark: Generated from `#/paths//api/token/test/post(tokenTest)`.
    internal enum tokenTest {
        internal static let id: Swift.String = "tokenTest"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/token/test/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tokenTest.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tokenTest.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.tokenTest.Input.Headers
            /// - Remark: Generated from `#/paths/api/token/test/POST/requestBody`.
            @frozen internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/token/test/POST/requestBody/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
            }
            internal var body: Operations.tokenTest.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            internal init(
                headers: Operations.tokenTest.Input.Headers = .init(),
                body: Operations.tokenTest.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/token/test/POST/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/token/test/POST/responses/200/content/json`.
                    internal struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/api/token/test/POST/responses/200/content/json/additionalProperties`.
                        @frozen internal enum additionalPropertiesPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/api/token/test/POST/responses/200/content/json/additionalProperties/case1`.
                            internal struct Case1Payload: Codable, Hashable, Sendable {
                                /// - Remark: Generated from `#/paths/api/token/test/POST/responses/200/content/json/additionalProperties/case1/userId`.
                                internal var userId: Swift.String?
                                /// Comma-separated list of scopes. Empty string if the token has no scopes.
                                ///
                                /// - Remark: Generated from `#/paths/api/token/test/POST/responses/200/content/json/additionalProperties/case1/scopes`.
                                internal var scopes: Swift.String?
                                /// Unix-timestamp in milliseconds or null if the token never expires.
                                ///
                                /// - Remark: Generated from `#/paths/api/token/test/POST/responses/200/content/json/additionalProperties/case1/expires`.
                                internal var expires: Swift.Int?
                                /// Creates a new `Case1Payload`.
                                ///
                                /// - Parameters:
                                ///   - userId:
                                ///   - scopes: Comma-separated list of scopes. Empty string if the token has no scopes.
                                ///   - expires: Unix-timestamp in milliseconds or null if the token never expires.
                                internal init(
                                    userId: Swift.String? = nil,
                                    scopes: Swift.String? = nil,
                                    expires: Swift.Int? = nil
                                ) {
                                    self.userId = userId
                                    self.scopes = scopes
                                    self.expires = expires
                                }
                                internal enum CodingKeys: String, CodingKey {
                                    case userId
                                    case scopes
                                    case expires
                                }
                            }
                            /// - Remark: Generated from `#/paths/api/token/test/POST/responses/200/content/json/additionalProperties/case1`.
                            case case1(Operations.tokenTest.Output.Ok.Body.jsonPayload.additionalPropertiesPayload.Case1Payload)
                            /// - Remark: Generated from `#/paths/api/token/test/POST/responses/200/content/json/additionalProperties/case2`.
                            case case2(Operations.tokenTest.Output.Ok.Body.jsonPayload.additionalPropertiesPayload.Case2Payload?)
                            internal init(from decoder: any Decoder) throws {
                                var errors: [any Error] = []
                                do {
                                    self = .case1(try .init(from: decoder))
                                    return
                                } catch {
                                    errors.append(error)
                                }
                                do {
                                    self = .case2(
                                        try decoder.decodeFromSingleValueContainer(
                                            Operations.tokenTest.Output.Ok.Body.jsonPayload.additionalPropertiesPayload.Case2Payload?.self
                                        )
                                    )
                                    return
                                } catch {
                                    errors.append(error)
                                }
                                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                    type: Self.self,
                                    codingPath: decoder.codingPath,
                                    errors: errors
                                )
                            }
                            internal func encode(to encoder: any Encoder) throws {
                                switch self {
                                case let .case1(value):
                                    try value.encode(to: encoder)
                                case let .case2(value):
                                    try encoder.encodeToSingleValueContainer(value)
                                }
                            }
                        }
                        /// A container of undocumented properties.
                        internal var additionalProperties: [String: Operations.tokenTest.Output.Ok.Body.jsonPayload.additionalPropertiesPayload?]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - additionalProperties: A container of undocumented properties.
                        internal init(additionalProperties: [String: Operations.tokenTest.Output.Ok.Body.jsonPayload.additionalPropertiesPayload?] = .init()) {
                            self.additionalProperties = additionalProperties
                        }
                        internal init(from decoder: any Decoder) throws {
                            additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                        }
                        internal func encode(to encoder: any Encoder) throws {
                            try encoder.encodeAdditionalProperties(additionalProperties)
                        }
                    }
                    /// - Remark: Generated from `#/paths/api/token/test/POST/responses/200/content/application\/json`.
                    case json(Operations.tokenTest.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.tokenTest.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.tokenTest.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.tokenTest.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The representation of the OAuth tokens.
            ///
            /// - Remark: Generated from `#/paths//api/token/test/post(tokenTest)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.tokenTest.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.tokenTest.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Masters database
    ///
    /// **Endpoint: <https://explorer.lichess.ovh/masters>**
    ///
    /// Example: `curl https://explorer.lichess.ovh/masters?play=d2d4,d7d5,c2c4,c7c6,c4d5`
    ///
    ///
    /// - Remark: HTTP `GET /masters`.
    /// - Remark: Generated from `#/paths//masters/get(openingExplorerMaster)`.
    internal enum openingExplorerMaster {
        internal static let id: Swift.String = "openingExplorerMaster"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/masters/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// FEN of the root position
                ///
                /// - Remark: Generated from `#/paths/masters/GET/query/fen`.
                internal var fen: Swift.String?
                /// Comma separated sequence of legal moves in UCI notation.
                /// Play additional moves starting from `fen`.
                /// Required to find an opening name, if `fen` is not an exact match
                /// for a named position.
                ///
                ///
                /// - Remark: Generated from `#/paths/masters/GET/query/play`.
                internal var play: Swift.String?
                /// Include only games from this year or later
                ///
                /// - Remark: Generated from `#/paths/masters/GET/query/since`.
                internal var since: Swift.Double?
                /// Include only games from this year or earlier
                ///
                /// - Remark: Generated from `#/paths/masters/GET/query/until`.
                internal var until: Swift.Double?
                /// Number of most common moves to display
                ///
                /// - Remark: Generated from `#/paths/masters/GET/query/moves`.
                internal var moves: Swift.Double?
                /// Number of top games to display
                ///
                /// - Remark: Generated from `#/paths/masters/GET/query/topGames`.
                internal var topGames: Swift.Double?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - fen: FEN of the root position
                ///   - play: Comma separated sequence of legal moves in UCI notation.
                ///   - since: Include only games from this year or later
                ///   - until: Include only games from this year or earlier
                ///   - moves: Number of most common moves to display
                ///   - topGames: Number of top games to display
                internal init(
                    fen: Swift.String? = nil,
                    play: Swift.String? = nil,
                    since: Swift.Double? = nil,
                    until: Swift.Double? = nil,
                    moves: Swift.Double? = nil,
                    topGames: Swift.Double? = nil
                ) {
                    self.fen = fen
                    self.play = play
                    self.since = since
                    self.until = until
                    self.moves = moves
                    self.topGames = topGames
                }
            }
            internal var query: Operations.openingExplorerMaster.Input.Query
            /// - Remark: Generated from `#/paths/masters/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.openingExplorerMaster.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.openingExplorerMaster.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.openingExplorerMaster.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.openingExplorerMaster.Input.Query = .init(),
                headers: Operations.openingExplorerMaster.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/masters/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/masters/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.openingExplorerMaster.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/masters/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/masters/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.OpeningExplorerMasters)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.OpeningExplorerMasters {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.openingExplorerMaster.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.openingExplorerMaster.Output.Ok.Headers = .init(),
                    body: Operations.openingExplorerMaster.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Opening statistics and game references for the position.
            ///
            /// - Remark: Generated from `#/paths//masters/get(openingExplorerMaster)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.openingExplorerMaster.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.openingExplorerMaster.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Lichess games
    ///
    /// **Endpoint: <https://explorer.lichess.ovh/lichess>**
    ///
    /// Games sampled from all Lichess players.
    ///
    /// Example: `curl https://explorer.lichess.ovh/lichess?variant=standard&speeds=blitz,rapid,classical&ratings=2200,2500&fen=rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR%20w%20KQkq%20-%200%201`
    ///
    ///
    /// - Remark: HTTP `GET /lichess`.
    /// - Remark: Generated from `#/paths//lichess/get(openingExplorerLichess)`.
    internal enum openingExplorerLichess {
        internal static let id: Swift.String = "openingExplorerLichess"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/lichess/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Variant
                ///
                /// - Remark: Generated from `#/paths/lichess/GET/query/variant`.
                internal var variant: Components.Schemas.VariantKey?
                /// FEN or EPD of the root position
                ///
                /// - Remark: Generated from `#/paths/lichess/GET/query/fen`.
                internal var fen: Swift.String?
                /// Comma separated sequence of legal moves in UCI notation.
                /// Play additional moves starting from `fen`.
                /// Required to find an opening name, if `fen` is not an exact match
                /// for a named position.
                ///
                ///
                /// - Remark: Generated from `#/paths/lichess/GET/query/play`.
                internal var play: Swift.String?
                /// Comma separated list of game speeds to filter by
                ///
                /// - Remark: Generated from `#/paths/lichess/GET/query/speeds`.
                internal var speeds: [Components.Schemas.Speed]?
                /// Comma separated list of ratings groups to filter by.
                /// Each group ranges from its value to the next higher
                /// group in the enum (`0` from 0 to 999, `1000` from 1000 to 1199,
                /// ..., `2500` from 2500 to any rating above).
                ///
                ///
                /// - Remark: Generated from `#/paths/lichess/GET/query/ratings`.
                internal var ratings: [Swift.Double]?
                /// Include only games from this month or later
                ///
                /// - Remark: Generated from `#/paths/lichess/GET/query/since`.
                internal var since: Swift.String?
                /// Include only games from this month or earlier
                ///
                /// - Remark: Generated from `#/paths/lichess/GET/query/until`.
                internal var until: Swift.String?
                /// Number of most common moves to display
                ///
                /// - Remark: Generated from `#/paths/lichess/GET/query/moves`.
                internal var moves: Swift.Double?
                /// Maximum number of top games to display.
                ///
                /// Due to the way banned users are handled internally, the response may
                /// contain fewer games than expected.
                ///
                ///
                /// - Remark: Generated from `#/paths/lichess/GET/query/topGames`.
                internal var topGames: Swift.Double?
                /// Maximum number of recent games to display.
                ///
                /// Due to the way banned users are handled internally, the response may
                /// contain fewer games than expected.
                ///
                ///
                /// - Remark: Generated from `#/paths/lichess/GET/query/recentGames`.
                internal var recentGames: Swift.Double?
                /// Optionally retrieve history
                ///
                /// - Remark: Generated from `#/paths/lichess/GET/query/history`.
                internal var history: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - variant: Variant
                ///   - fen: FEN or EPD of the root position
                ///   - play: Comma separated sequence of legal moves in UCI notation.
                ///   - speeds: Comma separated list of game speeds to filter by
                ///   - ratings: Comma separated list of ratings groups to filter by.
                ///   - since: Include only games from this month or later
                ///   - until: Include only games from this month or earlier
                ///   - moves: Number of most common moves to display
                ///   - topGames: Maximum number of top games to display.
                ///   - recentGames: Maximum number of recent games to display.
                ///   - history: Optionally retrieve history
                internal init(
                    variant: Components.Schemas.VariantKey? = nil,
                    fen: Swift.String? = nil,
                    play: Swift.String? = nil,
                    speeds: [Components.Schemas.Speed]? = nil,
                    ratings: [Swift.Double]? = nil,
                    since: Swift.String? = nil,
                    until: Swift.String? = nil,
                    moves: Swift.Double? = nil,
                    topGames: Swift.Double? = nil,
                    recentGames: Swift.Double? = nil,
                    history: Swift.Bool? = nil
                ) {
                    self.variant = variant
                    self.fen = fen
                    self.play = play
                    self.speeds = speeds
                    self.ratings = ratings
                    self.since = since
                    self.until = until
                    self.moves = moves
                    self.topGames = topGames
                    self.recentGames = recentGames
                    self.history = history
                }
            }
            internal var query: Operations.openingExplorerLichess.Input.Query
            /// - Remark: Generated from `#/paths/lichess/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.openingExplorerLichess.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.openingExplorerLichess.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.openingExplorerLichess.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.openingExplorerLichess.Input.Query = .init(),
                headers: Operations.openingExplorerLichess.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/lichess/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/lichess/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.openingExplorerLichess.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/lichess/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/lichess/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.OpeningExplorerLichess)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.OpeningExplorerLichess {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.openingExplorerLichess.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.openingExplorerLichess.Output.Ok.Headers = .init(),
                    body: Operations.openingExplorerLichess.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Opening statistics and game references for the position.
            ///
            /// - Remark: Generated from `#/paths//lichess/get(openingExplorerLichess)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.openingExplorerLichess.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.openingExplorerLichess.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Player games
    ///
    /// **Endpoint: <https://explorer.lichess.ovh/player>**
    ///
    /// Games of a Lichess player.
    ///
    /// Responds with a stream of [newline delimited JSON](#section/Introduction/Streaming-with-ND-JSON). Will start indexing
    /// on demand, immediately respond with the current results, and stream
    /// more updates until indexing is complete. The stream is throttled
    /// and deduplicated. Empty lines may be sent to avoid timeouts.
    ///
    /// Will index new games at most once per minute, and revisit previously
    /// ongoing games at most once every day.
    ///
    /// Example: `curl https://explorer.lichess.ovh/player?player=revoof&color=white&play=d2d4,d7d5&recentGames=1`
    ///
    ///
    /// - Remark: HTTP `GET /player`.
    /// - Remark: Generated from `#/paths//player/get(openingExplorerPlayer)`.
    internal enum openingExplorerPlayer {
        internal static let id: Swift.String = "openingExplorerPlayer"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/player/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Username or ID of the player
                ///
                /// - Remark: Generated from `#/paths/player/GET/query/player`.
                internal var player: Swift.String
                /// - Remark: Generated from `#/paths/player/GET/query/color`.
                @frozen internal enum colorPayload: String, Codable, Hashable, Sendable {
                    case white = "white"
                    case black = "black"
                }
                /// Look for games with *player* on the given side
                ///
                /// - Remark: Generated from `#/paths/player/GET/query/color`.
                internal var color: Operations.openingExplorerPlayer.Input.Query.colorPayload
                /// Variant
                ///
                /// - Remark: Generated from `#/paths/player/GET/query/variant`.
                internal var variant: Components.Schemas.VariantKey?
                /// FEN of the root position
                ///
                /// - Remark: Generated from `#/paths/player/GET/query/fen`.
                internal var fen: Swift.String?
                /// Comma separated sequence of legal moves in UCI notation.
                /// Play additional moves starting from `fen`.
                /// Required to find an opening name, if `fen` is not an exact match
                /// for a named position.
                ///
                ///
                /// - Remark: Generated from `#/paths/player/GET/query/play`.
                internal var play: Swift.String?
                /// Comma separated list of game speeds to look for
                ///
                /// - Remark: Generated from `#/paths/player/GET/query/speeds`.
                internal var speeds: [Components.Schemas.Speed]?
                /// - Remark: Generated from `#/paths/player/GET/query/modesPayload`.
                @frozen internal enum modesPayloadPayload: String, Codable, Hashable, Sendable {
                    case casual = "casual"
                    case rated = "rated"
                }
                /// - Remark: Generated from `#/paths/player/GET/query/modes`.
                internal typealias modesPayload = [Operations.openingExplorerPlayer.Input.Query.modesPayloadPayload]
                /// Comma separated list of modes
                ///
                /// - Remark: Generated from `#/paths/player/GET/query/modes`.
                internal var modes: Operations.openingExplorerPlayer.Input.Query.modesPayload?
                /// Include only games from this month or later
                ///
                /// - Remark: Generated from `#/paths/player/GET/query/since`.
                internal var since: Swift.String?
                /// Include only games from this month or earlier
                ///
                /// - Remark: Generated from `#/paths/player/GET/query/until`.
                internal var until: Swift.String?
                /// Number of most common moves to display
                ///
                /// - Remark: Generated from `#/paths/player/GET/query/moves`.
                internal var moves: Swift.Double?
                /// Number of recent games to display
                ///
                /// - Remark: Generated from `#/paths/player/GET/query/recentGames`.
                internal var recentGames: Swift.Double?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - player: Username or ID of the player
                ///   - color: Look for games with *player* on the given side
                ///   - variant: Variant
                ///   - fen: FEN of the root position
                ///   - play: Comma separated sequence of legal moves in UCI notation.
                ///   - speeds: Comma separated list of game speeds to look for
                ///   - modes: Comma separated list of modes
                ///   - since: Include only games from this month or later
                ///   - until: Include only games from this month or earlier
                ///   - moves: Number of most common moves to display
                ///   - recentGames: Number of recent games to display
                internal init(
                    player: Swift.String,
                    color: Operations.openingExplorerPlayer.Input.Query.colorPayload,
                    variant: Components.Schemas.VariantKey? = nil,
                    fen: Swift.String? = nil,
                    play: Swift.String? = nil,
                    speeds: [Components.Schemas.Speed]? = nil,
                    modes: Operations.openingExplorerPlayer.Input.Query.modesPayload? = nil,
                    since: Swift.String? = nil,
                    until: Swift.String? = nil,
                    moves: Swift.Double? = nil,
                    recentGames: Swift.Double? = nil
                ) {
                    self.player = player
                    self.color = color
                    self.variant = variant
                    self.fen = fen
                    self.play = play
                    self.speeds = speeds
                    self.modes = modes
                    self.since = since
                    self.until = until
                    self.moves = moves
                    self.recentGames = recentGames
                }
            }
            internal var query: Operations.openingExplorerPlayer.Input.Query
            /// - Remark: Generated from `#/paths/player/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.openingExplorerPlayer.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.openingExplorerPlayer.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.openingExplorerPlayer.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.openingExplorerPlayer.Input.Query,
                headers: Operations.openingExplorerPlayer.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/player/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/player/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.openingExplorerPlayer.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/player/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/player/GET/responses/200/content/application\/x-ndjson`.
                    case application_x_hyphen_ndjson(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_ndjson`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_ndjson`.
                    /// - SeeAlso: `.application_x_hyphen_ndjson`.
                    internal var application_x_hyphen_ndjson: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_ndjson(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.openingExplorerPlayer.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.openingExplorerPlayer.Output.Ok.Headers = .init(),
                    body: Operations.openingExplorerPlayer.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Opening statistics and game references for the position.
            ///
            /// - Remark: Generated from `#/paths//player/get(openingExplorerPlayer)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.openingExplorerPlayer.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.openingExplorerPlayer.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_ndjson
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-ndjson":
                    self = .application_x_hyphen_ndjson
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_ndjson:
                    return "application/x-ndjson"
                }
            }
            internal static var allCases: [Self] {
                [
                    .application_x_hyphen_ndjson
                ]
            }
        }
    }
    /// OTB master game
    ///
    /// **Endpoint: `https://explorer.lichess.ovh/masters/pgn/{gameId}`**
    ///
    /// Example: `curl https://explorer.lichess.ovh/masters/pgn/aAbqI4ey`
    ///
    ///
    /// - Remark: HTTP `GET /master/pgn/{gameId}`.
    /// - Remark: Generated from `#/paths//master/pgn/{gameId}/get(openingExplorerMasterGame)`.
    internal enum openingExplorerMasterGame {
        internal static let id: Swift.String = "openingExplorerMasterGame"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/master/pgn/{gameId}/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/master/pgn/{gameId}/GET/path/gameId`.
                internal var gameId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - gameId:
                internal init(gameId: Swift.String) {
                    self.gameId = gameId
                }
            }
            internal var path: Operations.openingExplorerMasterGame.Input.Path
            /// - Remark: Generated from `#/paths/master/pgn/{gameId}/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.openingExplorerMasterGame.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.openingExplorerMasterGame.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.openingExplorerMasterGame.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.openingExplorerMasterGame.Input.Path,
                headers: Operations.openingExplorerMasterGame.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/master/pgn/{gameId}/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/master/pgn/{gameId}/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.openingExplorerMasterGame.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/master/pgn/{gameId}/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/master/pgn/{gameId}/GET/responses/200/content/application\/x-chess-pgn`.
                    case application_x_hyphen_chess_hyphen_pgn(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_chess_hyphen_pgn`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_chess_hyphen_pgn`.
                    /// - SeeAlso: `.application_x_hyphen_chess_hyphen_pgn`.
                    internal var application_x_hyphen_chess_hyphen_pgn: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_chess_hyphen_pgn(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.openingExplorerMasterGame.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.openingExplorerMasterGame.Output.Ok.Headers = .init(),
                    body: Operations.openingExplorerMasterGame.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The PGN representation of the game.
            ///
            /// - Remark: Generated from `#/paths//master/pgn/{gameId}/get(openingExplorerMasterGame)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.openingExplorerMasterGame.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.openingExplorerMasterGame.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_chess_hyphen_pgn
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-chess-pgn":
                    self = .application_x_hyphen_chess_hyphen_pgn
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_chess_hyphen_pgn:
                    return "application/x-chess-pgn"
                }
            }
            internal static var allCases: [Self] {
                [
                    .application_x_hyphen_chess_hyphen_pgn
                ]
            }
        }
    }
    /// Tablebase lookup
    ///
    /// **Endpoint: <https://tablebase.lichess.ovh>**
    /// Example: `curl http://tablebase.lichess.ovh/standard?fen=4k3/6KP/8/8/8/8/7p/8_w_-_-_0_1`
    ///
    ///
    /// - Remark: HTTP `GET /standard`.
    /// - Remark: Generated from `#/paths//standard/get(tablebaseStandard)`.
    internal enum tablebaseStandard {
        internal static let id: Swift.String = "tablebaseStandard"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/standard/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// FEN of the position. Underscores allowed.
                ///
                /// - Remark: Generated from `#/paths/standard/GET/query/fen`.
                internal var fen: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - fen: FEN of the position. Underscores allowed.
                internal init(fen: Swift.String) {
                    self.fen = fen
                }
            }
            internal var query: Operations.tablebaseStandard.Input.Query
            /// - Remark: Generated from `#/paths/standard/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tablebaseStandard.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tablebaseStandard.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.tablebaseStandard.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.tablebaseStandard.Input.Query,
                headers: Operations.tablebaseStandard.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/standard/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/standard/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.tablebaseStandard.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/standard/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/standard/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.TablebaseJson)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.TablebaseJson {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.tablebaseStandard.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.tablebaseStandard.Output.Ok.Headers = .init(),
                    body: Operations.tablebaseStandard.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The tablebase information for the position in standard chess.
            ///
            /// - Remark: Generated from `#/paths//standard/get(tablebaseStandard)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.tablebaseStandard.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.tablebaseStandard.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Tablebase lookup for Atomic chess
    ///
    /// **Endpoint: <https://tablebase.lichess.ovh>**
    ///
    ///
    /// - Remark: HTTP `GET /atomic`.
    /// - Remark: Generated from `#/paths//atomic/get(tablebaseAtomic)`.
    internal enum tablebaseAtomic {
        internal static let id: Swift.String = "tablebaseAtomic"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/atomic/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// FEN of the position. Underscores allowed.
                ///
                /// - Remark: Generated from `#/paths/atomic/GET/query/fen`.
                internal var fen: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - fen: FEN of the position. Underscores allowed.
                internal init(fen: Swift.String) {
                    self.fen = fen
                }
            }
            internal var query: Operations.tablebaseAtomic.Input.Query
            /// - Remark: Generated from `#/paths/atomic/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tablebaseAtomic.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tablebaseAtomic.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.tablebaseAtomic.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.tablebaseAtomic.Input.Query,
                headers: Operations.tablebaseAtomic.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/atomic/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/atomic/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.tablebaseAtomic.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/atomic/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/atomic/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.TablebaseJson)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.TablebaseJson {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.tablebaseAtomic.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.tablebaseAtomic.Output.Ok.Headers = .init(),
                    body: Operations.tablebaseAtomic.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The tablebase information for the position in atomic chess.
            ///
            /// - Remark: Generated from `#/paths//atomic/get(tablebaseAtomic)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.tablebaseAtomic.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.tablebaseAtomic.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Tablebase lookup for Antichess
    ///
    /// **Endpoint: <https://tablebase.lichess.ovh>**
    ///
    ///
    /// - Remark: HTTP `GET /antichess`.
    /// - Remark: Generated from `#/paths//antichess/get(antichessAtomic)`.
    internal enum antichessAtomic {
        internal static let id: Swift.String = "antichessAtomic"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/antichess/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// FEN of the position. Underscores allowed.
                ///
                /// - Remark: Generated from `#/paths/antichess/GET/query/fen`.
                internal var fen: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - fen: FEN of the position. Underscores allowed.
                internal init(fen: Swift.String) {
                    self.fen = fen
                }
            }
            internal var query: Operations.antichessAtomic.Input.Query
            /// - Remark: Generated from `#/paths/antichess/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.antichessAtomic.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.antichessAtomic.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.antichessAtomic.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.antichessAtomic.Input.Query,
                headers: Operations.antichessAtomic.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/antichess/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/antichess/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    internal init(Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.antichessAtomic.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/antichess/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/antichess/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.TablebaseJson)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.TablebaseJson {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.antichessAtomic.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.antichessAtomic.Output.Ok.Headers = .init(),
                    body: Operations.antichessAtomic.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The tablebase information for the position in antichess.
            ///
            /// - Remark: Generated from `#/paths//antichess/get(antichessAtomic)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.antichessAtomic.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.antichessAtomic.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
